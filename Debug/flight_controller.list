
flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008648  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080087e8  080087e8  000097e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c4c  08008c4c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c4c  08008c4c  00009c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c54  08008c54  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c54  08008c54  00009c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c58  08008c58  00009c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008c5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001d4  08008e30  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08008e30  0000a438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6b7  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b96  00000000  00000000  000158bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00017458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000826  00000000  00000000  00017ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ab9  00000000  00000000  000186ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d379  00000000  00000000  0002f1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ec5  00000000  00000000  0003c520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c63e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c28  00000000  00000000  000c6428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000ca050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080087d0 	.word	0x080087d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080087d0 	.word	0x080087d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <__io_putchar>:
void MPU6050_Read_Accel_Gyro(int16_t *Acc, int16_t *Gyro);
void MPU6050_Calibrate(void);

/* Retarget printf to UART2 */
int __io_putchar(int ch)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    uint8_t c = (uint8_t)ch;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
 8000ef2:	f107 010f 	add.w	r1, r7, #15
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	2201      	movs	r2, #1
 8000efc:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <__io_putchar+0x28>)
 8000efe:	f004 fb97 	bl	8005630 <HAL_UART_Transmit>
    return ch;
 8000f02:	687b      	ldr	r3, [r7, #4]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000244 	.word	0x20000244

08000f10 <main>:
/* Simple moving average buffers */
float accX_buf[FILTER_SIZE] = {0}, accY_buf[FILTER_SIZE] = {0}, accZ_buf[FILTER_SIZE] = {0};
int filter_index = 0;

int main(void)
{
 8000f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f14:	b090      	sub	sp, #64	@ 0x40
 8000f16:	af04      	add	r7, sp, #16
    HAL_Init();
 8000f18:	f000 fe20 	bl	8001b5c <HAL_Init>
    SystemClock_Config();
 8000f1c:	f000 fb94 	bl	8001648 <SystemClock_Config>

    MX_GPIO_Init();
 8000f20:	f000 fb60 	bl	80015e4 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000f24:	f000 fa90 	bl	8001448 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000f28:	f000 faf8 	bl	800151c <MX_USART2_UART_Init>

    printf("Starting MPU6050 Flight Controller\r\n");
 8000f2c:	4894      	ldr	r0, [pc, #592]	@ (8001180 <main+0x270>)
 8000f2e:	f005 fcbb 	bl	80068a8 <puts>

    /* Power LED ON always */


    /* Initialize MPU6050 */
    MPU6050_Init();
 8000f32:	f000 f93f 	bl	80011b4 <MPU6050_Init>

    /* WHO_AM_I check */
    uint8_t who = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x75, 1, &who, 1, 1000);
 8000f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2301      	movs	r3, #1
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	f107 030f 	add.w	r3, r7, #15
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2275      	movs	r2, #117	@ 0x75
 8000f4e:	21d0      	movs	r1, #208	@ 0xd0
 8000f50:	488c      	ldr	r0, [pc, #560]	@ (8001184 <main+0x274>)
 8000f52:	f001 fbe7 	bl	8002724 <HAL_I2C_Mem_Read>
    if (who == 0x68)
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b68      	cmp	r3, #104	@ 0x68
 8000f5a:	d105      	bne.n	8000f68 <main+0x58>
        printf("MPU6050 detected (WHO_AM_I=0x%02X)\r\n", who);
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4889      	ldr	r0, [pc, #548]	@ (8001188 <main+0x278>)
 8000f62:	f005 fc39 	bl	80067d8 <iprintf>
 8000f66:	e004      	b.n	8000f72 <main+0x62>
    else
        printf("MPU6050 NOT detected! WHO=0x%02X\r\n", who);
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4887      	ldr	r0, [pc, #540]	@ (800118c <main+0x27c>)
 8000f6e:	f005 fc33 	bl	80067d8 <iprintf>

    /* Calibrate sensor */
    MPU6050_Calibrate();
 8000f72:	f000 f9bf 	bl	80012f4 <MPU6050_Calibrate>
    int16_t Acc[3], Gyro[3];
    float accX_g, accY_g, accZ_g;

    while (1)
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4885      	ldr	r0, [pc, #532]	@ (8001190 <main+0x280>)
 8000f7c:	f001 f94a 	bl	8002214 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);  // MPU active blink
 8000f80:	2102      	movs	r1, #2
 8000f82:	4883      	ldr	r0, [pc, #524]	@ (8001190 <main+0x280>)
 8000f84:	f001 f95f 	bl	8002246 <HAL_GPIO_TogglePin>

        /* Read sensor data */
        MPU6050_Read_Accel_Gyro(Acc, Gyro);
 8000f88:	463a      	mov	r2, r7
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f94d 	bl	8001230 <MPU6050_Read_Accel_Gyro>

        /* Normalize accelerometer values */
        accX_g = ((float)Acc[0] - acc_offset[0]) / 16384.0f;
 8000f96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8001194 <main+0x284>)
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fac:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8001198 <main+0x288>
 8000fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb4:	edc7 7a07 	vstr	s15, [r7, #28]
        accY_g = ((float)Acc[1] - acc_offset[1]) / 16384.0f;
 8000fb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	4b73      	ldr	r3, [pc, #460]	@ (8001194 <main+0x284>)
 8000fc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fce:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8001198 <main+0x288>
 8000fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd6:	edc7 7a06 	vstr	s15, [r7, #24]
        accZ_g = ((float)Acc[2] - acc_offset[2]) / 16384.0f;
 8000fda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe6:	4b6b      	ldr	r3, [pc, #428]	@ (8001194 <main+0x284>)
 8000fe8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ff0:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001198 <main+0x288>
 8000ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff8:	edc7 7a05 	vstr	s15, [r7, #20]

        /* Apply simple moving average filter */
        accX_buf[filter_index] = accX_g;
 8000ffc:	4b67      	ldr	r3, [pc, #412]	@ (800119c <main+0x28c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a67      	ldr	r2, [pc, #412]	@ (80011a0 <main+0x290>)
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	601a      	str	r2, [r3, #0]
        accY_buf[filter_index] = accY_g;
 800100a:	4b64      	ldr	r3, [pc, #400]	@ (800119c <main+0x28c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a65      	ldr	r2, [pc, #404]	@ (80011a4 <main+0x294>)
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	601a      	str	r2, [r3, #0]
        accZ_buf[filter_index] = accZ_g;
 8001018:	4b60      	ldr	r3, [pc, #384]	@ (800119c <main+0x28c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a62      	ldr	r2, [pc, #392]	@ (80011a8 <main+0x298>)
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]
        filter_index = (filter_index + 1) % FILTER_SIZE;
 8001026:	4b5d      	ldr	r3, [pc, #372]	@ (800119c <main+0x28c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1c59      	adds	r1, r3, #1
 800102c:	4b5f      	ldr	r3, [pc, #380]	@ (80011ac <main+0x29c>)
 800102e:	fb83 2301 	smull	r2, r3, r3, r1
 8001032:	105a      	asrs	r2, r3, #1
 8001034:	17cb      	asrs	r3, r1, #31
 8001036:	1ad2      	subs	r2, r2, r3
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	1aca      	subs	r2, r1, r3
 8001040:	4b56      	ldr	r3, [pc, #344]	@ (800119c <main+0x28c>)
 8001042:	601a      	str	r2, [r3, #0]

        float sumX = 0, sumY = 0, sumZ = 0;
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800104a:	f04f 0300 	mov.w	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int i = 0; i < FILTER_SIZE; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
 800105a:	e026      	b.n	80010aa <main+0x19a>
        {
            sumX += accX_buf[i];
 800105c:	4a50      	ldr	r2, [pc, #320]	@ (80011a0 <main+0x290>)
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            sumY += accY_buf[i];
 8001074:	4a4b      	ldr	r2, [pc, #300]	@ (80011a4 <main+0x294>)
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001088:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            sumZ += accZ_buf[i];
 800108c:	4a46      	ldr	r2, [pc, #280]	@ (80011a8 <main+0x298>)
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        for (int i = 0; i < FILTER_SIZE; i++)
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	3301      	adds	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	ddd5      	ble.n	800105c <main+0x14c>
        }

        accX_g = sumX / FILTER_SIZE;
 80010b0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010b4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80010b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010bc:	edc7 7a07 	vstr	s15, [r7, #28]
        accY_g = sumY / FILTER_SIZE;
 80010c0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80010c4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80010c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010cc:	edc7 7a06 	vstr	s15, [r7, #24]
        accZ_g = sumZ / FILTER_SIZE;
 80010d0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80010d4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80010d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010dc:	edc7 7a05 	vstr	s15, [r7, #20]

        /* Calculate overall acceleration magnitude */
        float magnitude = sqrtf(accX_g*accX_g + accY_g*accY_g + accZ_g*accZ_g);
 80010e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	eeb0 0a67 	vmov.f32	s0, s15
 8001104:	f007 fb42 	bl	800878c <sqrtf>
 8001108:	ed87 0a04 	vstr	s0, [r7, #16]

        /* Motion detection */
        if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, (uint8_t*)Acc, 6, 1000) != HAL_OK)
 800110c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2306      	movs	r3, #6
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	223b      	movs	r2, #59	@ 0x3b
 8001120:	21d0      	movs	r1, #208	@ 0xd0
 8001122:	4818      	ldr	r0, [pc, #96]	@ (8001184 <main+0x274>)
 8001124:	f001 fafe 	bl	8002724 <HAL_I2C_Mem_Read>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <main+0x22a>
         {

             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // 🔴 Turn ON error LED
 800112e:	2201      	movs	r2, #1
 8001130:	2104      	movs	r1, #4
 8001132:	4817      	ldr	r0, [pc, #92]	@ (8001190 <main+0x280>)
 8001134:	f001 f86e 	bl	8002214 <HAL_GPIO_WritePin>
 8001138:	e004      	b.n	8001144 <main+0x234>
             // skip rest of loop
         }
         else
         {
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // 🟢 No error
 800113a:	2200      	movs	r2, #0
 800113c:	2104      	movs	r1, #4
 800113e:	4814      	ldr	r0, [pc, #80]	@ (8001190 <main+0x280>)
 8001140:	f001 f868 	bl	8002214 <HAL_GPIO_WritePin>
         }


        /* Print normalized data */

       printf("%.2f %.2f %.2f \r\n",accX_g, accY_g, accZ_g);
 8001144:	69f8      	ldr	r0, [r7, #28]
 8001146:	f7ff fa07 	bl	8000558 <__aeabi_f2d>
 800114a:	4680      	mov	r8, r0
 800114c:	4689      	mov	r9, r1
 800114e:	69b8      	ldr	r0, [r7, #24]
 8001150:	f7ff fa02 	bl	8000558 <__aeabi_f2d>
 8001154:	4604      	mov	r4, r0
 8001156:	460d      	mov	r5, r1
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff f9fd 	bl	8000558 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001166:	e9cd 4500 	strd	r4, r5, [sp]
 800116a:	4642      	mov	r2, r8
 800116c:	464b      	mov	r3, r9
 800116e:	4810      	ldr	r0, [pc, #64]	@ (80011b0 <main+0x2a0>)
 8001170:	f005 fb32 	bl	80067d8 <iprintf>
//        printf("%.2f\r\n", magnitude);
     // printf("ACC[g]: X=%.2f Y=%.2f Z=%.2f | Magnitude=%.2f\r\n",  accX_g, accY_g, accZ_g, magnitude);

        HAL_Delay(300);
 8001174:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001178:	f000 fd62 	bl	8001c40 <HAL_Delay>
    {
 800117c:	e6fb      	b.n	8000f76 <main+0x66>
 800117e:	bf00      	nop
 8001180:	080087e8 	.word	0x080087e8
 8001184:	200001f0 	.word	0x200001f0
 8001188:	0800880c 	.word	0x0800880c
 800118c:	08008834 	.word	0x08008834
 8001190:	40020000 	.word	0x40020000
 8001194:	2000028c 	.word	0x2000028c
 8001198:	46800000 	.word	0x46800000
 800119c:	200002e0 	.word	0x200002e0
 80011a0:	200002a4 	.word	0x200002a4
 80011a4:	200002b8 	.word	0x200002b8
 80011a8:	200002cc 	.word	0x200002cc
 80011ac:	66666667 	.word	0x66666667
 80011b0:	08008858 	.word	0x08008858

080011b4 <MPU6050_Init>:
}

/* ---------------- MPU6050 Functions ---------------- */

void MPU6050_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af04      	add	r7, sp, #16
    uint8_t data;

    /* Wake up the sensor */
    data = 0x00;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &data, 1, 1000);
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	2301      	movs	r3, #1
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	226b      	movs	r2, #107	@ 0x6b
 80011d0:	21d0      	movs	r1, #208	@ 0xd0
 80011d2:	4815      	ldr	r0, [pc, #84]	@ (8001228 <MPU6050_Init+0x74>)
 80011d4:	f001 f9ac 	bl	8002530 <HAL_I2C_Mem_Write>

    /* Set accelerometer ±2g */
    data = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &data, 1, 1000);
 80011dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2301      	movs	r3, #1
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	221c      	movs	r2, #28
 80011ee:	21d0      	movs	r1, #208	@ 0xd0
 80011f0:	480d      	ldr	r0, [pc, #52]	@ (8001228 <MPU6050_Init+0x74>)
 80011f2:	f001 f99d 	bl	8002530 <HAL_I2C_Mem_Write>

    /* Set gyro ±250°/s */
    data = 0x00;
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &data, 1, 1000);
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	2301      	movs	r3, #1
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	221b      	movs	r2, #27
 800120c:	21d0      	movs	r1, #208	@ 0xd0
 800120e:	4806      	ldr	r0, [pc, #24]	@ (8001228 <MPU6050_Init+0x74>)
 8001210:	f001 f98e 	bl	8002530 <HAL_I2C_Mem_Write>

    HAL_Delay(50);
 8001214:	2032      	movs	r0, #50	@ 0x32
 8001216:	f000 fd13 	bl	8001c40 <HAL_Delay>
    printf("MPU6050 initialized\r\n");
 800121a:	4804      	ldr	r0, [pc, #16]	@ (800122c <MPU6050_Init+0x78>)
 800121c:	f005 fb44 	bl	80068a8 <puts>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200001f0 	.word	0x200001f0
 800122c:	0800886c 	.word	0x0800886c

08001230 <MPU6050_Read_Accel_Gyro>:

void MPU6050_Read_Accel_Gyro(int16_t *Acc, int16_t *Gyro)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af04      	add	r7, sp, #16
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
    uint8_t buf[14];
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, buf, 14, 1000) != HAL_OK)
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	230e      	movs	r3, #14
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	223b      	movs	r2, #59	@ 0x3b
 800124e:	21d0      	movs	r1, #208	@ 0xd0
 8001250:	4826      	ldr	r0, [pc, #152]	@ (80012ec <MPU6050_Read_Accel_Gyro+0xbc>)
 8001252:	f001 fa67 	bl	8002724 <HAL_I2C_Mem_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <MPU6050_Read_Accel_Gyro+0x34>
    {
        printf("I2C read error\r\n");
 800125c:	4824      	ldr	r0, [pc, #144]	@ (80012f0 <MPU6050_Read_Accel_Gyro+0xc0>)
 800125e:	f005 fb23 	bl	80068a8 <puts>
 8001262:	e03f      	b.n	80012e4 <MPU6050_Read_Accel_Gyro+0xb4>
        return;
    }

    Acc[0] = (int16_t)((buf[0] << 8) | buf[1]);
 8001264:	7a3b      	ldrb	r3, [r7, #8]
 8001266:	b21b      	sxth	r3, r3
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21a      	sxth	r2, r3
 800126c:	7a7b      	ldrb	r3, [r7, #9]
 800126e:	b21b      	sxth	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b21a      	sxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	801a      	strh	r2, [r3, #0]
    Acc[1] = (int16_t)((buf[2] << 8) | buf[3]);
 8001278:	7abb      	ldrb	r3, [r7, #10]
 800127a:	b21b      	sxth	r3, r3
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b219      	sxth	r1, r3
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	b21a      	sxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3302      	adds	r3, #2
 8001288:	430a      	orrs	r2, r1
 800128a:	b212      	sxth	r2, r2
 800128c:	801a      	strh	r2, [r3, #0]
    Acc[2] = (int16_t)((buf[4] << 8) | buf[5]);
 800128e:	7b3b      	ldrb	r3, [r7, #12]
 8001290:	b21b      	sxth	r3, r3
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	b219      	sxth	r1, r3
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	b21a      	sxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3304      	adds	r3, #4
 800129e:	430a      	orrs	r2, r1
 80012a0:	b212      	sxth	r2, r2
 80012a2:	801a      	strh	r2, [r3, #0]
    Gyro[0] = (int16_t)((buf[8] << 8) | buf[9]);
 80012a4:	7c3b      	ldrb	r3, [r7, #16]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	7c7b      	ldrb	r3, [r7, #17]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	801a      	strh	r2, [r3, #0]
    Gyro[1] = (int16_t)((buf[10] << 8) | buf[11]);
 80012b8:	7cbb      	ldrb	r3, [r7, #18]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b219      	sxth	r1, r3
 80012c0:	7cfb      	ldrb	r3, [r7, #19]
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	3302      	adds	r3, #2
 80012c8:	430a      	orrs	r2, r1
 80012ca:	b212      	sxth	r2, r2
 80012cc:	801a      	strh	r2, [r3, #0]
    Gyro[2] = (int16_t)((buf[12] << 8) | buf[13]);
 80012ce:	7d3b      	ldrb	r3, [r7, #20]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b219      	sxth	r1, r3
 80012d6:	7d7b      	ldrb	r3, [r7, #21]
 80012d8:	b21a      	sxth	r2, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	3304      	adds	r3, #4
 80012de:	430a      	orrs	r2, r1
 80012e0:	b212      	sxth	r2, r2
 80012e2:	801a      	strh	r2, [r3, #0]
}
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001f0 	.word	0x200001f0
 80012f0:	08008884 	.word	0x08008884

080012f4 <MPU6050_Calibrate>:

void MPU6050_Calibrate(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	@ 0x30
 80012f8:	af00      	add	r7, sp, #0
    int16_t Acc[3], Gyro[3];
    float acc_sum[3] = {0}, gyro_sum[3] = {0};
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	463b      	mov	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]

    printf("Calibrating MPU6050...\r\n");
 8001310:	4848      	ldr	r0, [pc, #288]	@ (8001434 <MPU6050_Calibrate+0x140>)
 8001312:	f005 fac9 	bl	80068a8 <puts>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800131a:	e055      	b.n	80013c8 <MPU6050_Calibrate+0xd4>
    {
        MPU6050_Read_Accel_Gyro(Acc, Gyro);
 800131c:	f107 0218 	add.w	r2, r7, #24
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff82 	bl	8001230 <MPU6050_Read_Accel_Gyro>
        acc_sum[0] += Acc[0];
 800132c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001330:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001340:	edc7 7a03 	vstr	s15, [r7, #12]
        acc_sum[1] += Acc[1];
 8001344:	ed97 7a04 	vldr	s14, [r7, #16]
 8001348:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	edc7 7a04 	vstr	s15, [r7, #16]
        acc_sum[2] += Acc[2];
 800135c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001360:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	edc7 7a05 	vstr	s15, [r7, #20]
        gyro_sum[0] += Gyro[0];
 8001374:	ed97 7a00 	vldr	s14, [r7]
 8001378:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001388:	edc7 7a00 	vstr	s15, [r7]
        gyro_sum[1] += Gyro[1];
 800138c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001390:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	edc7 7a01 	vstr	s15, [r7, #4]
        gyro_sum[2] += Gyro[2];
 80013a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80013a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a02 	vstr	s15, [r7, #8]
        HAL_Delay(10);
 80013bc:	200a      	movs	r0, #10
 80013be:	f000 fc3f 	bl	8001c40 <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++)
 80013c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c4:	3301      	adds	r3, #1
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ca:	2b63      	cmp	r3, #99	@ 0x63
 80013cc:	dda6      	ble.n	800131c <MPU6050_Calibrate+0x28>
    }

    for (int i = 0; i < 3; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013d2:	e024      	b.n	800141e <MPU6050_Calibrate+0x12a>
    {
        acc_offset[i] = acc_sum[i] / CALIBRATION_SAMPLES;
 80013d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	3330      	adds	r3, #48	@ 0x30
 80013da:	443b      	add	r3, r7
 80013dc:	3b24      	subs	r3, #36	@ 0x24
 80013de:	ed93 7a00 	vldr	s14, [r3]
 80013e2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001438 <MPU6050_Calibrate+0x144>
 80013e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ea:	4a14      	ldr	r2, [pc, #80]	@ (800143c <MPU6050_Calibrate+0x148>)
 80013ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	edc3 7a00 	vstr	s15, [r3]
        gyro_offset[i] = gyro_sum[i] / CALIBRATION_SAMPLES;
 80013f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	3330      	adds	r3, #48	@ 0x30
 80013fc:	443b      	add	r3, r7
 80013fe:	3b30      	subs	r3, #48	@ 0x30
 8001400:	ed93 7a00 	vldr	s14, [r3]
 8001404:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001438 <MPU6050_Calibrate+0x144>
 8001408:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140c:	4a0c      	ldr	r2, [pc, #48]	@ (8001440 <MPU6050_Calibrate+0x14c>)
 800140e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800141a:	3301      	adds	r3, #1
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800141e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001420:	2b02      	cmp	r3, #2
 8001422:	ddd7      	ble.n	80013d4 <MPU6050_Calibrate+0xe0>
    }

    printf("Calibration done.\r\n");
 8001424:	4807      	ldr	r0, [pc, #28]	@ (8001444 <MPU6050_Calibrate+0x150>)
 8001426:	f005 fa3f 	bl	80068a8 <puts>
}
 800142a:	bf00      	nop
 800142c:	3730      	adds	r7, #48	@ 0x30
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	08008894 	.word	0x08008894
 8001438:	42c80000 	.word	0x42c80000
 800143c:	2000028c 	.word	0x2000028c
 8001440:	20000298 	.word	0x20000298
 8001444:	080088ac 	.word	0x080088ac

08001448 <MX_I2C1_Init>:

/* ---------------- Peripheral Init ---------------- */

static void MX_I2C1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <MX_I2C1_Init+0xc0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a28      	ldr	r2, [pc, #160]	@ (8001508 <MX_I2C1_Init+0xc0>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <MX_I2C1_Init+0xc0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800147a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800147e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001480:	2312      	movs	r3, #18
 8001482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001484:	2301      	movs	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800148c:	2304      	movs	r3, #4
 800148e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	481d      	ldr	r0, [pc, #116]	@ (800150c <MX_I2C1_Init+0xc4>)
 8001498:	f000 fd38 	bl	8001f0c <HAL_GPIO_Init>

    __HAL_RCC_I2C1_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_I2C1_Init+0xc0>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	4a18      	ldr	r2, [pc, #96]	@ (8001508 <MX_I2C1_Init+0xc0>)
 80014a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <MX_I2C1_Init+0xc0>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

    hi2c1.Instance = I2C1;
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014ba:	4a16      	ldr	r2, [pc, #88]	@ (8001514 <MX_I2C1_Init+0xcc>)
 80014bc:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014c0:	4a15      	ldr	r2, [pc, #84]	@ (8001518 <MX_I2C1_Init+0xd0>)
 80014c2:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014d6:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c1) != HAL_OK) Error_Handler();
 80014f0:	4807      	ldr	r0, [pc, #28]	@ (8001510 <MX_I2C1_Init+0xc8>)
 80014f2:	f000 fec3 	bl	800227c <HAL_I2C_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_I2C1_Init+0xb8>
 80014fc:	f000 f910 	bl	8001720 <Error_Handler>
}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40020400 	.word	0x40020400
 8001510:	200001f0 	.word	0x200001f0
 8001514:	40005400 	.word	0x40005400
 8001518:	000186a0 	.word	0x000186a0

0800151c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <MX_USART2_UART_Init+0xb8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a26      	ldr	r2, [pc, #152]	@ (80015d4 <MX_USART2_UART_Init+0xb8>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <MX_USART2_UART_Init+0xb8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]

    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800154e:	230c      	movs	r3, #12
 8001550:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4619      	mov	r1, r3
 8001568:	481b      	ldr	r0, [pc, #108]	@ (80015d8 <MX_USART2_UART_Init+0xbc>)
 800156a:	f000 fccf 	bl	8001f0c <HAL_GPIO_Init>

    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <MX_USART2_UART_Init+0xb8>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	4a17      	ldr	r2, [pc, #92]	@ (80015d4 <MX_USART2_UART_Init+0xb8>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157c:	6413      	str	r3, [r2, #64]	@ 0x40
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <MX_USART2_UART_Init+0xb8>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

    huart2.Instance = USART2;
 800158a:	4b14      	ldr	r3, [pc, #80]	@ (80015dc <MX_USART2_UART_Init+0xc0>)
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <MX_USART2_UART_Init+0xc4>)
 800158e:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_USART2_UART_Init+0xc0>)
 8001592:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001596:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001598:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <MX_USART2_UART_Init+0xc0>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_USART2_UART_Init+0xc0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <MX_USART2_UART_Init+0xc0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_USART2_UART_Init+0xc0>)
 80015ac:	220c      	movs	r2, #12
 80015ae:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_USART2_UART_Init+0xc0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_USART2_UART_Init+0xc0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 80015bc:	4807      	ldr	r0, [pc, #28]	@ (80015dc <MX_USART2_UART_Init+0xc0>)
 80015be:	f003 ffe7 	bl	8005590 <HAL_UART_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_USART2_UART_Init+0xb0>
 80015c8:	f000 f8aa 	bl	8001720 <Error_Handler>
}
 80015cc:	bf00      	nop
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	20000244 	.word	0x20000244
 80015e0:	40004400 	.word	0x40004400

080015e4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <MX_GPIO_Init+0x5c>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001600:	4a0f      	ldr	r2, [pc, #60]	@ (8001640 <MX_GPIO_Init+0x5c>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6313      	str	r3, [r2, #48]	@ 0x30
 8001608:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <MX_GPIO_Init+0x5c>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8001614:	2307      	movs	r3, #7
 8001616:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <MX_GPIO_Init+0x60>)
 800162a:	f000 fc6f 	bl	8001f0c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	2107      	movs	r1, #7
 8001632:	4804      	ldr	r0, [pc, #16]	@ (8001644 <MX_GPIO_Init+0x60>)
 8001634:	f000 fdee 	bl	8002214 <HAL_GPIO_WritePin>
}
 8001638:	bf00      	nop
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000

08001648 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	@ 0x50
 800164c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	2230      	movs	r2, #48	@ 0x30
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 fa06 	bl	8006a68 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <SystemClock_Config+0xd0>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	4a28      	ldr	r2, [pc, #160]	@ (8001718 <SystemClock_Config+0xd0>)
 8001676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	@ 0x40
 800167c:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <SystemClock_Config+0xd0>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	4b23      	ldr	r3, [pc, #140]	@ (800171c <SystemClock_Config+0xd4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001694:	4a21      	ldr	r2, [pc, #132]	@ (800171c <SystemClock_Config+0xd4>)
 8001696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <SystemClock_Config+0xd4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a8:	2302      	movs	r3, #2
 80016aa:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b0:	2310      	movs	r3, #16
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b4:	2302      	movs	r3, #2
 80016b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 80016bc:	2310      	movs	r3, #16
 80016be:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 80016c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016c4:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016c6:	2304      	movs	r3, #4
 80016c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ca:	2307      	movs	r3, #7
 80016cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fb04 	bl	8004ce0 <HAL_RCC_OscConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x9a>
 80016de:	f000 f81f 	bl	8001720 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80016e2:	230f      	movs	r3, #15
 80016e4:	60fb      	str	r3, [r7, #12]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e6:	2302      	movs	r3, #2
 80016e8:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) Error_Handler();
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2102      	movs	r1, #2
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fd66 	bl	80051d0 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xc6>
 800170a:	f000 f809 	bl	8001720 <Error_Handler>
}
 800170e:	bf00      	nop
 8001710:	3750      	adds	r7, #80	@ 0x50
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000

08001720 <Error_Handler>:

void Error_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
    __disable_irq();
    while (1)
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001728:	2101      	movs	r1, #1
 800172a:	4804      	ldr	r0, [pc, #16]	@ (800173c <Error_Handler+0x1c>)
 800172c:	f000 fd8b 	bl	8002246 <HAL_GPIO_TogglePin>
        HAL_Delay(200);
 8001730:	20c8      	movs	r0, #200	@ 0xc8
 8001732:	f000 fa85 	bl	8001c40 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001736:	bf00      	nop
 8001738:	e7f6      	b.n	8001728 <Error_Handler+0x8>
 800173a:	bf00      	nop
 800173c:	40020000 	.word	0x40020000

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <HAL_I2C_MspInit+0xa4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d13c      	bne.n	800182c <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_I2C_MspInit+0xa8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001838 <HAL_I2C_MspInit+0xa8>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <HAL_I2C_MspInit+0xa8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d4:	2312      	movs	r3, #18
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e0:	2304      	movs	r3, #4
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4814      	ldr	r0, [pc, #80]	@ (800183c <HAL_I2C_MspInit+0xac>)
 80017ec:	f000 fb8e 	bl	8001f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <HAL_I2C_MspInit+0xa8>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001838 <HAL_I2C_MspInit+0xa8>)
 80017fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001800:	4b0d      	ldr	r3, [pc, #52]	@ (8001838 <HAL_I2C_MspInit+0xa8>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	201f      	movs	r0, #31
 8001812:	f000 fb14 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001816:	201f      	movs	r0, #31
 8001818:	f000 fb2d 	bl	8001e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2020      	movs	r0, #32
 8001822:	f000 fb0c 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001826:	2020      	movs	r0, #32
 8001828:	f000 fb25 	bl	8001e76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	@ 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40005400 	.word	0x40005400
 8001838:	40023800 	.word	0x40023800
 800183c:	40020400 	.word	0x40020400

08001840 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	@ (80018c4 <HAL_UART_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12c      	bne.n	80018bc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <HAL_UART_MspInit+0x88>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	4a17      	ldr	r2, [pc, #92]	@ (80018c8 <HAL_UART_MspInit+0x88>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	6453      	str	r3, [r2, #68]	@ 0x44
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <HAL_UART_MspInit+0x88>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_UART_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a10      	ldr	r2, [pc, #64]	@ (80018c8 <HAL_UART_MspInit+0x88>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_UART_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800189a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ac:	2307      	movs	r3, #7
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	@ (80018cc <HAL_UART_MspInit+0x8c>)
 80018b8:	f000 fb28 	bl	8001f0c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	@ 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40011000 	.word	0x40011000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <NMI_Handler+0x4>

080018d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <MemManage_Handler+0x4>

080018e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001926:	f000 f96b 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <I2C1_EV_IRQHandler+0x10>)
 8001936:	f001 f927 	bl	8002b88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200001f0 	.word	0x200001f0

08001944 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <I2C1_ER_IRQHandler+0x10>)
 800194a:	f001 fa8e 	bl	8002e6a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200001f0 	.word	0x200001f0

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001972:	f005 f8cb 	bl	8006b0c <__errno>
 8001976:	4603      	mov	r3, r0
 8001978:	2216      	movs	r2, #22
 800197a:	601a      	str	r2, [r3, #0]
  return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_exit>:

void _exit (int status)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffe7 	bl	8001968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800199a:	bf00      	nop
 800199c:	e7fd      	b.n	800199a <_exit+0x12>

0800199e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e00a      	b.n	80019c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b0:	f3af 8000 	nop.w
 80019b4:	4601      	mov	r1, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	60ba      	str	r2, [r7, #8]
 80019bc:	b2ca      	uxtb	r2, r1
 80019be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3301      	adds	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbf0      	blt.n	80019b0 <_read+0x12>
  }

  return len;
 80019ce:	687b      	ldr	r3, [r7, #4]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e009      	b.n	80019fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	60ba      	str	r2, [r7, #8]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fa76 	bl	8000ee4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbf1      	blt.n	80019ea <_write+0x12>
  }
  return len;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_close>:

int _close(int file)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a38:	605a      	str	r2, [r3, #4]
  return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_isatty>:

int _isatty(int file)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a50:	2301      	movs	r3, #1
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b085      	sub	sp, #20
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	@ (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	@ (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f005 f830 	bl	8006b0c <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20018000 	.word	0x20018000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	200002e4 	.word	0x200002e4
 8001ae0:	20000438 	.word	0x20000438

08001ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	@ (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b0c:	f7ff ffea 	bl	8001ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f004 ffef 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff f9e9 	bl	8000f10 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b4c:	08008c5c 	.word	0x08008c5c
  ldr r2, =_sbss
 8001b50:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b54:	20000438 	.word	0x20000438

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f94f 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fdd6 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f967 	bl	8001e92 <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f000 f92f 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000008 	.word	0x20000008
 8001c24:	200002e8 	.word	0x200002e8

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200002e8 	.word	0x200002e8

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff ffee 	bl	8001c28 <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_Delay+0x44>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000008 	.word	0x20000008

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	@ (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	@ (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	@ (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff29 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff3e 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff31 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa2 	bl	8001de4 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2280      	movs	r2, #128	@ 0x80
 8001ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e00c      	b.n	8001ee2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2205      	movs	r2, #5
 8001ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001efc:	b2db      	uxtb	r3, r3
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	e159      	b.n	80021dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 8148 	bne.w	80021d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d005      	beq.n	8001f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d130      	bne.n	8001fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d017      	beq.n	8001ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d123      	bne.n	8002050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a2 	beq.w	80021d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b57      	ldr	r3, [pc, #348]	@ (80021f4 <HAL_GPIO_Init+0x2e8>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a56      	ldr	r2, [pc, #344]	@ (80021f4 <HAL_GPIO_Init+0x2e8>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b54      	ldr	r3, [pc, #336]	@ (80021f4 <HAL_GPIO_Init+0x2e8>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ae:	4a52      	ldr	r2, [pc, #328]	@ (80021f8 <HAL_GPIO_Init+0x2ec>)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a49      	ldr	r2, [pc, #292]	@ (80021fc <HAL_GPIO_Init+0x2f0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d019      	beq.n	800210e <HAL_GPIO_Init+0x202>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a48      	ldr	r2, [pc, #288]	@ (8002200 <HAL_GPIO_Init+0x2f4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_GPIO_Init+0x1fe>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a47      	ldr	r2, [pc, #284]	@ (8002204 <HAL_GPIO_Init+0x2f8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00d      	beq.n	8002106 <HAL_GPIO_Init+0x1fa>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a46      	ldr	r2, [pc, #280]	@ (8002208 <HAL_GPIO_Init+0x2fc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <HAL_GPIO_Init+0x1f6>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a45      	ldr	r2, [pc, #276]	@ (800220c <HAL_GPIO_Init+0x300>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_GPIO_Init+0x1f2>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e008      	b.n	8002110 <HAL_GPIO_Init+0x204>
 80020fe:	2307      	movs	r3, #7
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x204>
 8002102:	2303      	movs	r3, #3
 8002104:	e004      	b.n	8002110 <HAL_GPIO_Init+0x204>
 8002106:	2302      	movs	r3, #2
 8002108:	e002      	b.n	8002110 <HAL_GPIO_Init+0x204>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_GPIO_Init+0x204>
 800210e:	2300      	movs	r3, #0
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	f002 0203 	and.w	r2, r2, #3
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	4093      	lsls	r3, r2
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002120:	4935      	ldr	r1, [pc, #212]	@ (80021f8 <HAL_GPIO_Init+0x2ec>)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212e:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <HAL_GPIO_Init+0x304>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002152:	4a2f      	ldr	r2, [pc, #188]	@ (8002210 <HAL_GPIO_Init+0x304>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002158:	4b2d      	ldr	r3, [pc, #180]	@ (8002210 <HAL_GPIO_Init+0x304>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800217c:	4a24      	ldr	r2, [pc, #144]	@ (8002210 <HAL_GPIO_Init+0x304>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002182:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <HAL_GPIO_Init+0x304>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002210 <HAL_GPIO_Init+0x304>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <HAL_GPIO_Init+0x304>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002210 <HAL_GPIO_Init+0x304>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	f67f aea2 	bls.w	8001f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3724      	adds	r7, #36	@ 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021000 	.word	0x40021000
 8002210:	40013c00 	.word	0x40013c00

08002214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
 8002220:	4613      	mov	r3, r2
 8002222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002224:	787b      	ldrb	r3, [r7, #1]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002230:	e003      	b.n	800223a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	041a      	lsls	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002258:	887a      	ldrh	r2, [r7, #2]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	041a      	lsls	r2, r3, #16
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43d9      	mvns	r1, r3
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	400b      	ands	r3, r1
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	619a      	str	r2, [r3, #24]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e12b      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fa74 	bl	8001790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	@ 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e0:	f003 f92e 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 80022e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a81      	ldr	r2, [pc, #516]	@ (80024f0 <HAL_I2C_Init+0x274>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d807      	bhi.n	8002300 <HAL_I2C_Init+0x84>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a80      	ldr	r2, [pc, #512]	@ (80024f4 <HAL_I2C_Init+0x278>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e006      	b.n	800230e <HAL_I2C_Init+0x92>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a7d      	ldr	r2, [pc, #500]	@ (80024f8 <HAL_I2C_Init+0x27c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e7      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a78      	ldr	r2, [pc, #480]	@ (80024fc <HAL_I2C_Init+0x280>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a6a      	ldr	r2, [pc, #424]	@ (80024f0 <HAL_I2C_Init+0x274>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d802      	bhi.n	8002350 <HAL_I2C_Init+0xd4>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	e009      	b.n	8002364 <HAL_I2C_Init+0xe8>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a69      	ldr	r2, [pc, #420]	@ (8002500 <HAL_I2C_Init+0x284>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	3301      	adds	r3, #1
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002376:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	495c      	ldr	r1, [pc, #368]	@ (80024f0 <HAL_I2C_Init+0x274>)
 8002380:	428b      	cmp	r3, r1
 8002382:	d819      	bhi.n	80023b8 <HAL_I2C_Init+0x13c>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e59      	subs	r1, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002398:	400b      	ands	r3, r1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_I2C_Init+0x138>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e59      	subs	r1, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	e051      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e04f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <HAL_I2C_Init+0x168>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	440b      	add	r3, r1
 80023ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e012      	b.n	800240a <HAL_I2C_Init+0x18e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	0099      	lsls	r1, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x196>
 800240e:	2301      	movs	r3, #1
 8002410:	e022      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10e      	bne.n	8002438 <HAL_I2C_Init+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e58      	subs	r0, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	440b      	add	r3, r1
 8002428:	fbb0 f3f3 	udiv	r3, r0, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002436:	e00f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	0099      	lsls	r1, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	6809      	ldr	r1, [r1, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002486:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6911      	ldr	r1, [r2, #16]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	000186a0 	.word	0x000186a0
 80024f4:	001e847f 	.word	0x001e847f
 80024f8:	003d08ff 	.word	0x003d08ff
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002516:	2b80      	cmp	r3, #128	@ 0x80
 8002518:	d103      	bne.n	8002522 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	4608      	mov	r0, r1
 800253a:	4611      	mov	r1, r2
 800253c:	461a      	mov	r2, r3
 800253e:	4603      	mov	r3, r0
 8002540:	817b      	strh	r3, [r7, #10]
 8002542:	460b      	mov	r3, r1
 8002544:	813b      	strh	r3, [r7, #8]
 8002546:	4613      	mov	r3, r2
 8002548:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800254a:	f7ff fb6d 	bl	8001c28 <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b20      	cmp	r3, #32
 800255a:	f040 80d9 	bne.w	8002710 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2319      	movs	r3, #25
 8002564:	2201      	movs	r2, #1
 8002566:	496d      	ldr	r1, [pc, #436]	@ (800271c <HAL_I2C_Mem_Write+0x1ec>)
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f002 f935 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
 8002576:	e0cc      	b.n	8002712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_I2C_Mem_Write+0x56>
 8002582:	2302      	movs	r3, #2
 8002584:	e0c5      	b.n	8002712 <HAL_I2C_Mem_Write+0x1e2>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d007      	beq.n	80025ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2221      	movs	r2, #33	@ 0x21
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2240      	movs	r2, #64	@ 0x40
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a3a      	ldr	r2, [r7, #32]
 80025d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002720 <HAL_I2C_Mem_Write+0x1f0>)
 80025ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ee:	88f8      	ldrh	r0, [r7, #6]
 80025f0:	893a      	ldrh	r2, [r7, #8]
 80025f2:	8979      	ldrh	r1, [r7, #10]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	4603      	mov	r3, r0
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f001 fec4 	bl	800438c <I2C_RequestMemoryWrite>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d052      	beq.n	80026b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e081      	b.n	8002712 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f002 f9fa 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	2b04      	cmp	r3, #4
 8002624:	d107      	bne.n	8002636 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06b      	b.n	8002712 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d11b      	bne.n	80026b0 <HAL_I2C_Mem_Write+0x180>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d017      	beq.n	80026b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1aa      	bne.n	800260e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f002 f9ed 	bl	8004a9c <I2C_WaitOnBTFFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00d      	beq.n	80026e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d107      	bne.n	80026e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e016      	b.n	8002712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	e000      	b.n	8002712 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002710:	2302      	movs	r3, #2
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	00100002 	.word	0x00100002
 8002720:	ffff0000 	.word	0xffff0000

08002724 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	@ 0x30
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	4608      	mov	r0, r1
 800272e:	4611      	mov	r1, r2
 8002730:	461a      	mov	r2, r3
 8002732:	4603      	mov	r3, r0
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	460b      	mov	r3, r1
 8002738:	813b      	strh	r3, [r7, #8]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800273e:	f7ff fa73 	bl	8001c28 <HAL_GetTick>
 8002742:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	f040 8214 	bne.w	8002b7a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2319      	movs	r3, #25
 8002758:	2201      	movs	r2, #1
 800275a:	497b      	ldr	r1, [pc, #492]	@ (8002948 <HAL_I2C_Mem_Read+0x224>)
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f002 f83b 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
 800276a:	e207      	b.n	8002b7c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_I2C_Mem_Read+0x56>
 8002776:	2302      	movs	r3, #2
 8002778:	e200      	b.n	8002b7c <HAL_I2C_Mem_Read+0x458>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d007      	beq.n	80027a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2222      	movs	r2, #34	@ 0x22
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2240      	movs	r2, #64	@ 0x40
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80027d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a5b      	ldr	r2, [pc, #364]	@ (800294c <HAL_I2C_Mem_Read+0x228>)
 80027e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027e2:	88f8      	ldrh	r0, [r7, #6]
 80027e4:	893a      	ldrh	r2, [r7, #8]
 80027e6:	8979      	ldrh	r1, [r7, #10]
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	4603      	mov	r3, r0
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f001 fe60 	bl	80044b8 <I2C_RequestMemoryRead>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e1bc      	b.n	8002b7c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002806:	2b00      	cmp	r3, #0
 8002808:	d113      	bne.n	8002832 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	623b      	str	r3, [r7, #32]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	623b      	str	r3, [r7, #32]
 800281e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e190      	b.n	8002b54 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	2b01      	cmp	r3, #1
 8002838:	d11b      	bne.n	8002872 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e170      	b.n	8002b54 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002876:	2b02      	cmp	r3, #2
 8002878:	d11b      	bne.n	80028b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002888:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	e150      	b.n	8002b54 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028c8:	e144      	b.n	8002b54 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	f200 80f1 	bhi.w	8002ab6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d123      	bne.n	8002924 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f002 f955 	bl	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e145      	b.n	8002b7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002922:	e117      	b.n	8002b54 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002928:	2b02      	cmp	r3, #2
 800292a:	d14e      	bne.n	80029ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002932:	2200      	movs	r2, #0
 8002934:	4906      	ldr	r1, [pc, #24]	@ (8002950 <HAL_I2C_Mem_Read+0x22c>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f001 ff4e 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e11a      	b.n	8002b7c <HAL_I2C_Mem_Read+0x458>
 8002946:	bf00      	nop
 8002948:	00100002 	.word	0x00100002
 800294c:	ffff0000 	.word	0xffff0000
 8002950:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029c8:	e0c4      	b.n	8002b54 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d0:	2200      	movs	r2, #0
 80029d2:	496c      	ldr	r1, [pc, #432]	@ (8002b84 <HAL_I2C_Mem_Read+0x460>)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f001 feff 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0cb      	b.n	8002b7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	4955      	ldr	r1, [pc, #340]	@ (8002b84 <HAL_I2C_Mem_Read+0x460>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f001 fed1 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e09d      	b.n	8002b7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ab4:	e04e      	b.n	8002b54 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f002 f868 	bl	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e058      	b.n	8002b7c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d124      	bne.n	8002b54 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b20:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f aeb6 	bne.w	80028ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e000      	b.n	8002b7c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
  }
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	@ 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	00010004 	.word	0x00010004

08002b88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ba8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d003      	beq.n	8002bc0 <HAL_I2C_EV_IRQHandler+0x38>
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b40      	cmp	r3, #64	@ 0x40
 8002bbc:	f040 80c1 	bne.w	8002d42 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002be0:	d003      	beq.n	8002bea <HAL_I2C_EV_IRQHandler+0x62>
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002be8:	d101      	bne.n	8002bee <HAL_I2C_EV_IRQHandler+0x66>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_I2C_EV_IRQHandler+0x68>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f000 8132 	beq.w	8002e5a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x92>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	0a5b      	lsrs	r3, r3, #9
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f002 f84b 	bl	8004ca8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fd9b 	bl	800374e <I2C_Master_SB>
 8002c18:	e092      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	08db      	lsrs	r3, r3, #3
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_I2C_EV_IRQHandler+0xb2>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	0a5b      	lsrs	r3, r3, #9
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fe11 	bl	800385a <I2C_Master_ADD10>
 8002c38:	e082      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <HAL_I2C_EV_IRQHandler+0xd2>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	0a5b      	lsrs	r3, r3, #9
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fe2b 	bl	80038ae <I2C_Master_ADDR>
 8002c58:	e072      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03b      	beq.n	8002cde <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c74:	f000 80f3 	beq.w	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	09db      	lsrs	r3, r3, #7
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00f      	beq.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	0a9b      	lsrs	r3, r3, #10
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d009      	beq.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d103      	bne.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f9f3 	bl	8003088 <I2C_MasterTransmit_TXE>
 8002ca2:	e04d      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80d6 	beq.w	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	0a5b      	lsrs	r3, r3, #9
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80cf 	beq.w	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cc0:	7bbb      	ldrb	r3, [r7, #14]
 8002cc2:	2b21      	cmp	r3, #33	@ 0x21
 8002cc4:	d103      	bne.n	8002cce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa7a 	bl	80031c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ccc:	e0c7      	b.n	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b40      	cmp	r3, #64	@ 0x40
 8002cd2:	f040 80c4 	bne.w	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fae8 	bl	80032ac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cdc:	e0bf      	b.n	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cec:	f000 80b7 	beq.w	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00f      	beq.n	8002d1c <HAL_I2C_EV_IRQHandler+0x194>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <HAL_I2C_EV_IRQHandler+0x194>
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fb61 	bl	80033dc <I2C_MasterReceive_RXNE>
 8002d1a:	e011      	b.n	8002d40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 809a 	beq.w	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	0a5b      	lsrs	r3, r3, #9
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8093 	beq.w	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fc17 	bl	800356c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3e:	e08e      	b.n	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002d40:	e08d      	b.n	8002e5e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e007      	b.n	8002d64 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d012      	beq.n	8002d96 <HAL_I2C_EV_IRQHandler+0x20e>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	0a5b      	lsrs	r3, r3, #9
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00c      	beq.n	8002d96 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002d8c:	69b9      	ldr	r1, [r7, #24]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 ffdc 	bl	8003d4c <I2C_Slave_ADDR>
 8002d94:	e066      	b.n	8002e64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_I2C_EV_IRQHandler+0x22e>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	0a5b      	lsrs	r3, r3, #9
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f001 f816 	bl	8003de0 <I2C_Slave_STOPF>
 8002db4:	e056      	b.n	8002e64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002db6:	7bbb      	ldrb	r3, [r7, #14]
 8002db8:	2b21      	cmp	r3, #33	@ 0x21
 8002dba:	d002      	beq.n	8002dc2 <HAL_I2C_EV_IRQHandler+0x23a>
 8002dbc:	7bbb      	ldrb	r3, [r7, #14]
 8002dbe:	2b29      	cmp	r3, #41	@ 0x29
 8002dc0:	d125      	bne.n	8002e0e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	09db      	lsrs	r3, r3, #7
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00f      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0x266>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	0a9b      	lsrs	r3, r3, #10
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0x266>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fef2 	bl	8003bd0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dec:	e039      	b.n	8002e62 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d033      	beq.n	8002e62 <HAL_I2C_EV_IRQHandler+0x2da>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	0a5b      	lsrs	r3, r3, #9
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02d      	beq.n	8002e62 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 ff1f 	bl	8003c4a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e0c:	e029      	b.n	8002e62 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00f      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	0a9b      	lsrs	r3, r3, #10
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 ff2a 	bl	8003c8c <I2C_SlaveReceive_RXNE>
 8002e38:	e014      	b.n	8002e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00e      	beq.n	8002e64 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 ff58 	bl	8003d08 <I2C_SlaveReceive_BTF>
 8002e58:	e004      	b.n	8002e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e62:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b08a      	sub	sp, #40	@ 0x28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e8c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <HAL_I2C_ER_IRQHandler+0x4e>
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002eb6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	0a5b      	lsrs	r3, r3, #9
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_I2C_ER_IRQHandler+0x78>
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	f043 0302 	orr.w	r3, r3, #2
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002ee0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	0a9b      	lsrs	r3, r3, #10
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d03f      	beq.n	8002f6e <HAL_I2C_ER_IRQHandler+0x104>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d039      	beq.n	8002f6e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002efa:	7efb      	ldrb	r3, [r7, #27]
 8002efc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f14:	7ebb      	ldrb	r3, [r7, #26]
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d112      	bne.n	8002f40 <HAL_I2C_ER_IRQHandler+0xd6>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10f      	bne.n	8002f40 <HAL_I2C_ER_IRQHandler+0xd6>
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b21      	cmp	r3, #33	@ 0x21
 8002f24:	d008      	beq.n	8002f38 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	2b29      	cmp	r3, #41	@ 0x29
 8002f2a:	d005      	beq.n	8002f38 <HAL_I2C_ER_IRQHandler+0xce>
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	2b28      	cmp	r3, #40	@ 0x28
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b21      	cmp	r3, #33	@ 0x21
 8002f36:	d103      	bne.n	8002f40 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 f881 	bl	8004040 <I2C_Slave_AF>
 8002f3e:	e016      	b.n	8002f6e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f48:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f52:	7efb      	ldrb	r3, [r7, #27]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d002      	beq.n	8002f5e <HAL_I2C_ER_IRQHandler+0xf4>
 8002f58:	7efb      	ldrb	r3, [r7, #27]
 8002f5a:	2b40      	cmp	r3, #64	@ 0x40
 8002f5c:	d107      	bne.n	8002f6e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	0adb      	lsrs	r3, r3, #11
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <HAL_I2C_ER_IRQHandler+0x12e>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	f043 0308 	orr.w	r3, r3, #8
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002f96:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f001 f8bc 	bl	8004128 <I2C_ITError>
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3728      	adds	r7, #40	@ 0x28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
 8003014:	4613      	mov	r3, r2
 8003016:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003096:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800309e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d150      	bne.n	8003150 <I2C_MasterTransmit_TXE+0xc8>
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	2b21      	cmp	r3, #33	@ 0x21
 80030b2:	d14d      	bne.n	8003150 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d01d      	beq.n	80030f6 <I2C_MasterTransmit_TXE+0x6e>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d01a      	beq.n	80030f6 <I2C_MasterTransmit_TXE+0x6e>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030c6:	d016      	beq.n	80030f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2211      	movs	r2, #17
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ff62 	bl	8002fb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030f4:	e060      	b.n	80031b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003104:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003114:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b40      	cmp	r3, #64	@ 0x40
 800312e:	d107      	bne.n	8003140 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff7d 	bl	8003038 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800313e:	e03b      	b.n	80031b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff35 	bl	8002fb8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800314e:	e033      	b.n	80031b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b21      	cmp	r3, #33	@ 0x21
 8003154:	d005      	beq.n	8003162 <I2C_MasterTransmit_TXE+0xda>
 8003156:	7bbb      	ldrb	r3, [r7, #14]
 8003158:	2b40      	cmp	r3, #64	@ 0x40
 800315a:	d12d      	bne.n	80031b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	2b22      	cmp	r3, #34	@ 0x22
 8003160:	d12a      	bne.n	80031b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d108      	bne.n	800317e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800317c:	e01c      	b.n	80031b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b40      	cmp	r3, #64	@ 0x40
 8003188:	d103      	bne.n	8003192 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f88e 	bl	80032ac <I2C_MemoryTransmit_TXE_BTF>
}
 8003190:	e012      	b.n	80031b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	781a      	ldrb	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80031b6:	e7ff      	b.n	80031b8 <I2C_MasterTransmit_TXE+0x130>
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b21      	cmp	r3, #33	@ 0x21
 80031d8:	d164      	bne.n	80032a4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003208:	e04c      	b.n	80032a4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d01d      	beq.n	800324c <I2C_MasterTransmit_BTF+0x8c>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b20      	cmp	r3, #32
 8003214:	d01a      	beq.n	800324c <I2C_MasterTransmit_BTF+0x8c>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800321c:	d016      	beq.n	800324c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800322c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2211      	movs	r2, #17
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff feb7 	bl	8002fb8 <HAL_I2C_MasterTxCpltCallback>
}
 800324a:	e02b      	b.n	80032a4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800325a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800326a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b40      	cmp	r3, #64	@ 0x40
 8003284:	d107      	bne.n	8003296 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fed2 	bl	8003038 <HAL_I2C_MemTxCpltCallback>
}
 8003294:	e006      	b.n	80032a4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff fe8a 	bl	8002fb8 <HAL_I2C_MasterTxCpltCallback>
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d11d      	bne.n	8003300 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10b      	bne.n	80032e4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80032e2:	e077      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	121b      	asrs	r3, r3, #8
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032fe:	e069      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10b      	bne.n	8003320 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800330c:	b2da      	uxtb	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800331e:	e059      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003324:	2b02      	cmp	r3, #2
 8003326:	d152      	bne.n	80033ce <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b22      	cmp	r3, #34	@ 0x22
 800332c:	d10d      	bne.n	800334a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800333c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003348:	e044      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d015      	beq.n	8003380 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b21      	cmp	r3, #33	@ 0x21
 8003358:	d112      	bne.n	8003380 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800337e:	e029      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d124      	bne.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b21      	cmp	r3, #33	@ 0x21
 800338e:	d121      	bne.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800339e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff fe36 	bl	8003038 <HAL_I2C_MemTxCpltCallback>
}
 80033cc:	e002      	b.n	80033d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff f898 	bl	8002504 <I2C_Flush_DR>
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b22      	cmp	r3, #34	@ 0x22
 80033ee:	f040 80b9 	bne.w	8003564 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d921      	bls.n	800344a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b03      	cmp	r3, #3
 8003434:	f040 8096 	bne.w	8003564 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003446:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003448:	e08c      	b.n	8003564 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	2b02      	cmp	r3, #2
 8003450:	d07f      	beq.n	8003552 <I2C_MasterReceive_RXNE+0x176>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d002      	beq.n	800345e <I2C_MasterReceive_RXNE+0x82>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d179      	bne.n	8003552 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f001 fb64 	bl	8004b2c <I2C_WaitOnSTOPRequestThroughIT>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d14c      	bne.n	8003504 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003478:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003488:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b40      	cmp	r3, #64	@ 0x40
 80034c2:	d10a      	bne.n	80034da <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fdba 	bl	800304c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034d8:	e044      	b.n	8003564 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d002      	beq.n	80034ee <I2C_MasterReceive_RXNE+0x112>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d103      	bne.n	80034f6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034f4:	e002      	b.n	80034fc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2212      	movs	r2, #18
 80034fa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fd65 	bl	8002fcc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003502:	e02f      	b.n	8003564 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003512:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fd88 	bl	8003060 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003550:	e008      	b.n	8003564 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003560:	605a      	str	r2, [r3, #4]
}
 8003562:	e7ff      	b.n	8003564 <I2C_MasterReceive_RXNE+0x188>
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b04      	cmp	r3, #4
 8003582:	d11b      	bne.n	80035bc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003592:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80035ba:	e0c4      	b.n	8003746 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d129      	bne.n	800361a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d00a      	beq.n	80035f2 <I2C_MasterReceive_BTF+0x86>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d007      	beq.n	80035f2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003618:	e095      	b.n	8003746 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d17d      	bne.n	8003720 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d002      	beq.n	8003630 <I2C_MasterReceive_BTF+0xc4>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b10      	cmp	r3, #16
 800362e:	d108      	bne.n	8003642 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e016      	b.n	8003670 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b04      	cmp	r3, #4
 8003646:	d002      	beq.n	800364e <I2C_MasterReceive_BTF+0xe2>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d108      	bne.n	8003660 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e007      	b.n	8003670 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80036ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b40      	cmp	r3, #64	@ 0x40
 80036de:	d10a      	bne.n	80036f6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fcac 	bl	800304c <HAL_I2C_MemRxCpltCallback>
}
 80036f4:	e027      	b.n	8003746 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d002      	beq.n	800370a <I2C_MasterReceive_BTF+0x19e>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b20      	cmp	r3, #32
 8003708:	d103      	bne.n	8003712 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003710:	e002      	b.n	8003718 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2212      	movs	r2, #18
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fc57 	bl	8002fcc <HAL_I2C_MasterRxCpltCallback>
}
 800371e:	e012      	b.n	8003746 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b40      	cmp	r3, #64	@ 0x40
 8003760:	d117      	bne.n	8003792 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	b2db      	uxtb	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800377a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800377c:	e067      	b.n	800384e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	b2da      	uxtb	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	611a      	str	r2, [r3, #16]
}
 8003790:	e05d      	b.n	800384e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800379a:	d133      	bne.n	8003804 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b21      	cmp	r3, #33	@ 0x21
 80037a6:	d109      	bne.n	80037bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037b8:	611a      	str	r2, [r3, #16]
 80037ba:	e008      	b.n	80037ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <I2C_Master_SB+0x92>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d108      	bne.n	80037f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d032      	beq.n	800384e <I2C_Master_SB+0x100>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02d      	beq.n	800384e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003800:	605a      	str	r2, [r3, #4]
}
 8003802:	e024      	b.n	800384e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10e      	bne.n	800382a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003810:	b29b      	uxth	r3, r3
 8003812:	11db      	asrs	r3, r3, #7
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0306 	and.w	r3, r3, #6
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f063 030f 	orn	r3, r3, #15
 8003820:	b2da      	uxtb	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]
}
 8003828:	e011      	b.n	800384e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382e:	2b01      	cmp	r3, #1
 8003830:	d10d      	bne.n	800384e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	b29b      	uxth	r3, r3
 8003838:	11db      	asrs	r3, r3, #7
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 0306 	and.w	r3, r3, #6
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f063 030e 	orn	r3, r3, #14
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	b2da      	uxtb	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <I2C_Master_ADD10+0x26>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d108      	bne.n	8003892 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <I2C_Master_ADD10+0x48>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038a0:	605a      	str	r2, [r3, #4]
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b091      	sub	sp, #68	@ 0x44
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b22      	cmp	r3, #34	@ 0x22
 80038d6:	f040 8169 	bne.w	8003bac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10f      	bne.n	8003902 <I2C_Master_ADDR+0x54>
 80038e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80038e6:	2b40      	cmp	r3, #64	@ 0x40
 80038e8:	d10b      	bne.n	8003902 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ea:	2300      	movs	r3, #0
 80038ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	e160      	b.n	8003bc4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003906:	2b00      	cmp	r3, #0
 8003908:	d11d      	bne.n	8003946 <I2C_Master_ADDR+0x98>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003912:	d118      	bne.n	8003946 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003914:	2300      	movs	r3, #0
 8003916:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003938:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	651a      	str	r2, [r3, #80]	@ 0x50
 8003944:	e13e      	b.n	8003bc4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d113      	bne.n	8003978 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003950:	2300      	movs	r3, #0
 8003952:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e115      	b.n	8003ba4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	f040 808a 	bne.w	8003a98 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003986:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800398a:	d137      	bne.n	80039fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800399a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039aa:	d113      	bne.n	80039d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	e0e7      	b.n	8003ba4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d4:	2300      	movs	r3, #0
 80039d6:	623b      	str	r3, [r7, #32]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	623b      	str	r3, [r7, #32]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e0d3      	b.n	8003ba4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d02e      	beq.n	8003a60 <I2C_Master_ADDR+0x1b2>
 8003a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d02b      	beq.n	8003a60 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0a:	2b12      	cmp	r3, #18
 8003a0c:	d102      	bne.n	8003a14 <I2C_Master_ADDR+0x166>
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d125      	bne.n	8003a60 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d00e      	beq.n	8003a38 <I2C_Master_ADDR+0x18a>
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d00b      	beq.n	8003a38 <I2C_Master_ADDR+0x18a>
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d008      	beq.n	8003a38 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e007      	b.n	8003a48 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a46:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	e0a1      	b.n	8003ba4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a6e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e085      	b.n	8003ba4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d14d      	bne.n	8003b3e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d016      	beq.n	8003ad6 <I2C_Master_ADDR+0x228>
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d013      	beq.n	8003ad6 <I2C_Master_ADDR+0x228>
 8003aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d010      	beq.n	8003ad6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e007      	b.n	8003ae6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ae4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003af4:	d117      	bne.n	8003b26 <I2C_Master_ADDR+0x278>
 8003af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003afc:	d00b      	beq.n	8003b16 <I2C_Master_ADDR+0x268>
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d008      	beq.n	8003b16 <I2C_Master_ADDR+0x268>
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d005      	beq.n	8003b16 <I2C_Master_ADDR+0x268>
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0c:	2b10      	cmp	r3, #16
 8003b0e:	d002      	beq.n	8003b16 <I2C_Master_ADDR+0x268>
 8003b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d107      	bne.n	8003b26 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b24:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	e032      	b.n	8003ba4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b4c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b5c:	d117      	bne.n	8003b8e <I2C_Master_ADDR+0x2e0>
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b64:	d00b      	beq.n	8003b7e <I2C_Master_ADDR+0x2d0>
 8003b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d008      	beq.n	8003b7e <I2C_Master_ADDR+0x2d0>
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d005      	beq.n	8003b7e <I2C_Master_ADDR+0x2d0>
 8003b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d002      	beq.n	8003b7e <I2C_Master_ADDR+0x2d0>
 8003b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d107      	bne.n	8003b8e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003baa:	e00b      	b.n	8003bc4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
}
 8003bc2:	e7ff      	b.n	8003bc4 <I2C_Master_ADDR+0x316>
 8003bc4:	bf00      	nop
 8003bc6:	3744      	adds	r7, #68	@ 0x44
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02b      	beq.n	8003c42 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d114      	bne.n	8003c42 <I2C_SlaveTransmit_TXE+0x72>
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b29      	cmp	r3, #41	@ 0x29
 8003c1c:	d111      	bne.n	8003c42 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2221      	movs	r2, #33	@ 0x21
 8003c32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2228      	movs	r2, #40	@ 0x28
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff f9cf 	bl	8002fe0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d011      	beq.n	8003c80 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d02c      	beq.n	8003d00 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d114      	bne.n	8003d00 <I2C_SlaveReceive_RXNE+0x74>
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cda:	d111      	bne.n	8003d00 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2222      	movs	r2, #34	@ 0x22
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2228      	movs	r2, #40	@ 0x28
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff f97a 	bl	8002ff4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d012      	beq.n	8003d40 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d66:	2b28      	cmp	r3, #40	@ 0x28
 8003d68:	d127      	bne.n	8003dba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	09db      	lsrs	r3, r3, #7
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	81bb      	strh	r3, [r7, #12]
 8003d9c:	e002      	b.n	8003da4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003dac:	89ba      	ldrh	r2, [r7, #12]
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff f928 	bl	8003008 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003db8:	e00e      	b.n	8003dd8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003e00:	2300      	movs	r3, #0
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e3c:	d172      	bne.n	8003f24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b22      	cmp	r3, #34	@ 0x22
 8003e42:	d002      	beq.n	8003e4a <I2C_Slave_STOPF+0x6a>
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e48:	d135      	bne.n	8003eb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	f043 0204 	orr.w	r2, r3, #4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe f833 	bl	8001eee <HAL_DMA_GetState>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d049      	beq.n	8003f22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	4a69      	ldr	r2, [pc, #420]	@ (8004038 <I2C_Slave_STOPF+0x258>)
 8003e94:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe f805 	bl	8001eaa <HAL_DMA_Abort_IT>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d03d      	beq.n	8003f22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003eb4:	e035      	b.n	8003f22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed2:	f043 0204 	orr.w	r2, r3, #4
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ee8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fffd 	bl	8001eee <HAL_DMA_GetState>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d014      	beq.n	8003f24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efe:	4a4e      	ldr	r2, [pc, #312]	@ (8004038 <I2C_Slave_STOPF+0x258>)
 8003f00:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd ffcf 	bl	8001eaa <HAL_DMA_Abort_IT>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4798      	blx	r3
 8003f20:	e000      	b.n	8003f24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d03e      	beq.n	8003fac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d112      	bne.n	8003f62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6c:	2b40      	cmp	r3, #64	@ 0x40
 8003f6e:	d112      	bne.n	8003f96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	f043 0204 	orr.w	r2, r3, #4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8b7 	bl	8004128 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003fba:	e039      	b.n	8004030 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fc0:	d109      	bne.n	8003fd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2228      	movs	r2, #40	@ 0x28
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff f80f 	bl	8002ff4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b28      	cmp	r3, #40	@ 0x28
 8003fe0:	d111      	bne.n	8004006 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a15      	ldr	r2, [pc, #84]	@ (800403c <I2C_Slave_STOPF+0x25c>)
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff f810 	bl	8003024 <HAL_I2C_ListenCpltCallback>
}
 8004004:	e014      	b.n	8004030 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	2b22      	cmp	r3, #34	@ 0x22
 800400c:	d002      	beq.n	8004014 <I2C_Slave_STOPF+0x234>
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b22      	cmp	r3, #34	@ 0x22
 8004012:	d10d      	bne.n	8004030 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe ffe2 	bl	8002ff4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	08004689 	.word	0x08004689
 800403c:	ffff0000 	.word	0xffff0000

08004040 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d002      	beq.n	8004062 <I2C_Slave_AF+0x22>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b20      	cmp	r3, #32
 8004060:	d129      	bne.n	80040b6 <I2C_Slave_AF+0x76>
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b28      	cmp	r3, #40	@ 0x28
 8004066:	d126      	bne.n	80040b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a2e      	ldr	r2, [pc, #184]	@ (8004124 <I2C_Slave_AF+0xe4>)
 800406c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800407c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004086:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004096:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fe ffb8 	bl	8003024 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80040b4:	e031      	b.n	800411a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b21      	cmp	r3, #33	@ 0x21
 80040ba:	d129      	bne.n	8004110 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a19      	ldr	r2, [pc, #100]	@ (8004124 <I2C_Slave_AF+0xe4>)
 80040c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2221      	movs	r2, #33	@ 0x21
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004100:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe f9fe 	bl	8002504 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7fe ff69 	bl	8002fe0 <HAL_I2C_SlaveTxCpltCallback>
}
 800410e:	e004      	b.n	800411a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004118:	615a      	str	r2, [r3, #20]
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	ffff0000 	.word	0xffff0000

08004128 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004136:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800413e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004140:	7bbb      	ldrb	r3, [r7, #14]
 8004142:	2b10      	cmp	r3, #16
 8004144:	d002      	beq.n	800414c <I2C_ITError+0x24>
 8004146:	7bbb      	ldrb	r3, [r7, #14]
 8004148:	2b40      	cmp	r3, #64	@ 0x40
 800414a:	d10a      	bne.n	8004162 <I2C_ITError+0x3a>
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b22      	cmp	r3, #34	@ 0x22
 8004150:	d107      	bne.n	8004162 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004160:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004168:	2b28      	cmp	r3, #40	@ 0x28
 800416a:	d107      	bne.n	800417c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2228      	movs	r2, #40	@ 0x28
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800417a:	e015      	b.n	80041a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418a:	d00a      	beq.n	80041a2 <I2C_ITError+0x7a>
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b60      	cmp	r3, #96	@ 0x60
 8004190:	d007      	beq.n	80041a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b6:	d162      	bne.n	800427e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d020      	beq.n	8004218 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041da:	4a6a      	ldr	r2, [pc, #424]	@ (8004384 <I2C_ITError+0x25c>)
 80041dc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fe61 	bl	8001eaa <HAL_DMA_Abort_IT>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8089 	beq.w	8004302 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004212:	4610      	mov	r0, r2
 8004214:	4798      	blx	r3
 8004216:	e074      	b.n	8004302 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	4a59      	ldr	r2, [pc, #356]	@ (8004384 <I2C_ITError+0x25c>)
 800421e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004224:	4618      	mov	r0, r3
 8004226:	f7fd fe40 	bl	8001eaa <HAL_DMA_Abort_IT>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d068      	beq.n	8004302 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423a:	2b40      	cmp	r3, #64	@ 0x40
 800423c:	d10b      	bne.n	8004256 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004278:	4610      	mov	r0, r2
 800427a:	4798      	blx	r3
 800427c:	e041      	b.n	8004302 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b60      	cmp	r3, #96	@ 0x60
 8004288:	d125      	bne.n	80042d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a2:	2b40      	cmp	r3, #64	@ 0x40
 80042a4:	d10b      	bne.n	80042be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fe fed0 	bl	8003074 <HAL_I2C_AbortCpltCallback>
 80042d4:	e015      	b.n	8004302 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b40      	cmp	r3, #64	@ 0x40
 80042e2:	d10b      	bne.n	80042fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fe feaf 	bl	8003060 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10e      	bne.n	8004330 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004322:	2b00      	cmp	r3, #0
 8004324:	d104      	bne.n	8004330 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800433e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004346:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d113      	bne.n	800437c <I2C_ITError+0x254>
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b28      	cmp	r3, #40	@ 0x28
 8004358:	d110      	bne.n	800437c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a0a      	ldr	r2, [pc, #40]	@ (8004388 <I2C_ITError+0x260>)
 800435e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fe fe54 	bl	8003024 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	08004689 	.word	0x08004689
 8004388:	ffff0000 	.word	0xffff0000

0800438c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	460b      	mov	r3, r1
 80043a0:	813b      	strh	r3, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2200      	movs	r2, #0
 80043be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fa08 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043dc:	d103      	bne.n	80043e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e05f      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ea:	897b      	ldrh	r3, [r7, #10]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	492d      	ldr	r1, [pc, #180]	@ (80044b4 <I2C_RequestMemoryWrite+0x128>)
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fa63 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e04c      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004428:	6a39      	ldr	r1, [r7, #32]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 faee 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	2b04      	cmp	r3, #4
 800443c:	d107      	bne.n	800444e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e02b      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004458:	893b      	ldrh	r3, [r7, #8]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	611a      	str	r2, [r3, #16]
 8004462:	e021      	b.n	80044a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004464:	893b      	ldrh	r3, [r7, #8]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	b29b      	uxth	r3, r3
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fac8 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2b04      	cmp	r3, #4
 8004488:	d107      	bne.n	800449a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e005      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800449e:	893b      	ldrh	r3, [r7, #8]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	00010002 	.word	0x00010002

080044b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	4608      	mov	r0, r1
 80044c2:	4611      	mov	r1, r2
 80044c4:	461a      	mov	r2, r3
 80044c6:	4603      	mov	r3, r0
 80044c8:	817b      	strh	r3, [r7, #10]
 80044ca:	460b      	mov	r3, r1
 80044cc:	813b      	strh	r3, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f96a 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004518:	d103      	bne.n	8004522 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004520:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0aa      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004526:	897b      	ldrh	r3, [r7, #10]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	4952      	ldr	r1, [pc, #328]	@ (8004684 <I2C_RequestMemoryRead+0x1cc>)
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f9c5 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e097      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fa50 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	2b04      	cmp	r3, #4
 8004578:	d107      	bne.n	800458a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e076      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004594:	893b      	ldrh	r3, [r7, #8]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	611a      	str	r2, [r3, #16]
 800459e:	e021      	b.n	80045e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045a0:	893b      	ldrh	r3, [r7, #8]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b0:	6a39      	ldr	r1, [r7, #32]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fa2a 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d107      	bne.n	80045d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e050      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045da:	893b      	ldrh	r3, [r7, #8]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e6:	6a39      	ldr	r1, [r7, #32]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fa0f 	bl	8004a0c <I2C_WaitOnTXEFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d107      	bne.n	800460c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800460a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e035      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800461e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2200      	movs	r2, #0
 8004628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f8d3 	bl	80047d8 <I2C_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004646:	d103      	bne.n	8004650 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e013      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004654:	897b      	ldrh	r3, [r7, #10]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	4906      	ldr	r1, [pc, #24]	@ (8004684 <I2C_RequestMemoryRead+0x1cc>)
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f92e 	bl	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	00010002 	.word	0x00010002

08004688 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004698:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80046a2:	4b4b      	ldr	r3, [pc, #300]	@ (80047d0 <I2C_DMAAbort+0x148>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	4a4a      	ldr	r2, [pc, #296]	@ (80047d4 <I2C_DMAAbort+0x14c>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	0a1a      	lsrs	r2, r3, #8
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00da      	lsls	r2, r3, #3
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80046ce:	e00a      	b.n	80046e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e4:	d0ea      	beq.n	80046bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f2:	2200      	movs	r2, #0
 80046f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004702:	2200      	movs	r2, #0
 8004704:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004714:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004728:	2200      	movs	r2, #0
 800472a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004738:	2200      	movs	r2, #0
 800473a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b60      	cmp	r3, #96	@ 0x60
 8004756:	d10e      	bne.n	8004776 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2200      	movs	r2, #0
 800476c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800476e:	6978      	ldr	r0, [r7, #20]
 8004770:	f7fe fc80 	bl	8003074 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004774:	e027      	b.n	80047c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004776:	7cfb      	ldrb	r3, [r7, #19]
 8004778:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800477c:	2b28      	cmp	r3, #40	@ 0x28
 800477e:	d117      	bne.n	80047b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800479e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2228      	movs	r2, #40	@ 0x28
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80047ae:	e007      	b.n	80047c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80047c0:	6978      	ldr	r0, [r7, #20]
 80047c2:	f7fe fc4d 	bl	8003060 <HAL_I2C_ErrorCallback>
}
 80047c6:	bf00      	nop
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000000 	.word	0x20000000
 80047d4:	14f8b589 	.word	0x14f8b589

080047d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e8:	e048      	b.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d044      	beq.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f2:	f7fd fa19 	bl	8001c28 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d302      	bcc.n	8004808 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d139      	bne.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	0c1b      	lsrs	r3, r3, #16
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10d      	bne.n	800482e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	43da      	mvns	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	e00c      	b.n	8004848 <I2C_WaitOnFlagUntilTimeout+0x70>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	d116      	bne.n	800487c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004868:	f043 0220 	orr.w	r2, r3, #32
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e023      	b.n	80048c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10d      	bne.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	43da      	mvns	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	e00c      	b.n	80048bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	43da      	mvns	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4013      	ands	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d093      	beq.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048da:	e071      	b.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ea:	d123      	bne.n	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004904:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	f043 0204 	orr.w	r2, r3, #4
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e067      	b.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d041      	beq.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493c:	f7fd f974 	bl	8001c28 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d136      	bne.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	0c1b      	lsrs	r3, r3, #16
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10c      	bne.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	e00b      	b.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	43da      	mvns	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4013      	ands	r3, r2
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e021      	b.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10c      	bne.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	43da      	mvns	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e00b      	b.n	80049fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	43da      	mvns	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f47f af6d 	bne.w	80048dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a18:	e034      	b.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f915 	bl	8004c4a <I2C_IsAcknowledgeFailed>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e034      	b.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d028      	beq.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a32:	f7fd f8f9 	bl	8001c28 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d302      	bcc.n	8004a48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11d      	bne.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a52:	2b80      	cmp	r3, #128	@ 0x80
 8004a54:	d016      	beq.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	f043 0220 	orr.w	r2, r3, #32
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e007      	b.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8e:	2b80      	cmp	r3, #128	@ 0x80
 8004a90:	d1c3      	bne.n	8004a1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aa8:	e034      	b.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f8cd 	bl	8004c4a <I2C_IsAcknowledgeFailed>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e034      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d028      	beq.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fd f8b1 	bl	8001c28 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d11d      	bne.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d016      	beq.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e007      	b.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d1c3      	bne.n	8004aaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b38:	4b13      	ldr	r3, [pc, #76]	@ (8004b88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	08db      	lsrs	r3, r3, #3
 8004b3e:	4a13      	ldr	r2, [pc, #76]	@ (8004b8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	0a1a      	lsrs	r2, r3, #8
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d107      	bne.n	8004b6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	f043 0220 	orr.w	r2, r3, #32
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e008      	b.n	8004b7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b78:	d0e9      	beq.n	8004b4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	14f8b589 	.word	0x14f8b589

08004b90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b9c:	e049      	b.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d119      	bne.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0210 	mvn.w	r2, #16
 8004bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e030      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be0:	f7fd f822 	bl	8001c28 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d302      	bcc.n	8004bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11d      	bne.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d016      	beq.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e007      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	d1ae      	bne.n	8004b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c60:	d11b      	bne.n	8004c9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	f043 0204 	orr.w	r2, r3, #4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004cb8:	d103      	bne.n	8004cc2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cc0:	e007      	b.n	8004cd2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004cca:	d102      	bne.n	8004cd2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2208      	movs	r2, #8
 8004cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e267      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d075      	beq.n	8004dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cfe:	4b88      	ldr	r3, [pc, #544]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d00c      	beq.n	8004d24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d0a:	4b85      	ldr	r3, [pc, #532]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d112      	bne.n	8004d3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d16:	4b82      	ldr	r3, [pc, #520]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d22:	d10b      	bne.n	8004d3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	4b7e      	ldr	r3, [pc, #504]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05b      	beq.n	8004de8 <HAL_RCC_OscConfig+0x108>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d157      	bne.n	8004de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e242      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d44:	d106      	bne.n	8004d54 <HAL_RCC_OscConfig+0x74>
 8004d46:	4b76      	ldr	r3, [pc, #472]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a75      	ldr	r2, [pc, #468]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e01d      	b.n	8004d90 <HAL_RCC_OscConfig+0xb0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x98>
 8004d5e:	4b70      	ldr	r3, [pc, #448]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6f      	ldr	r2, [pc, #444]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e00b      	b.n	8004d90 <HAL_RCC_OscConfig+0xb0>
 8004d78:	4b69      	ldr	r3, [pc, #420]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a68      	ldr	r2, [pc, #416]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	4b66      	ldr	r3, [pc, #408]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a65      	ldr	r2, [pc, #404]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fc ff46 	bl	8001c28 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fc ff42 	bl	8001c28 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	@ 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e207      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0xc0>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fc ff32 	bl	8001c28 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc8:	f7fc ff2e 	bl	8001c28 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b64      	cmp	r3, #100	@ 0x64
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e1f3      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dda:	4b51      	ldr	r3, [pc, #324]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0xe8>
 8004de6:	e000      	b.n	8004dea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d063      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004df6:	4b4a      	ldr	r3, [pc, #296]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e02:	4b47      	ldr	r3, [pc, #284]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d11c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e0e:	4b44      	ldr	r3, [pc, #272]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1a:	4b41      	ldr	r3, [pc, #260]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_RCC_OscConfig+0x152>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e1c7      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e32:	4b3b      	ldr	r3, [pc, #236]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4937      	ldr	r1, [pc, #220]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e46:	e03a      	b.n	8004ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e50:	4b34      	ldr	r3, [pc, #208]	@ (8004f24 <HAL_RCC_OscConfig+0x244>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fc fee7 	bl	8001c28 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5e:	f7fc fee3 	bl	8001c28 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1a8      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e70:	4b2b      	ldr	r3, [pc, #172]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	4925      	ldr	r1, [pc, #148]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]
 8004e90:	e015      	b.n	8004ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e92:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <HAL_RCC_OscConfig+0x244>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fc fec6 	bl	8001c28 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fc fec2 	bl	8001c28 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e187      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d036      	beq.n	8004f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed2:	4b15      	ldr	r3, [pc, #84]	@ (8004f28 <HAL_RCC_OscConfig+0x248>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fc fea6 	bl	8001c28 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee0:	f7fc fea2 	bl	8001c28 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e167      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x200>
 8004efe:	e01b      	b.n	8004f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f00:	4b09      	ldr	r3, [pc, #36]	@ (8004f28 <HAL_RCC_OscConfig+0x248>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f06:	f7fc fe8f 	bl	8001c28 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0c:	e00e      	b.n	8004f2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f0e:	f7fc fe8b 	bl	8001c28 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d907      	bls.n	8004f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e150      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
 8004f20:	40023800 	.word	0x40023800
 8004f24:	42470000 	.word	0x42470000
 8004f28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f2c:	4b88      	ldr	r3, [pc, #544]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ea      	bne.n	8004f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8097 	beq.w	8005074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4a:	4b81      	ldr	r3, [pc, #516]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	4b7d      	ldr	r3, [pc, #500]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	4a7c      	ldr	r2, [pc, #496]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f66:	4b7a      	ldr	r3, [pc, #488]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f76:	4b77      	ldr	r3, [pc, #476]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d118      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f82:	4b74      	ldr	r3, [pc, #464]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a73      	ldr	r2, [pc, #460]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8e:	f7fc fe4b 	bl	8001c28 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f96:	f7fc fe47 	bl	8001c28 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e10c      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8005154 <HAL_RCC_OscConfig+0x474>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <HAL_RCC_OscConfig+0x2ea>
 8004fbc:	4b64      	ldr	r3, [pc, #400]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc0:	4a63      	ldr	r2, [pc, #396]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc8:	e01c      	b.n	8005004 <HAL_RCC_OscConfig+0x324>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x30c>
 8004fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fde:	4b5c      	ldr	r3, [pc, #368]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0x324>
 8004fec:	4b58      	ldr	r3, [pc, #352]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff0:	4a57      	ldr	r2, [pc, #348]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff8:	4b55      	ldr	r3, [pc, #340]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffc:	4a54      	ldr	r2, [pc, #336]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8004ffe:	f023 0304 	bic.w	r3, r3, #4
 8005002:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500c:	f7fc fe0c 	bl	8001c28 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005012:	e00a      	b.n	800502a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005014:	f7fc fe08 	bl	8001c28 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e0cb      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502a:	4b49      	ldr	r3, [pc, #292]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0ee      	beq.n	8005014 <HAL_RCC_OscConfig+0x334>
 8005036:	e014      	b.n	8005062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005038:	f7fc fdf6 	bl	8001c28 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503e:	e00a      	b.n	8005056 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005040:	f7fc fdf2 	bl	8001c28 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e0b5      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005056:	4b3e      	ldr	r3, [pc, #248]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ee      	bne.n	8005040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005068:	4b39      	ldr	r3, [pc, #228]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	4a38      	ldr	r2, [pc, #224]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800506e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005072:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a1 	beq.w	80051c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800507e:	4b34      	ldr	r3, [pc, #208]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b08      	cmp	r3, #8
 8005088:	d05c      	beq.n	8005144 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d141      	bne.n	8005116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005092:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <HAL_RCC_OscConfig+0x478>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fc fdc6 	bl	8001c28 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a0:	f7fc fdc2 	bl	8001c28 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e087      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	4b27      	ldr	r3, [pc, #156]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	019b      	lsls	r3, r3, #6
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	3b01      	subs	r3, #1
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e0:	061b      	lsls	r3, r3, #24
 80050e2:	491b      	ldr	r1, [pc, #108]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005158 <HAL_RCC_OscConfig+0x478>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fc fd9b 	bl	8001c28 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fc fd97 	bl	8001c28 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e05c      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005108:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x416>
 8005114:	e054      	b.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005116:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <HAL_RCC_OscConfig+0x478>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fc fd84 	bl	8001c28 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005124:	f7fc fd80 	bl	8001c28 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e045      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	4b06      	ldr	r3, [pc, #24]	@ (8005150 <HAL_RCC_OscConfig+0x470>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x444>
 8005142:	e03d      	b.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d107      	bne.n	800515c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e038      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
 8005150:	40023800 	.word	0x40023800
 8005154:	40007000 	.word	0x40007000
 8005158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800515c:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <HAL_RCC_OscConfig+0x4ec>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d028      	beq.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d121      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d11a      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800518c:	4013      	ands	r3, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005194:	4293      	cmp	r3, r2
 8005196:	d111      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	3b01      	subs	r3, #1
 80051a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800

080051d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0cc      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051e4:	4b68      	ldr	r3, [pc, #416]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d90c      	bls.n	800520c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f2:	4b65      	ldr	r3, [pc, #404]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b63      	ldr	r3, [pc, #396]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0b8      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d020      	beq.n	800525a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005224:	4b59      	ldr	r3, [pc, #356]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4a58      	ldr	r2, [pc, #352]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800522e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800523c:	4b53      	ldr	r3, [pc, #332]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4a52      	ldr	r2, [pc, #328]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005248:	4b50      	ldr	r3, [pc, #320]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	494d      	ldr	r1, [pc, #308]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d044      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d107      	bne.n	800527e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526e:	4b47      	ldr	r3, [pc, #284]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d119      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e07f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d003      	beq.n	800528e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800528a:	2b03      	cmp	r3, #3
 800528c:	d107      	bne.n	800529e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528e:	4b3f      	ldr	r3, [pc, #252]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e06f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529e:	4b3b      	ldr	r3, [pc, #236]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e067      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ae:	4b37      	ldr	r3, [pc, #220]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f023 0203 	bic.w	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4934      	ldr	r1, [pc, #208]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052c0:	f7fc fcb2 	bl	8001c28 <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c6:	e00a      	b.n	80052de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c8:	f7fc fcae 	bl	8001c28 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e04f      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052de:	4b2b      	ldr	r3, [pc, #172]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 020c 	and.w	r2, r3, #12
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d1eb      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d20c      	bcs.n	8005318 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b22      	ldr	r3, [pc, #136]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b20      	ldr	r3, [pc, #128]	@ (8005388 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e032      	b.n	800537e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005324:	4b19      	ldr	r3, [pc, #100]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4916      	ldr	r1, [pc, #88]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005342:	4b12      	ldr	r3, [pc, #72]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	490e      	ldr	r1, [pc, #56]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005356:	f000 f821 	bl	800539c <HAL_RCC_GetSysClockFreq>
 800535a:	4602      	mov	r2, r0
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	490a      	ldr	r1, [pc, #40]	@ (8005390 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	5ccb      	ldrb	r3, [r1, r3]
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	4a09      	ldr	r2, [pc, #36]	@ (8005394 <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005372:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <HAL_RCC_ClockConfig+0x1c8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fc fc12 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40023c00 	.word	0x40023c00
 800538c:	40023800 	.word	0x40023800
 8005390:	080088c0 	.word	0x080088c0
 8005394:	20000000 	.word	0x20000000
 8005398:	20000004 	.word	0x20000004

0800539c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b090      	sub	sp, #64	@ 0x40
 80053a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053b4:	4b59      	ldr	r3, [pc, #356]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d00d      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0x40>
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	f200 80a1 	bhi.w	8005508 <HAL_RCC_GetSysClockFreq+0x16c>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0x34>
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80053ce:	e09b      	b.n	8005508 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053d0:	4b53      	ldr	r3, [pc, #332]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x184>)
 80053d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053d4:	e09b      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053d6:	4b53      	ldr	r3, [pc, #332]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x188>)
 80053d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053da:	e098      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053dc:	4b4f      	ldr	r3, [pc, #316]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053e6:	4b4d      	ldr	r3, [pc, #308]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d028      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f2:	4b4a      	ldr	r3, [pc, #296]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	2200      	movs	r2, #0
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005404:	2100      	movs	r1, #0
 8005406:	4b47      	ldr	r3, [pc, #284]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x188>)
 8005408:	fb03 f201 	mul.w	r2, r3, r1
 800540c:	2300      	movs	r3, #0
 800540e:	fb00 f303 	mul.w	r3, r0, r3
 8005412:	4413      	add	r3, r2
 8005414:	4a43      	ldr	r2, [pc, #268]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x188>)
 8005416:	fba0 1202 	umull	r1, r2, r0, r2
 800541a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800541c:	460a      	mov	r2, r1
 800541e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005422:	4413      	add	r3, r2
 8005424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005428:	2200      	movs	r2, #0
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	61fa      	str	r2, [r7, #28]
 800542e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005432:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005436:	f7fb fbbf 	bl	8000bb8 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4613      	mov	r3, r2
 8005440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005442:	e053      	b.n	80054ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005444:	4b35      	ldr	r3, [pc, #212]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	2200      	movs	r2, #0
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	617a      	str	r2, [r7, #20]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005456:	f04f 0b00 	mov.w	fp, #0
 800545a:	4652      	mov	r2, sl
 800545c:	465b      	mov	r3, fp
 800545e:	f04f 0000 	mov.w	r0, #0
 8005462:	f04f 0100 	mov.w	r1, #0
 8005466:	0159      	lsls	r1, r3, #5
 8005468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800546c:	0150      	lsls	r0, r2, #5
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	ebb2 080a 	subs.w	r8, r2, sl
 8005476:	eb63 090b 	sbc.w	r9, r3, fp
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005486:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800548a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800548e:	ebb2 0408 	subs.w	r4, r2, r8
 8005492:	eb63 0509 	sbc.w	r5, r3, r9
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	00eb      	lsls	r3, r5, #3
 80054a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054a4:	00e2      	lsls	r2, r4, #3
 80054a6:	4614      	mov	r4, r2
 80054a8:	461d      	mov	r5, r3
 80054aa:	eb14 030a 	adds.w	r3, r4, sl
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	eb45 030b 	adc.w	r3, r5, fp
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054c2:	4629      	mov	r1, r5
 80054c4:	028b      	lsls	r3, r1, #10
 80054c6:	4621      	mov	r1, r4
 80054c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054cc:	4621      	mov	r1, r4
 80054ce:	028a      	lsls	r2, r1, #10
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d6:	2200      	movs	r2, #0
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	60fa      	str	r2, [r7, #12]
 80054dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054e0:	f7fb fb6a 	bl	8000bb8 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4613      	mov	r3, r2
 80054ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054ec:	4b0b      	ldr	r3, [pc, #44]	@ (800551c <HAL_RCC_GetSysClockFreq+0x180>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	0c1b      	lsrs	r3, r3, #16
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	3301      	adds	r3, #1
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80054fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	fbb2 f3f3 	udiv	r3, r2, r3
 8005504:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005506:	e002      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005508:	4b05      	ldr	r3, [pc, #20]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x184>)
 800550a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800550c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005510:	4618      	mov	r0, r3
 8005512:	3740      	adds	r7, #64	@ 0x40
 8005514:	46bd      	mov	sp, r7
 8005516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800551a:	bf00      	nop
 800551c:	40023800 	.word	0x40023800
 8005520:	00f42400 	.word	0x00f42400
 8005524:	017d7840 	.word	0x017d7840

08005528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800552c:	4b03      	ldr	r3, [pc, #12]	@ (800553c <HAL_RCC_GetHCLKFreq+0x14>)
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000000 	.word	0x20000000

08005540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005544:	f7ff fff0 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005548:	4602      	mov	r2, r0
 800554a:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	0a9b      	lsrs	r3, r3, #10
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	4903      	ldr	r1, [pc, #12]	@ (8005564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005556:	5ccb      	ldrb	r3, [r1, r3]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40023800 	.word	0x40023800
 8005564:	080088d0 	.word	0x080088d0

08005568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800556c:	f7ff ffdc 	bl	8005528 <HAL_RCC_GetHCLKFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	0b5b      	lsrs	r3, r3, #13
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	4903      	ldr	r1, [pc, #12]	@ (800558c <HAL_RCC_GetPCLK2Freq+0x24>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	080088d0 	.word	0x080088d0

08005590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e042      	b.n	8005628 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc f942 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	@ 0x24
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f973 	bl	80058c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	@ 0x28
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b20      	cmp	r3, #32
 800564e:	d175      	bne.n	800573c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_UART_Transmit+0x2c>
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e06e      	b.n	800573e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2221      	movs	r2, #33	@ 0x21
 800566a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800566e:	f7fc fadb 	bl	8001c28 <HAL_GetTick>
 8005672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005688:	d108      	bne.n	800569c <HAL_UART_Transmit+0x6c>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	e003      	b.n	80056a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056a4:	e02e      	b.n	8005704 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2180      	movs	r1, #128	@ 0x80
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f848 	bl	8005746 <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e03a      	b.n	800573e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	3302      	adds	r3, #2
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e007      	b.n	80056f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1cb      	bne.n	80056a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2200      	movs	r2, #0
 8005716:	2140      	movs	r1, #64	@ 0x40
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f814 	bl	8005746 <UART_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e006      	b.n	800573e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	4613      	mov	r3, r2
 8005754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005756:	e03b      	b.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d037      	beq.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005760:	f7fc fa62 	bl	8001c28 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <UART_WaitOnFlagUntilTimeout+0x30>
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e03a      	b.n	80057f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d023      	beq.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b80      	cmp	r3, #128	@ 0x80
 800578c:	d020      	beq.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b40      	cmp	r3, #64	@ 0x40
 8005792:	d01d      	beq.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d116      	bne.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f81d 	bl	80057f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2208      	movs	r2, #8
 80057c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e00f      	b.n	80057f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4013      	ands	r3, r2
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	429a      	cmp	r2, r3
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d0b4      	beq.n	8005758 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b095      	sub	sp, #84	@ 0x54
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005820:	643a      	str	r2, [r7, #64]	@ 0x40
 8005822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005826:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e5      	bne.n	8005800 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	61fb      	str	r3, [r7, #28]
   return(result);
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005856:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800585a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586c:	2b01      	cmp	r3, #1
 800586e:	d119      	bne.n	80058a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f023 0310 	bic.w	r3, r3, #16
 8005886:	647b      	str	r3, [r7, #68]	@ 0x44
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005890:	61ba      	str	r2, [r7, #24]
 8005892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	6979      	ldr	r1, [r7, #20]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	613b      	str	r3, [r7, #16]
   return(result);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e5      	bne.n	8005870 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058b2:	bf00      	nop
 80058b4:	3754      	adds	r7, #84	@ 0x54
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c4:	b0c0      	sub	sp, #256	@ 0x100
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	68d9      	ldr	r1, [r3, #12]
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	ea40 0301 	orr.w	r3, r0, r1
 80058e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	431a      	orrs	r2, r3
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005918:	f021 010c 	bic.w	r1, r1, #12
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005926:	430b      	orrs	r3, r1
 8005928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593a:	6999      	ldr	r1, [r3, #24]
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	ea40 0301 	orr.w	r3, r0, r1
 8005946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b8f      	ldr	r3, [pc, #572]	@ (8005b8c <UART_SetConfig+0x2cc>)
 8005950:	429a      	cmp	r2, r3
 8005952:	d005      	beq.n	8005960 <UART_SetConfig+0xa0>
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b8d      	ldr	r3, [pc, #564]	@ (8005b90 <UART_SetConfig+0x2d0>)
 800595c:	429a      	cmp	r2, r3
 800595e:	d104      	bne.n	800596a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005960:	f7ff fe02 	bl	8005568 <HAL_RCC_GetPCLK2Freq>
 8005964:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005968:	e003      	b.n	8005972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800596a:	f7ff fde9 	bl	8005540 <HAL_RCC_GetPCLK1Freq>
 800596e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800597c:	f040 810c 	bne.w	8005b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005984:	2200      	movs	r2, #0
 8005986:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800598a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800598e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005992:	4622      	mov	r2, r4
 8005994:	462b      	mov	r3, r5
 8005996:	1891      	adds	r1, r2, r2
 8005998:	65b9      	str	r1, [r7, #88]	@ 0x58
 800599a:	415b      	adcs	r3, r3
 800599c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800599e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059a2:	4621      	mov	r1, r4
 80059a4:	eb12 0801 	adds.w	r8, r2, r1
 80059a8:	4629      	mov	r1, r5
 80059aa:	eb43 0901 	adc.w	r9, r3, r1
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059c2:	4690      	mov	r8, r2
 80059c4:	4699      	mov	r9, r3
 80059c6:	4623      	mov	r3, r4
 80059c8:	eb18 0303 	adds.w	r3, r8, r3
 80059cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059d0:	462b      	mov	r3, r5
 80059d2:	eb49 0303 	adc.w	r3, r9, r3
 80059d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059ee:	460b      	mov	r3, r1
 80059f0:	18db      	adds	r3, r3, r3
 80059f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80059f4:	4613      	mov	r3, r2
 80059f6:	eb42 0303 	adc.w	r3, r2, r3
 80059fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80059fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a04:	f7fb f8d8 	bl	8000bb8 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4b61      	ldr	r3, [pc, #388]	@ (8005b94 <UART_SetConfig+0x2d4>)
 8005a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	011c      	lsls	r4, r3, #4
 8005a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a28:	4642      	mov	r2, r8
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	1891      	adds	r1, r2, r2
 8005a2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a30:	415b      	adcs	r3, r3
 8005a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a38:	4641      	mov	r1, r8
 8005a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a3e:	4649      	mov	r1, r9
 8005a40:	eb43 0b01 	adc.w	fp, r3, r1
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a58:	4692      	mov	sl, r2
 8005a5a:	469b      	mov	fp, r3
 8005a5c:	4643      	mov	r3, r8
 8005a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a66:	464b      	mov	r3, r9
 8005a68:	eb4b 0303 	adc.w	r3, fp, r3
 8005a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a84:	460b      	mov	r3, r1
 8005a86:	18db      	adds	r3, r3, r3
 8005a88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	eb42 0303 	adc.w	r3, r2, r3
 8005a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a9a:	f7fb f88d 	bl	8000bb8 <__aeabi_uldivmod>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8005b94 <UART_SetConfig+0x2d4>)
 8005aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2264      	movs	r2, #100	@ 0x64
 8005aae:	fb02 f303 	mul.w	r3, r2, r3
 8005ab2:	1acb      	subs	r3, r1, r3
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005aba:	4b36      	ldr	r3, [pc, #216]	@ (8005b94 <UART_SetConfig+0x2d4>)
 8005abc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ac8:	441c      	add	r4, r3
 8005aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005adc:	4642      	mov	r2, r8
 8005ade:	464b      	mov	r3, r9
 8005ae0:	1891      	adds	r1, r2, r2
 8005ae2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ae4:	415b      	adcs	r3, r3
 8005ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005aec:	4641      	mov	r1, r8
 8005aee:	1851      	adds	r1, r2, r1
 8005af0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005af2:	4649      	mov	r1, r9
 8005af4:	414b      	adcs	r3, r1
 8005af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b04:	4659      	mov	r1, fp
 8005b06:	00cb      	lsls	r3, r1, #3
 8005b08:	4651      	mov	r1, sl
 8005b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b0e:	4651      	mov	r1, sl
 8005b10:	00ca      	lsls	r2, r1, #3
 8005b12:	4610      	mov	r0, r2
 8005b14:	4619      	mov	r1, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	4642      	mov	r2, r8
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b20:	464b      	mov	r3, r9
 8005b22:	460a      	mov	r2, r1
 8005b24:	eb42 0303 	adc.w	r3, r2, r3
 8005b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b40:	460b      	mov	r3, r1
 8005b42:	18db      	adds	r3, r3, r3
 8005b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b46:	4613      	mov	r3, r2
 8005b48:	eb42 0303 	adc.w	r3, r2, r3
 8005b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b56:	f7fb f82f 	bl	8000bb8 <__aeabi_uldivmod>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b94 <UART_SetConfig+0x2d4>)
 8005b60:	fba3 1302 	umull	r1, r3, r3, r2
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	2164      	movs	r1, #100	@ 0x64
 8005b68:	fb01 f303 	mul.w	r3, r1, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	3332      	adds	r3, #50	@ 0x32
 8005b72:	4a08      	ldr	r2, [pc, #32]	@ (8005b94 <UART_SetConfig+0x2d4>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 0207 	and.w	r2, r3, #7
 8005b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4422      	add	r2, r4
 8005b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b88:	e106      	b.n	8005d98 <UART_SetConfig+0x4d8>
 8005b8a:	bf00      	nop
 8005b8c:	40011000 	.word	0x40011000
 8005b90:	40011400 	.word	0x40011400
 8005b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005baa:	4642      	mov	r2, r8
 8005bac:	464b      	mov	r3, r9
 8005bae:	1891      	adds	r1, r2, r2
 8005bb0:	6239      	str	r1, [r7, #32]
 8005bb2:	415b      	adcs	r3, r3
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bba:	4641      	mov	r1, r8
 8005bbc:	1854      	adds	r4, r2, r1
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	eb43 0501 	adc.w	r5, r3, r1
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	00eb      	lsls	r3, r5, #3
 8005bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bd2:	00e2      	lsls	r2, r4, #3
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	461d      	mov	r5, r3
 8005bd8:	4643      	mov	r3, r8
 8005bda:	18e3      	adds	r3, r4, r3
 8005bdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005be0:	464b      	mov	r3, r9
 8005be2:	eb45 0303 	adc.w	r3, r5, r3
 8005be6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c06:	4629      	mov	r1, r5
 8005c08:	008b      	lsls	r3, r1, #2
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c10:	4621      	mov	r1, r4
 8005c12:	008a      	lsls	r2, r1, #2
 8005c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c18:	f7fa ffce 	bl	8000bb8 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4b60      	ldr	r3, [pc, #384]	@ (8005da4 <UART_SetConfig+0x4e4>)
 8005c22:	fba3 2302 	umull	r2, r3, r3, r2
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	011c      	lsls	r4, r3, #4
 8005c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	1891      	adds	r1, r2, r2
 8005c42:	61b9      	str	r1, [r7, #24]
 8005c44:	415b      	adcs	r3, r3
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	1851      	adds	r1, r2, r1
 8005c50:	6139      	str	r1, [r7, #16]
 8005c52:	4649      	mov	r1, r9
 8005c54:	414b      	adcs	r3, r1
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c64:	4659      	mov	r1, fp
 8005c66:	00cb      	lsls	r3, r1, #3
 8005c68:	4651      	mov	r1, sl
 8005c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c6e:	4651      	mov	r1, sl
 8005c70:	00ca      	lsls	r2, r1, #3
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	4642      	mov	r2, r8
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c80:	464b      	mov	r3, r9
 8005c82:	460a      	mov	r2, r1
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	008b      	lsls	r3, r1, #2
 8005ca8:	4641      	mov	r1, r8
 8005caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cae:	4641      	mov	r1, r8
 8005cb0:	008a      	lsls	r2, r1, #2
 8005cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cb6:	f7fa ff7f 	bl	8000bb8 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	4b38      	ldr	r3, [pc, #224]	@ (8005da4 <UART_SetConfig+0x4e4>)
 8005cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	2264      	movs	r2, #100	@ 0x64
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	1acb      	subs	r3, r1, r3
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	3332      	adds	r3, #50	@ 0x32
 8005cd4:	4a33      	ldr	r2, [pc, #204]	@ (8005da4 <UART_SetConfig+0x4e4>)
 8005cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ce0:	441c      	add	r4, r3
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cea:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cf0:	4642      	mov	r2, r8
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	1891      	adds	r1, r2, r2
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	415b      	adcs	r3, r3
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d00:	4641      	mov	r1, r8
 8005d02:	1851      	adds	r1, r2, r1
 8005d04:	6039      	str	r1, [r7, #0]
 8005d06:	4649      	mov	r1, r9
 8005d08:	414b      	adcs	r3, r1
 8005d0a:	607b      	str	r3, [r7, #4]
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d18:	4659      	mov	r1, fp
 8005d1a:	00cb      	lsls	r3, r1, #3
 8005d1c:	4651      	mov	r1, sl
 8005d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d22:	4651      	mov	r1, sl
 8005d24:	00ca      	lsls	r2, r1, #3
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	189b      	adds	r3, r3, r2
 8005d30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d32:	464b      	mov	r3, r9
 8005d34:	460a      	mov	r2, r1
 8005d36:	eb42 0303 	adc.w	r3, r2, r3
 8005d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d46:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d54:	4649      	mov	r1, r9
 8005d56:	008b      	lsls	r3, r1, #2
 8005d58:	4641      	mov	r1, r8
 8005d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d5e:	4641      	mov	r1, r8
 8005d60:	008a      	lsls	r2, r1, #2
 8005d62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d66:	f7fa ff27 	bl	8000bb8 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <UART_SetConfig+0x4e4>)
 8005d70:	fba3 1302 	umull	r1, r3, r3, r2
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	2164      	movs	r1, #100	@ 0x64
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	3332      	adds	r3, #50	@ 0x32
 8005d82:	4a08      	ldr	r2, [pc, #32]	@ (8005da4 <UART_SetConfig+0x4e4>)
 8005d84:	fba2 2303 	umull	r2, r3, r2, r3
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	f003 020f 	and.w	r2, r3, #15
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4422      	add	r2, r4
 8005d96:	609a      	str	r2, [r3, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da4:	51eb851f 	.word	0x51eb851f

08005da8 <__cvt>:
 8005da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dac:	ec57 6b10 	vmov	r6, r7, d0
 8005db0:	2f00      	cmp	r7, #0
 8005db2:	460c      	mov	r4, r1
 8005db4:	4619      	mov	r1, r3
 8005db6:	463b      	mov	r3, r7
 8005db8:	bfbb      	ittet	lt
 8005dba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005dbe:	461f      	movlt	r7, r3
 8005dc0:	2300      	movge	r3, #0
 8005dc2:	232d      	movlt	r3, #45	@ 0x2d
 8005dc4:	700b      	strb	r3, [r1, #0]
 8005dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dc8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005dcc:	4691      	mov	r9, r2
 8005dce:	f023 0820 	bic.w	r8, r3, #32
 8005dd2:	bfbc      	itt	lt
 8005dd4:	4632      	movlt	r2, r6
 8005dd6:	4616      	movlt	r6, r2
 8005dd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ddc:	d005      	beq.n	8005dea <__cvt+0x42>
 8005dde:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005de2:	d100      	bne.n	8005de6 <__cvt+0x3e>
 8005de4:	3401      	adds	r4, #1
 8005de6:	2102      	movs	r1, #2
 8005de8:	e000      	b.n	8005dec <__cvt+0x44>
 8005dea:	2103      	movs	r1, #3
 8005dec:	ab03      	add	r3, sp, #12
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	ab02      	add	r3, sp, #8
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	ec47 6b10 	vmov	d0, r6, r7
 8005df8:	4653      	mov	r3, sl
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	f000 ff3c 	bl	8006c78 <_dtoa_r>
 8005e00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e04:	4605      	mov	r5, r0
 8005e06:	d119      	bne.n	8005e3c <__cvt+0x94>
 8005e08:	f019 0f01 	tst.w	r9, #1
 8005e0c:	d00e      	beq.n	8005e2c <__cvt+0x84>
 8005e0e:	eb00 0904 	add.w	r9, r0, r4
 8005e12:	2200      	movs	r2, #0
 8005e14:	2300      	movs	r3, #0
 8005e16:	4630      	mov	r0, r6
 8005e18:	4639      	mov	r1, r7
 8005e1a:	f7fa fe5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e1e:	b108      	cbz	r0, 8005e24 <__cvt+0x7c>
 8005e20:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e24:	2230      	movs	r2, #48	@ 0x30
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	454b      	cmp	r3, r9
 8005e2a:	d31e      	bcc.n	8005e6a <__cvt+0xc2>
 8005e2c:	9b03      	ldr	r3, [sp, #12]
 8005e2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e30:	1b5b      	subs	r3, r3, r5
 8005e32:	4628      	mov	r0, r5
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	b004      	add	sp, #16
 8005e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e40:	eb00 0904 	add.w	r9, r0, r4
 8005e44:	d1e5      	bne.n	8005e12 <__cvt+0x6a>
 8005e46:	7803      	ldrb	r3, [r0, #0]
 8005e48:	2b30      	cmp	r3, #48	@ 0x30
 8005e4a:	d10a      	bne.n	8005e62 <__cvt+0xba>
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2300      	movs	r3, #0
 8005e50:	4630      	mov	r0, r6
 8005e52:	4639      	mov	r1, r7
 8005e54:	f7fa fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e58:	b918      	cbnz	r0, 8005e62 <__cvt+0xba>
 8005e5a:	f1c4 0401 	rsb	r4, r4, #1
 8005e5e:	f8ca 4000 	str.w	r4, [sl]
 8005e62:	f8da 3000 	ldr.w	r3, [sl]
 8005e66:	4499      	add	r9, r3
 8005e68:	e7d3      	b.n	8005e12 <__cvt+0x6a>
 8005e6a:	1c59      	adds	r1, r3, #1
 8005e6c:	9103      	str	r1, [sp, #12]
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	e7d9      	b.n	8005e26 <__cvt+0x7e>

08005e72 <__exponent>:
 8005e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e74:	2900      	cmp	r1, #0
 8005e76:	bfba      	itte	lt
 8005e78:	4249      	neglt	r1, r1
 8005e7a:	232d      	movlt	r3, #45	@ 0x2d
 8005e7c:	232b      	movge	r3, #43	@ 0x2b
 8005e7e:	2909      	cmp	r1, #9
 8005e80:	7002      	strb	r2, [r0, #0]
 8005e82:	7043      	strb	r3, [r0, #1]
 8005e84:	dd29      	ble.n	8005eda <__exponent+0x68>
 8005e86:	f10d 0307 	add.w	r3, sp, #7
 8005e8a:	461d      	mov	r5, r3
 8005e8c:	270a      	movs	r7, #10
 8005e8e:	461a      	mov	r2, r3
 8005e90:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e94:	fb07 1416 	mls	r4, r7, r6, r1
 8005e98:	3430      	adds	r4, #48	@ 0x30
 8005e9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	2c63      	cmp	r4, #99	@ 0x63
 8005ea2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	dcf1      	bgt.n	8005e8e <__exponent+0x1c>
 8005eaa:	3130      	adds	r1, #48	@ 0x30
 8005eac:	1e94      	subs	r4, r2, #2
 8005eae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005eb2:	1c41      	adds	r1, r0, #1
 8005eb4:	4623      	mov	r3, r4
 8005eb6:	42ab      	cmp	r3, r5
 8005eb8:	d30a      	bcc.n	8005ed0 <__exponent+0x5e>
 8005eba:	f10d 0309 	add.w	r3, sp, #9
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	42ac      	cmp	r4, r5
 8005ec2:	bf88      	it	hi
 8005ec4:	2300      	movhi	r3, #0
 8005ec6:	3302      	adds	r3, #2
 8005ec8:	4403      	add	r3, r0
 8005eca:	1a18      	subs	r0, r3, r0
 8005ecc:	b003      	add	sp, #12
 8005ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ed4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ed8:	e7ed      	b.n	8005eb6 <__exponent+0x44>
 8005eda:	2330      	movs	r3, #48	@ 0x30
 8005edc:	3130      	adds	r1, #48	@ 0x30
 8005ede:	7083      	strb	r3, [r0, #2]
 8005ee0:	70c1      	strb	r1, [r0, #3]
 8005ee2:	1d03      	adds	r3, r0, #4
 8005ee4:	e7f1      	b.n	8005eca <__exponent+0x58>
	...

08005ee8 <_printf_float>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	b08d      	sub	sp, #52	@ 0x34
 8005eee:	460c      	mov	r4, r1
 8005ef0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	461f      	mov	r7, r3
 8005ef8:	4605      	mov	r5, r0
 8005efa:	f000 fdbd 	bl	8006a78 <_localeconv_r>
 8005efe:	6803      	ldr	r3, [r0, #0]
 8005f00:	9304      	str	r3, [sp, #16]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fa f9bc 	bl	8000280 <strlen>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f10:	9005      	str	r0, [sp, #20]
 8005f12:	3307      	adds	r3, #7
 8005f14:	f023 0307 	bic.w	r3, r3, #7
 8005f18:	f103 0208 	add.w	r2, r3, #8
 8005f1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f20:	f8d4 b000 	ldr.w	fp, [r4]
 8005f24:	f8c8 2000 	str.w	r2, [r8]
 8005f28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f30:	9307      	str	r3, [sp, #28]
 8005f32:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f3e:	4b9c      	ldr	r3, [pc, #624]	@ (80061b0 <_printf_float+0x2c8>)
 8005f40:	f04f 32ff 	mov.w	r2, #4294967295
 8005f44:	f7fa fdfa 	bl	8000b3c <__aeabi_dcmpun>
 8005f48:	bb70      	cbnz	r0, 8005fa8 <_printf_float+0xc0>
 8005f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f4e:	4b98      	ldr	r3, [pc, #608]	@ (80061b0 <_printf_float+0x2c8>)
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295
 8005f54:	f7fa fdd4 	bl	8000b00 <__aeabi_dcmple>
 8005f58:	bb30      	cbnz	r0, 8005fa8 <_printf_float+0xc0>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa fdc3 	bl	8000aec <__aeabi_dcmplt>
 8005f66:	b110      	cbz	r0, 8005f6e <_printf_float+0x86>
 8005f68:	232d      	movs	r3, #45	@ 0x2d
 8005f6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f6e:	4a91      	ldr	r2, [pc, #580]	@ (80061b4 <_printf_float+0x2cc>)
 8005f70:	4b91      	ldr	r3, [pc, #580]	@ (80061b8 <_printf_float+0x2d0>)
 8005f72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f76:	bf8c      	ite	hi
 8005f78:	4690      	movhi	r8, r2
 8005f7a:	4698      	movls	r8, r3
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	6123      	str	r3, [r4, #16]
 8005f80:	f02b 0304 	bic.w	r3, fp, #4
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	f04f 0900 	mov.w	r9, #0
 8005f8a:	9700      	str	r7, [sp, #0]
 8005f8c:	4633      	mov	r3, r6
 8005f8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f90:	4621      	mov	r1, r4
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 f9d2 	bl	800633c <_printf_common>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f040 808d 	bne.w	80060b8 <_printf_float+0x1d0>
 8005f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa2:	b00d      	add	sp, #52	@ 0x34
 8005fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa8:	4642      	mov	r2, r8
 8005faa:	464b      	mov	r3, r9
 8005fac:	4640      	mov	r0, r8
 8005fae:	4649      	mov	r1, r9
 8005fb0:	f7fa fdc4 	bl	8000b3c <__aeabi_dcmpun>
 8005fb4:	b140      	cbz	r0, 8005fc8 <_printf_float+0xe0>
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bfbc      	itt	lt
 8005fbc:	232d      	movlt	r3, #45	@ 0x2d
 8005fbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80061bc <_printf_float+0x2d4>)
 8005fc4:	4b7e      	ldr	r3, [pc, #504]	@ (80061c0 <_printf_float+0x2d8>)
 8005fc6:	e7d4      	b.n	8005f72 <_printf_float+0x8a>
 8005fc8:	6863      	ldr	r3, [r4, #4]
 8005fca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005fce:	9206      	str	r2, [sp, #24]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	d13b      	bne.n	800604c <_printf_float+0x164>
 8005fd4:	2306      	movs	r3, #6
 8005fd6:	6063      	str	r3, [r4, #4]
 8005fd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6022      	str	r2, [r4, #0]
 8005fe0:	9303      	str	r3, [sp, #12]
 8005fe2:	ab0a      	add	r3, sp, #40	@ 0x28
 8005fe4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005fe8:	ab09      	add	r3, sp, #36	@ 0x24
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	6861      	ldr	r1, [r4, #4]
 8005fee:	ec49 8b10 	vmov	d0, r8, r9
 8005ff2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f7ff fed6 	bl	8005da8 <__cvt>
 8005ffc:	9b06      	ldr	r3, [sp, #24]
 8005ffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006000:	2b47      	cmp	r3, #71	@ 0x47
 8006002:	4680      	mov	r8, r0
 8006004:	d129      	bne.n	800605a <_printf_float+0x172>
 8006006:	1cc8      	adds	r0, r1, #3
 8006008:	db02      	blt.n	8006010 <_printf_float+0x128>
 800600a:	6863      	ldr	r3, [r4, #4]
 800600c:	4299      	cmp	r1, r3
 800600e:	dd41      	ble.n	8006094 <_printf_float+0x1ac>
 8006010:	f1aa 0a02 	sub.w	sl, sl, #2
 8006014:	fa5f fa8a 	uxtb.w	sl, sl
 8006018:	3901      	subs	r1, #1
 800601a:	4652      	mov	r2, sl
 800601c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006020:	9109      	str	r1, [sp, #36]	@ 0x24
 8006022:	f7ff ff26 	bl	8005e72 <__exponent>
 8006026:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006028:	1813      	adds	r3, r2, r0
 800602a:	2a01      	cmp	r2, #1
 800602c:	4681      	mov	r9, r0
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	dc02      	bgt.n	8006038 <_printf_float+0x150>
 8006032:	6822      	ldr	r2, [r4, #0]
 8006034:	07d2      	lsls	r2, r2, #31
 8006036:	d501      	bpl.n	800603c <_printf_float+0x154>
 8006038:	3301      	adds	r3, #1
 800603a:	6123      	str	r3, [r4, #16]
 800603c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0a2      	beq.n	8005f8a <_printf_float+0xa2>
 8006044:	232d      	movs	r3, #45	@ 0x2d
 8006046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800604a:	e79e      	b.n	8005f8a <_printf_float+0xa2>
 800604c:	9a06      	ldr	r2, [sp, #24]
 800604e:	2a47      	cmp	r2, #71	@ 0x47
 8006050:	d1c2      	bne.n	8005fd8 <_printf_float+0xf0>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1c0      	bne.n	8005fd8 <_printf_float+0xf0>
 8006056:	2301      	movs	r3, #1
 8006058:	e7bd      	b.n	8005fd6 <_printf_float+0xee>
 800605a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800605e:	d9db      	bls.n	8006018 <_printf_float+0x130>
 8006060:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006064:	d118      	bne.n	8006098 <_printf_float+0x1b0>
 8006066:	2900      	cmp	r1, #0
 8006068:	6863      	ldr	r3, [r4, #4]
 800606a:	dd0b      	ble.n	8006084 <_printf_float+0x19c>
 800606c:	6121      	str	r1, [r4, #16]
 800606e:	b913      	cbnz	r3, 8006076 <_printf_float+0x18e>
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	07d0      	lsls	r0, r2, #31
 8006074:	d502      	bpl.n	800607c <_printf_float+0x194>
 8006076:	3301      	adds	r3, #1
 8006078:	440b      	add	r3, r1
 800607a:	6123      	str	r3, [r4, #16]
 800607c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800607e:	f04f 0900 	mov.w	r9, #0
 8006082:	e7db      	b.n	800603c <_printf_float+0x154>
 8006084:	b913      	cbnz	r3, 800608c <_printf_float+0x1a4>
 8006086:	6822      	ldr	r2, [r4, #0]
 8006088:	07d2      	lsls	r2, r2, #31
 800608a:	d501      	bpl.n	8006090 <_printf_float+0x1a8>
 800608c:	3302      	adds	r3, #2
 800608e:	e7f4      	b.n	800607a <_printf_float+0x192>
 8006090:	2301      	movs	r3, #1
 8006092:	e7f2      	b.n	800607a <_printf_float+0x192>
 8006094:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800609a:	4299      	cmp	r1, r3
 800609c:	db05      	blt.n	80060aa <_printf_float+0x1c2>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	6121      	str	r1, [r4, #16]
 80060a2:	07d8      	lsls	r0, r3, #31
 80060a4:	d5ea      	bpl.n	800607c <_printf_float+0x194>
 80060a6:	1c4b      	adds	r3, r1, #1
 80060a8:	e7e7      	b.n	800607a <_printf_float+0x192>
 80060aa:	2900      	cmp	r1, #0
 80060ac:	bfd4      	ite	le
 80060ae:	f1c1 0202 	rsble	r2, r1, #2
 80060b2:	2201      	movgt	r2, #1
 80060b4:	4413      	add	r3, r2
 80060b6:	e7e0      	b.n	800607a <_printf_float+0x192>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	055a      	lsls	r2, r3, #21
 80060bc:	d407      	bmi.n	80060ce <_printf_float+0x1e6>
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	4642      	mov	r2, r8
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	d12b      	bne.n	8006124 <_printf_float+0x23c>
 80060cc:	e767      	b.n	8005f9e <_printf_float+0xb6>
 80060ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060d2:	f240 80dd 	bls.w	8006290 <_printf_float+0x3a8>
 80060d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80060da:	2200      	movs	r2, #0
 80060dc:	2300      	movs	r3, #0
 80060de:	f7fa fcfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d033      	beq.n	800614e <_printf_float+0x266>
 80060e6:	4a37      	ldr	r2, [pc, #220]	@ (80061c4 <_printf_float+0x2dc>)
 80060e8:	2301      	movs	r3, #1
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	f43f af54 	beq.w	8005f9e <_printf_float+0xb6>
 80060f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80060fa:	4543      	cmp	r3, r8
 80060fc:	db02      	blt.n	8006104 <_printf_float+0x21c>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	07d8      	lsls	r0, r3, #31
 8006102:	d50f      	bpl.n	8006124 <_printf_float+0x23c>
 8006104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	f43f af45 	beq.w	8005f9e <_printf_float+0xb6>
 8006114:	f04f 0900 	mov.w	r9, #0
 8006118:	f108 38ff 	add.w	r8, r8, #4294967295
 800611c:	f104 0a1a 	add.w	sl, r4, #26
 8006120:	45c8      	cmp	r8, r9
 8006122:	dc09      	bgt.n	8006138 <_printf_float+0x250>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	079b      	lsls	r3, r3, #30
 8006128:	f100 8103 	bmi.w	8006332 <_printf_float+0x44a>
 800612c:	68e0      	ldr	r0, [r4, #12]
 800612e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006130:	4298      	cmp	r0, r3
 8006132:	bfb8      	it	lt
 8006134:	4618      	movlt	r0, r3
 8006136:	e734      	b.n	8005fa2 <_printf_float+0xba>
 8006138:	2301      	movs	r3, #1
 800613a:	4652      	mov	r2, sl
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	f43f af2b 	beq.w	8005f9e <_printf_float+0xb6>
 8006148:	f109 0901 	add.w	r9, r9, #1
 800614c:	e7e8      	b.n	8006120 <_printf_float+0x238>
 800614e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006150:	2b00      	cmp	r3, #0
 8006152:	dc39      	bgt.n	80061c8 <_printf_float+0x2e0>
 8006154:	4a1b      	ldr	r2, [pc, #108]	@ (80061c4 <_printf_float+0x2dc>)
 8006156:	2301      	movs	r3, #1
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	f43f af1d 	beq.w	8005f9e <_printf_float+0xb6>
 8006164:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006168:	ea59 0303 	orrs.w	r3, r9, r3
 800616c:	d102      	bne.n	8006174 <_printf_float+0x28c>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	07d9      	lsls	r1, r3, #31
 8006172:	d5d7      	bpl.n	8006124 <_printf_float+0x23c>
 8006174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006178:	4631      	mov	r1, r6
 800617a:	4628      	mov	r0, r5
 800617c:	47b8      	blx	r7
 800617e:	3001      	adds	r0, #1
 8006180:	f43f af0d 	beq.w	8005f9e <_printf_float+0xb6>
 8006184:	f04f 0a00 	mov.w	sl, #0
 8006188:	f104 0b1a 	add.w	fp, r4, #26
 800618c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800618e:	425b      	negs	r3, r3
 8006190:	4553      	cmp	r3, sl
 8006192:	dc01      	bgt.n	8006198 <_printf_float+0x2b0>
 8006194:	464b      	mov	r3, r9
 8006196:	e793      	b.n	80060c0 <_printf_float+0x1d8>
 8006198:	2301      	movs	r3, #1
 800619a:	465a      	mov	r2, fp
 800619c:	4631      	mov	r1, r6
 800619e:	4628      	mov	r0, r5
 80061a0:	47b8      	blx	r7
 80061a2:	3001      	adds	r0, #1
 80061a4:	f43f aefb 	beq.w	8005f9e <_printf_float+0xb6>
 80061a8:	f10a 0a01 	add.w	sl, sl, #1
 80061ac:	e7ee      	b.n	800618c <_printf_float+0x2a4>
 80061ae:	bf00      	nop
 80061b0:	7fefffff 	.word	0x7fefffff
 80061b4:	080088dc 	.word	0x080088dc
 80061b8:	080088d8 	.word	0x080088d8
 80061bc:	080088e4 	.word	0x080088e4
 80061c0:	080088e0 	.word	0x080088e0
 80061c4:	080088e8 	.word	0x080088e8
 80061c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061ce:	4553      	cmp	r3, sl
 80061d0:	bfa8      	it	ge
 80061d2:	4653      	movge	r3, sl
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	4699      	mov	r9, r3
 80061d8:	dc36      	bgt.n	8006248 <_printf_float+0x360>
 80061da:	f04f 0b00 	mov.w	fp, #0
 80061de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061e2:	f104 021a 	add.w	r2, r4, #26
 80061e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061e8:	9306      	str	r3, [sp, #24]
 80061ea:	eba3 0309 	sub.w	r3, r3, r9
 80061ee:	455b      	cmp	r3, fp
 80061f0:	dc31      	bgt.n	8006256 <_printf_float+0x36e>
 80061f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f4:	459a      	cmp	sl, r3
 80061f6:	dc3a      	bgt.n	800626e <_printf_float+0x386>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	07da      	lsls	r2, r3, #31
 80061fc:	d437      	bmi.n	800626e <_printf_float+0x386>
 80061fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006200:	ebaa 0903 	sub.w	r9, sl, r3
 8006204:	9b06      	ldr	r3, [sp, #24]
 8006206:	ebaa 0303 	sub.w	r3, sl, r3
 800620a:	4599      	cmp	r9, r3
 800620c:	bfa8      	it	ge
 800620e:	4699      	movge	r9, r3
 8006210:	f1b9 0f00 	cmp.w	r9, #0
 8006214:	dc33      	bgt.n	800627e <_printf_float+0x396>
 8006216:	f04f 0800 	mov.w	r8, #0
 800621a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800621e:	f104 0b1a 	add.w	fp, r4, #26
 8006222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006224:	ebaa 0303 	sub.w	r3, sl, r3
 8006228:	eba3 0309 	sub.w	r3, r3, r9
 800622c:	4543      	cmp	r3, r8
 800622e:	f77f af79 	ble.w	8006124 <_printf_float+0x23c>
 8006232:	2301      	movs	r3, #1
 8006234:	465a      	mov	r2, fp
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	f43f aeae 	beq.w	8005f9e <_printf_float+0xb6>
 8006242:	f108 0801 	add.w	r8, r8, #1
 8006246:	e7ec      	b.n	8006222 <_printf_float+0x33a>
 8006248:	4642      	mov	r2, r8
 800624a:	4631      	mov	r1, r6
 800624c:	4628      	mov	r0, r5
 800624e:	47b8      	blx	r7
 8006250:	3001      	adds	r0, #1
 8006252:	d1c2      	bne.n	80061da <_printf_float+0x2f2>
 8006254:	e6a3      	b.n	8005f9e <_printf_float+0xb6>
 8006256:	2301      	movs	r3, #1
 8006258:	4631      	mov	r1, r6
 800625a:	4628      	mov	r0, r5
 800625c:	9206      	str	r2, [sp, #24]
 800625e:	47b8      	blx	r7
 8006260:	3001      	adds	r0, #1
 8006262:	f43f ae9c 	beq.w	8005f9e <_printf_float+0xb6>
 8006266:	9a06      	ldr	r2, [sp, #24]
 8006268:	f10b 0b01 	add.w	fp, fp, #1
 800626c:	e7bb      	b.n	80061e6 <_printf_float+0x2fe>
 800626e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006272:	4631      	mov	r1, r6
 8006274:	4628      	mov	r0, r5
 8006276:	47b8      	blx	r7
 8006278:	3001      	adds	r0, #1
 800627a:	d1c0      	bne.n	80061fe <_printf_float+0x316>
 800627c:	e68f      	b.n	8005f9e <_printf_float+0xb6>
 800627e:	9a06      	ldr	r2, [sp, #24]
 8006280:	464b      	mov	r3, r9
 8006282:	4442      	add	r2, r8
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	d1c3      	bne.n	8006216 <_printf_float+0x32e>
 800628e:	e686      	b.n	8005f9e <_printf_float+0xb6>
 8006290:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006294:	f1ba 0f01 	cmp.w	sl, #1
 8006298:	dc01      	bgt.n	800629e <_printf_float+0x3b6>
 800629a:	07db      	lsls	r3, r3, #31
 800629c:	d536      	bpl.n	800630c <_printf_float+0x424>
 800629e:	2301      	movs	r3, #1
 80062a0:	4642      	mov	r2, r8
 80062a2:	4631      	mov	r1, r6
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b8      	blx	r7
 80062a8:	3001      	adds	r0, #1
 80062aa:	f43f ae78 	beq.w	8005f9e <_printf_float+0xb6>
 80062ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	f43f ae70 	beq.w	8005f9e <_printf_float+0xb6>
 80062be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062c2:	2200      	movs	r2, #0
 80062c4:	2300      	movs	r3, #0
 80062c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062ca:	f7fa fc05 	bl	8000ad8 <__aeabi_dcmpeq>
 80062ce:	b9c0      	cbnz	r0, 8006302 <_printf_float+0x41a>
 80062d0:	4653      	mov	r3, sl
 80062d2:	f108 0201 	add.w	r2, r8, #1
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	47b8      	blx	r7
 80062dc:	3001      	adds	r0, #1
 80062de:	d10c      	bne.n	80062fa <_printf_float+0x412>
 80062e0:	e65d      	b.n	8005f9e <_printf_float+0xb6>
 80062e2:	2301      	movs	r3, #1
 80062e4:	465a      	mov	r2, fp
 80062e6:	4631      	mov	r1, r6
 80062e8:	4628      	mov	r0, r5
 80062ea:	47b8      	blx	r7
 80062ec:	3001      	adds	r0, #1
 80062ee:	f43f ae56 	beq.w	8005f9e <_printf_float+0xb6>
 80062f2:	f108 0801 	add.w	r8, r8, #1
 80062f6:	45d0      	cmp	r8, sl
 80062f8:	dbf3      	blt.n	80062e2 <_printf_float+0x3fa>
 80062fa:	464b      	mov	r3, r9
 80062fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006300:	e6df      	b.n	80060c2 <_printf_float+0x1da>
 8006302:	f04f 0800 	mov.w	r8, #0
 8006306:	f104 0b1a 	add.w	fp, r4, #26
 800630a:	e7f4      	b.n	80062f6 <_printf_float+0x40e>
 800630c:	2301      	movs	r3, #1
 800630e:	4642      	mov	r2, r8
 8006310:	e7e1      	b.n	80062d6 <_printf_float+0x3ee>
 8006312:	2301      	movs	r3, #1
 8006314:	464a      	mov	r2, r9
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	f43f ae3e 	beq.w	8005f9e <_printf_float+0xb6>
 8006322:	f108 0801 	add.w	r8, r8, #1
 8006326:	68e3      	ldr	r3, [r4, #12]
 8006328:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800632a:	1a5b      	subs	r3, r3, r1
 800632c:	4543      	cmp	r3, r8
 800632e:	dcf0      	bgt.n	8006312 <_printf_float+0x42a>
 8006330:	e6fc      	b.n	800612c <_printf_float+0x244>
 8006332:	f04f 0800 	mov.w	r8, #0
 8006336:	f104 0919 	add.w	r9, r4, #25
 800633a:	e7f4      	b.n	8006326 <_printf_float+0x43e>

0800633c <_printf_common>:
 800633c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006340:	4616      	mov	r6, r2
 8006342:	4698      	mov	r8, r3
 8006344:	688a      	ldr	r2, [r1, #8]
 8006346:	690b      	ldr	r3, [r1, #16]
 8006348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800634c:	4293      	cmp	r3, r2
 800634e:	bfb8      	it	lt
 8006350:	4613      	movlt	r3, r2
 8006352:	6033      	str	r3, [r6, #0]
 8006354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006358:	4607      	mov	r7, r0
 800635a:	460c      	mov	r4, r1
 800635c:	b10a      	cbz	r2, 8006362 <_printf_common+0x26>
 800635e:	3301      	adds	r3, #1
 8006360:	6033      	str	r3, [r6, #0]
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	0699      	lsls	r1, r3, #26
 8006366:	bf42      	ittt	mi
 8006368:	6833      	ldrmi	r3, [r6, #0]
 800636a:	3302      	addmi	r3, #2
 800636c:	6033      	strmi	r3, [r6, #0]
 800636e:	6825      	ldr	r5, [r4, #0]
 8006370:	f015 0506 	ands.w	r5, r5, #6
 8006374:	d106      	bne.n	8006384 <_printf_common+0x48>
 8006376:	f104 0a19 	add.w	sl, r4, #25
 800637a:	68e3      	ldr	r3, [r4, #12]
 800637c:	6832      	ldr	r2, [r6, #0]
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	42ab      	cmp	r3, r5
 8006382:	dc26      	bgt.n	80063d2 <_printf_common+0x96>
 8006384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006388:	6822      	ldr	r2, [r4, #0]
 800638a:	3b00      	subs	r3, #0
 800638c:	bf18      	it	ne
 800638e:	2301      	movne	r3, #1
 8006390:	0692      	lsls	r2, r2, #26
 8006392:	d42b      	bmi.n	80063ec <_printf_common+0xb0>
 8006394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006398:	4641      	mov	r1, r8
 800639a:	4638      	mov	r0, r7
 800639c:	47c8      	blx	r9
 800639e:	3001      	adds	r0, #1
 80063a0:	d01e      	beq.n	80063e0 <_printf_common+0xa4>
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	6922      	ldr	r2, [r4, #16]
 80063a6:	f003 0306 	and.w	r3, r3, #6
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	bf02      	ittt	eq
 80063ae:	68e5      	ldreq	r5, [r4, #12]
 80063b0:	6833      	ldreq	r3, [r6, #0]
 80063b2:	1aed      	subeq	r5, r5, r3
 80063b4:	68a3      	ldr	r3, [r4, #8]
 80063b6:	bf0c      	ite	eq
 80063b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063bc:	2500      	movne	r5, #0
 80063be:	4293      	cmp	r3, r2
 80063c0:	bfc4      	itt	gt
 80063c2:	1a9b      	subgt	r3, r3, r2
 80063c4:	18ed      	addgt	r5, r5, r3
 80063c6:	2600      	movs	r6, #0
 80063c8:	341a      	adds	r4, #26
 80063ca:	42b5      	cmp	r5, r6
 80063cc:	d11a      	bne.n	8006404 <_printf_common+0xc8>
 80063ce:	2000      	movs	r0, #0
 80063d0:	e008      	b.n	80063e4 <_printf_common+0xa8>
 80063d2:	2301      	movs	r3, #1
 80063d4:	4652      	mov	r2, sl
 80063d6:	4641      	mov	r1, r8
 80063d8:	4638      	mov	r0, r7
 80063da:	47c8      	blx	r9
 80063dc:	3001      	adds	r0, #1
 80063de:	d103      	bne.n	80063e8 <_printf_common+0xac>
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e8:	3501      	adds	r5, #1
 80063ea:	e7c6      	b.n	800637a <_printf_common+0x3e>
 80063ec:	18e1      	adds	r1, r4, r3
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	2030      	movs	r0, #48	@ 0x30
 80063f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063f6:	4422      	add	r2, r4
 80063f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006400:	3302      	adds	r3, #2
 8006402:	e7c7      	b.n	8006394 <_printf_common+0x58>
 8006404:	2301      	movs	r3, #1
 8006406:	4622      	mov	r2, r4
 8006408:	4641      	mov	r1, r8
 800640a:	4638      	mov	r0, r7
 800640c:	47c8      	blx	r9
 800640e:	3001      	adds	r0, #1
 8006410:	d0e6      	beq.n	80063e0 <_printf_common+0xa4>
 8006412:	3601      	adds	r6, #1
 8006414:	e7d9      	b.n	80063ca <_printf_common+0x8e>
	...

08006418 <_printf_i>:
 8006418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800641c:	7e0f      	ldrb	r7, [r1, #24]
 800641e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006420:	2f78      	cmp	r7, #120	@ 0x78
 8006422:	4691      	mov	r9, r2
 8006424:	4680      	mov	r8, r0
 8006426:	460c      	mov	r4, r1
 8006428:	469a      	mov	sl, r3
 800642a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800642e:	d807      	bhi.n	8006440 <_printf_i+0x28>
 8006430:	2f62      	cmp	r7, #98	@ 0x62
 8006432:	d80a      	bhi.n	800644a <_printf_i+0x32>
 8006434:	2f00      	cmp	r7, #0
 8006436:	f000 80d1 	beq.w	80065dc <_printf_i+0x1c4>
 800643a:	2f58      	cmp	r7, #88	@ 0x58
 800643c:	f000 80b8 	beq.w	80065b0 <_printf_i+0x198>
 8006440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006448:	e03a      	b.n	80064c0 <_printf_i+0xa8>
 800644a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800644e:	2b15      	cmp	r3, #21
 8006450:	d8f6      	bhi.n	8006440 <_printf_i+0x28>
 8006452:	a101      	add	r1, pc, #4	@ (adr r1, 8006458 <_printf_i+0x40>)
 8006454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006458:	080064b1 	.word	0x080064b1
 800645c:	080064c5 	.word	0x080064c5
 8006460:	08006441 	.word	0x08006441
 8006464:	08006441 	.word	0x08006441
 8006468:	08006441 	.word	0x08006441
 800646c:	08006441 	.word	0x08006441
 8006470:	080064c5 	.word	0x080064c5
 8006474:	08006441 	.word	0x08006441
 8006478:	08006441 	.word	0x08006441
 800647c:	08006441 	.word	0x08006441
 8006480:	08006441 	.word	0x08006441
 8006484:	080065c3 	.word	0x080065c3
 8006488:	080064ef 	.word	0x080064ef
 800648c:	0800657d 	.word	0x0800657d
 8006490:	08006441 	.word	0x08006441
 8006494:	08006441 	.word	0x08006441
 8006498:	080065e5 	.word	0x080065e5
 800649c:	08006441 	.word	0x08006441
 80064a0:	080064ef 	.word	0x080064ef
 80064a4:	08006441 	.word	0x08006441
 80064a8:	08006441 	.word	0x08006441
 80064ac:	08006585 	.word	0x08006585
 80064b0:	6833      	ldr	r3, [r6, #0]
 80064b2:	1d1a      	adds	r2, r3, #4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6032      	str	r2, [r6, #0]
 80064b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064c0:	2301      	movs	r3, #1
 80064c2:	e09c      	b.n	80065fe <_printf_i+0x1e6>
 80064c4:	6833      	ldr	r3, [r6, #0]
 80064c6:	6820      	ldr	r0, [r4, #0]
 80064c8:	1d19      	adds	r1, r3, #4
 80064ca:	6031      	str	r1, [r6, #0]
 80064cc:	0606      	lsls	r6, r0, #24
 80064ce:	d501      	bpl.n	80064d4 <_printf_i+0xbc>
 80064d0:	681d      	ldr	r5, [r3, #0]
 80064d2:	e003      	b.n	80064dc <_printf_i+0xc4>
 80064d4:	0645      	lsls	r5, r0, #25
 80064d6:	d5fb      	bpl.n	80064d0 <_printf_i+0xb8>
 80064d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064dc:	2d00      	cmp	r5, #0
 80064de:	da03      	bge.n	80064e8 <_printf_i+0xd0>
 80064e0:	232d      	movs	r3, #45	@ 0x2d
 80064e2:	426d      	negs	r5, r5
 80064e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064e8:	4858      	ldr	r0, [pc, #352]	@ (800664c <_printf_i+0x234>)
 80064ea:	230a      	movs	r3, #10
 80064ec:	e011      	b.n	8006512 <_printf_i+0xfa>
 80064ee:	6821      	ldr	r1, [r4, #0]
 80064f0:	6833      	ldr	r3, [r6, #0]
 80064f2:	0608      	lsls	r0, r1, #24
 80064f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80064f8:	d402      	bmi.n	8006500 <_printf_i+0xe8>
 80064fa:	0649      	lsls	r1, r1, #25
 80064fc:	bf48      	it	mi
 80064fe:	b2ad      	uxthmi	r5, r5
 8006500:	2f6f      	cmp	r7, #111	@ 0x6f
 8006502:	4852      	ldr	r0, [pc, #328]	@ (800664c <_printf_i+0x234>)
 8006504:	6033      	str	r3, [r6, #0]
 8006506:	bf14      	ite	ne
 8006508:	230a      	movne	r3, #10
 800650a:	2308      	moveq	r3, #8
 800650c:	2100      	movs	r1, #0
 800650e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006512:	6866      	ldr	r6, [r4, #4]
 8006514:	60a6      	str	r6, [r4, #8]
 8006516:	2e00      	cmp	r6, #0
 8006518:	db05      	blt.n	8006526 <_printf_i+0x10e>
 800651a:	6821      	ldr	r1, [r4, #0]
 800651c:	432e      	orrs	r6, r5
 800651e:	f021 0104 	bic.w	r1, r1, #4
 8006522:	6021      	str	r1, [r4, #0]
 8006524:	d04b      	beq.n	80065be <_printf_i+0x1a6>
 8006526:	4616      	mov	r6, r2
 8006528:	fbb5 f1f3 	udiv	r1, r5, r3
 800652c:	fb03 5711 	mls	r7, r3, r1, r5
 8006530:	5dc7      	ldrb	r7, [r0, r7]
 8006532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006536:	462f      	mov	r7, r5
 8006538:	42bb      	cmp	r3, r7
 800653a:	460d      	mov	r5, r1
 800653c:	d9f4      	bls.n	8006528 <_printf_i+0x110>
 800653e:	2b08      	cmp	r3, #8
 8006540:	d10b      	bne.n	800655a <_printf_i+0x142>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	07df      	lsls	r7, r3, #31
 8006546:	d508      	bpl.n	800655a <_printf_i+0x142>
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	6861      	ldr	r1, [r4, #4]
 800654c:	4299      	cmp	r1, r3
 800654e:	bfde      	ittt	le
 8006550:	2330      	movle	r3, #48	@ 0x30
 8006552:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006556:	f106 36ff 	addle.w	r6, r6, #4294967295
 800655a:	1b92      	subs	r2, r2, r6
 800655c:	6122      	str	r2, [r4, #16]
 800655e:	f8cd a000 	str.w	sl, [sp]
 8006562:	464b      	mov	r3, r9
 8006564:	aa03      	add	r2, sp, #12
 8006566:	4621      	mov	r1, r4
 8006568:	4640      	mov	r0, r8
 800656a:	f7ff fee7 	bl	800633c <_printf_common>
 800656e:	3001      	adds	r0, #1
 8006570:	d14a      	bne.n	8006608 <_printf_i+0x1f0>
 8006572:	f04f 30ff 	mov.w	r0, #4294967295
 8006576:	b004      	add	sp, #16
 8006578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	f043 0320 	orr.w	r3, r3, #32
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	4832      	ldr	r0, [pc, #200]	@ (8006650 <_printf_i+0x238>)
 8006586:	2778      	movs	r7, #120	@ 0x78
 8006588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	6831      	ldr	r1, [r6, #0]
 8006590:	061f      	lsls	r7, r3, #24
 8006592:	f851 5b04 	ldr.w	r5, [r1], #4
 8006596:	d402      	bmi.n	800659e <_printf_i+0x186>
 8006598:	065f      	lsls	r7, r3, #25
 800659a:	bf48      	it	mi
 800659c:	b2ad      	uxthmi	r5, r5
 800659e:	6031      	str	r1, [r6, #0]
 80065a0:	07d9      	lsls	r1, r3, #31
 80065a2:	bf44      	itt	mi
 80065a4:	f043 0320 	orrmi.w	r3, r3, #32
 80065a8:	6023      	strmi	r3, [r4, #0]
 80065aa:	b11d      	cbz	r5, 80065b4 <_printf_i+0x19c>
 80065ac:	2310      	movs	r3, #16
 80065ae:	e7ad      	b.n	800650c <_printf_i+0xf4>
 80065b0:	4826      	ldr	r0, [pc, #152]	@ (800664c <_printf_i+0x234>)
 80065b2:	e7e9      	b.n	8006588 <_printf_i+0x170>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	f023 0320 	bic.w	r3, r3, #32
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	e7f6      	b.n	80065ac <_printf_i+0x194>
 80065be:	4616      	mov	r6, r2
 80065c0:	e7bd      	b.n	800653e <_printf_i+0x126>
 80065c2:	6833      	ldr	r3, [r6, #0]
 80065c4:	6825      	ldr	r5, [r4, #0]
 80065c6:	6961      	ldr	r1, [r4, #20]
 80065c8:	1d18      	adds	r0, r3, #4
 80065ca:	6030      	str	r0, [r6, #0]
 80065cc:	062e      	lsls	r6, r5, #24
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	d501      	bpl.n	80065d6 <_printf_i+0x1be>
 80065d2:	6019      	str	r1, [r3, #0]
 80065d4:	e002      	b.n	80065dc <_printf_i+0x1c4>
 80065d6:	0668      	lsls	r0, r5, #25
 80065d8:	d5fb      	bpl.n	80065d2 <_printf_i+0x1ba>
 80065da:	8019      	strh	r1, [r3, #0]
 80065dc:	2300      	movs	r3, #0
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	4616      	mov	r6, r2
 80065e2:	e7bc      	b.n	800655e <_printf_i+0x146>
 80065e4:	6833      	ldr	r3, [r6, #0]
 80065e6:	1d1a      	adds	r2, r3, #4
 80065e8:	6032      	str	r2, [r6, #0]
 80065ea:	681e      	ldr	r6, [r3, #0]
 80065ec:	6862      	ldr	r2, [r4, #4]
 80065ee:	2100      	movs	r1, #0
 80065f0:	4630      	mov	r0, r6
 80065f2:	f7f9 fdf5 	bl	80001e0 <memchr>
 80065f6:	b108      	cbz	r0, 80065fc <_printf_i+0x1e4>
 80065f8:	1b80      	subs	r0, r0, r6
 80065fa:	6060      	str	r0, [r4, #4]
 80065fc:	6863      	ldr	r3, [r4, #4]
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	2300      	movs	r3, #0
 8006602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006606:	e7aa      	b.n	800655e <_printf_i+0x146>
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	4632      	mov	r2, r6
 800660c:	4649      	mov	r1, r9
 800660e:	4640      	mov	r0, r8
 8006610:	47d0      	blx	sl
 8006612:	3001      	adds	r0, #1
 8006614:	d0ad      	beq.n	8006572 <_printf_i+0x15a>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	079b      	lsls	r3, r3, #30
 800661a:	d413      	bmi.n	8006644 <_printf_i+0x22c>
 800661c:	68e0      	ldr	r0, [r4, #12]
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	4298      	cmp	r0, r3
 8006622:	bfb8      	it	lt
 8006624:	4618      	movlt	r0, r3
 8006626:	e7a6      	b.n	8006576 <_printf_i+0x15e>
 8006628:	2301      	movs	r3, #1
 800662a:	4632      	mov	r2, r6
 800662c:	4649      	mov	r1, r9
 800662e:	4640      	mov	r0, r8
 8006630:	47d0      	blx	sl
 8006632:	3001      	adds	r0, #1
 8006634:	d09d      	beq.n	8006572 <_printf_i+0x15a>
 8006636:	3501      	adds	r5, #1
 8006638:	68e3      	ldr	r3, [r4, #12]
 800663a:	9903      	ldr	r1, [sp, #12]
 800663c:	1a5b      	subs	r3, r3, r1
 800663e:	42ab      	cmp	r3, r5
 8006640:	dcf2      	bgt.n	8006628 <_printf_i+0x210>
 8006642:	e7eb      	b.n	800661c <_printf_i+0x204>
 8006644:	2500      	movs	r5, #0
 8006646:	f104 0619 	add.w	r6, r4, #25
 800664a:	e7f5      	b.n	8006638 <_printf_i+0x220>
 800664c:	080088ea 	.word	0x080088ea
 8006650:	080088fb 	.word	0x080088fb

08006654 <std>:
 8006654:	2300      	movs	r3, #0
 8006656:	b510      	push	{r4, lr}
 8006658:	4604      	mov	r4, r0
 800665a:	e9c0 3300 	strd	r3, r3, [r0]
 800665e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006662:	6083      	str	r3, [r0, #8]
 8006664:	8181      	strh	r1, [r0, #12]
 8006666:	6643      	str	r3, [r0, #100]	@ 0x64
 8006668:	81c2      	strh	r2, [r0, #14]
 800666a:	6183      	str	r3, [r0, #24]
 800666c:	4619      	mov	r1, r3
 800666e:	2208      	movs	r2, #8
 8006670:	305c      	adds	r0, #92	@ 0x5c
 8006672:	f000 f9f9 	bl	8006a68 <memset>
 8006676:	4b0d      	ldr	r3, [pc, #52]	@ (80066ac <std+0x58>)
 8006678:	6263      	str	r3, [r4, #36]	@ 0x24
 800667a:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <std+0x5c>)
 800667c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800667e:	4b0d      	ldr	r3, [pc, #52]	@ (80066b4 <std+0x60>)
 8006680:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006682:	4b0d      	ldr	r3, [pc, #52]	@ (80066b8 <std+0x64>)
 8006684:	6323      	str	r3, [r4, #48]	@ 0x30
 8006686:	4b0d      	ldr	r3, [pc, #52]	@ (80066bc <std+0x68>)
 8006688:	6224      	str	r4, [r4, #32]
 800668a:	429c      	cmp	r4, r3
 800668c:	d006      	beq.n	800669c <std+0x48>
 800668e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006692:	4294      	cmp	r4, r2
 8006694:	d002      	beq.n	800669c <std+0x48>
 8006696:	33d0      	adds	r3, #208	@ 0xd0
 8006698:	429c      	cmp	r4, r3
 800669a:	d105      	bne.n	80066a8 <std+0x54>
 800669c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a4:	f000 ba5c 	b.w	8006b60 <__retarget_lock_init_recursive>
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	bf00      	nop
 80066ac:	080068b9 	.word	0x080068b9
 80066b0:	080068db 	.word	0x080068db
 80066b4:	08006913 	.word	0x08006913
 80066b8:	08006937 	.word	0x08006937
 80066bc:	200002ec 	.word	0x200002ec

080066c0 <stdio_exit_handler>:
 80066c0:	4a02      	ldr	r2, [pc, #8]	@ (80066cc <stdio_exit_handler+0xc>)
 80066c2:	4903      	ldr	r1, [pc, #12]	@ (80066d0 <stdio_exit_handler+0x10>)
 80066c4:	4803      	ldr	r0, [pc, #12]	@ (80066d4 <stdio_exit_handler+0x14>)
 80066c6:	f000 b869 	b.w	800679c <_fwalk_sglue>
 80066ca:	bf00      	nop
 80066cc:	2000000c 	.word	0x2000000c
 80066d0:	08008499 	.word	0x08008499
 80066d4:	2000001c 	.word	0x2000001c

080066d8 <cleanup_stdio>:
 80066d8:	6841      	ldr	r1, [r0, #4]
 80066da:	4b0c      	ldr	r3, [pc, #48]	@ (800670c <cleanup_stdio+0x34>)
 80066dc:	4299      	cmp	r1, r3
 80066de:	b510      	push	{r4, lr}
 80066e0:	4604      	mov	r4, r0
 80066e2:	d001      	beq.n	80066e8 <cleanup_stdio+0x10>
 80066e4:	f001 fed8 	bl	8008498 <_fflush_r>
 80066e8:	68a1      	ldr	r1, [r4, #8]
 80066ea:	4b09      	ldr	r3, [pc, #36]	@ (8006710 <cleanup_stdio+0x38>)
 80066ec:	4299      	cmp	r1, r3
 80066ee:	d002      	beq.n	80066f6 <cleanup_stdio+0x1e>
 80066f0:	4620      	mov	r0, r4
 80066f2:	f001 fed1 	bl	8008498 <_fflush_r>
 80066f6:	68e1      	ldr	r1, [r4, #12]
 80066f8:	4b06      	ldr	r3, [pc, #24]	@ (8006714 <cleanup_stdio+0x3c>)
 80066fa:	4299      	cmp	r1, r3
 80066fc:	d004      	beq.n	8006708 <cleanup_stdio+0x30>
 80066fe:	4620      	mov	r0, r4
 8006700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006704:	f001 bec8 	b.w	8008498 <_fflush_r>
 8006708:	bd10      	pop	{r4, pc}
 800670a:	bf00      	nop
 800670c:	200002ec 	.word	0x200002ec
 8006710:	20000354 	.word	0x20000354
 8006714:	200003bc 	.word	0x200003bc

08006718 <global_stdio_init.part.0>:
 8006718:	b510      	push	{r4, lr}
 800671a:	4b0b      	ldr	r3, [pc, #44]	@ (8006748 <global_stdio_init.part.0+0x30>)
 800671c:	4c0b      	ldr	r4, [pc, #44]	@ (800674c <global_stdio_init.part.0+0x34>)
 800671e:	4a0c      	ldr	r2, [pc, #48]	@ (8006750 <global_stdio_init.part.0+0x38>)
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	4620      	mov	r0, r4
 8006724:	2200      	movs	r2, #0
 8006726:	2104      	movs	r1, #4
 8006728:	f7ff ff94 	bl	8006654 <std>
 800672c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006730:	2201      	movs	r2, #1
 8006732:	2109      	movs	r1, #9
 8006734:	f7ff ff8e 	bl	8006654 <std>
 8006738:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800673c:	2202      	movs	r2, #2
 800673e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006742:	2112      	movs	r1, #18
 8006744:	f7ff bf86 	b.w	8006654 <std>
 8006748:	20000424 	.word	0x20000424
 800674c:	200002ec 	.word	0x200002ec
 8006750:	080066c1 	.word	0x080066c1

08006754 <__sfp_lock_acquire>:
 8006754:	4801      	ldr	r0, [pc, #4]	@ (800675c <__sfp_lock_acquire+0x8>)
 8006756:	f000 ba04 	b.w	8006b62 <__retarget_lock_acquire_recursive>
 800675a:	bf00      	nop
 800675c:	2000042d 	.word	0x2000042d

08006760 <__sfp_lock_release>:
 8006760:	4801      	ldr	r0, [pc, #4]	@ (8006768 <__sfp_lock_release+0x8>)
 8006762:	f000 b9ff 	b.w	8006b64 <__retarget_lock_release_recursive>
 8006766:	bf00      	nop
 8006768:	2000042d 	.word	0x2000042d

0800676c <__sinit>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4604      	mov	r4, r0
 8006770:	f7ff fff0 	bl	8006754 <__sfp_lock_acquire>
 8006774:	6a23      	ldr	r3, [r4, #32]
 8006776:	b11b      	cbz	r3, 8006780 <__sinit+0x14>
 8006778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800677c:	f7ff bff0 	b.w	8006760 <__sfp_lock_release>
 8006780:	4b04      	ldr	r3, [pc, #16]	@ (8006794 <__sinit+0x28>)
 8006782:	6223      	str	r3, [r4, #32]
 8006784:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <__sinit+0x2c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f5      	bne.n	8006778 <__sinit+0xc>
 800678c:	f7ff ffc4 	bl	8006718 <global_stdio_init.part.0>
 8006790:	e7f2      	b.n	8006778 <__sinit+0xc>
 8006792:	bf00      	nop
 8006794:	080066d9 	.word	0x080066d9
 8006798:	20000424 	.word	0x20000424

0800679c <_fwalk_sglue>:
 800679c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a0:	4607      	mov	r7, r0
 80067a2:	4688      	mov	r8, r1
 80067a4:	4614      	mov	r4, r2
 80067a6:	2600      	movs	r6, #0
 80067a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067ac:	f1b9 0901 	subs.w	r9, r9, #1
 80067b0:	d505      	bpl.n	80067be <_fwalk_sglue+0x22>
 80067b2:	6824      	ldr	r4, [r4, #0]
 80067b4:	2c00      	cmp	r4, #0
 80067b6:	d1f7      	bne.n	80067a8 <_fwalk_sglue+0xc>
 80067b8:	4630      	mov	r0, r6
 80067ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067be:	89ab      	ldrh	r3, [r5, #12]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d907      	bls.n	80067d4 <_fwalk_sglue+0x38>
 80067c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067c8:	3301      	adds	r3, #1
 80067ca:	d003      	beq.n	80067d4 <_fwalk_sglue+0x38>
 80067cc:	4629      	mov	r1, r5
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	4306      	orrs	r6, r0
 80067d4:	3568      	adds	r5, #104	@ 0x68
 80067d6:	e7e9      	b.n	80067ac <_fwalk_sglue+0x10>

080067d8 <iprintf>:
 80067d8:	b40f      	push	{r0, r1, r2, r3}
 80067da:	b507      	push	{r0, r1, r2, lr}
 80067dc:	4906      	ldr	r1, [pc, #24]	@ (80067f8 <iprintf+0x20>)
 80067de:	ab04      	add	r3, sp, #16
 80067e0:	6808      	ldr	r0, [r1, #0]
 80067e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e6:	6881      	ldr	r1, [r0, #8]
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	f001 fcb9 	bl	8008160 <_vfiprintf_r>
 80067ee:	b003      	add	sp, #12
 80067f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f4:	b004      	add	sp, #16
 80067f6:	4770      	bx	lr
 80067f8:	20000018 	.word	0x20000018

080067fc <_puts_r>:
 80067fc:	6a03      	ldr	r3, [r0, #32]
 80067fe:	b570      	push	{r4, r5, r6, lr}
 8006800:	6884      	ldr	r4, [r0, #8]
 8006802:	4605      	mov	r5, r0
 8006804:	460e      	mov	r6, r1
 8006806:	b90b      	cbnz	r3, 800680c <_puts_r+0x10>
 8006808:	f7ff ffb0 	bl	800676c <__sinit>
 800680c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800680e:	07db      	lsls	r3, r3, #31
 8006810:	d405      	bmi.n	800681e <_puts_r+0x22>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	0598      	lsls	r0, r3, #22
 8006816:	d402      	bmi.n	800681e <_puts_r+0x22>
 8006818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800681a:	f000 f9a2 	bl	8006b62 <__retarget_lock_acquire_recursive>
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	0719      	lsls	r1, r3, #28
 8006822:	d502      	bpl.n	800682a <_puts_r+0x2e>
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d135      	bne.n	8006896 <_puts_r+0x9a>
 800682a:	4621      	mov	r1, r4
 800682c:	4628      	mov	r0, r5
 800682e:	f000 f8c5 	bl	80069bc <__swsetup_r>
 8006832:	b380      	cbz	r0, 8006896 <_puts_r+0x9a>
 8006834:	f04f 35ff 	mov.w	r5, #4294967295
 8006838:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800683a:	07da      	lsls	r2, r3, #31
 800683c:	d405      	bmi.n	800684a <_puts_r+0x4e>
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	059b      	lsls	r3, r3, #22
 8006842:	d402      	bmi.n	800684a <_puts_r+0x4e>
 8006844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006846:	f000 f98d 	bl	8006b64 <__retarget_lock_release_recursive>
 800684a:	4628      	mov	r0, r5
 800684c:	bd70      	pop	{r4, r5, r6, pc}
 800684e:	2b00      	cmp	r3, #0
 8006850:	da04      	bge.n	800685c <_puts_r+0x60>
 8006852:	69a2      	ldr	r2, [r4, #24]
 8006854:	429a      	cmp	r2, r3
 8006856:	dc17      	bgt.n	8006888 <_puts_r+0x8c>
 8006858:	290a      	cmp	r1, #10
 800685a:	d015      	beq.n	8006888 <_puts_r+0x8c>
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	6022      	str	r2, [r4, #0]
 8006862:	7019      	strb	r1, [r3, #0]
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800686a:	3b01      	subs	r3, #1
 800686c:	60a3      	str	r3, [r4, #8]
 800686e:	2900      	cmp	r1, #0
 8006870:	d1ed      	bne.n	800684e <_puts_r+0x52>
 8006872:	2b00      	cmp	r3, #0
 8006874:	da11      	bge.n	800689a <_puts_r+0x9e>
 8006876:	4622      	mov	r2, r4
 8006878:	210a      	movs	r1, #10
 800687a:	4628      	mov	r0, r5
 800687c:	f000 f85f 	bl	800693e <__swbuf_r>
 8006880:	3001      	adds	r0, #1
 8006882:	d0d7      	beq.n	8006834 <_puts_r+0x38>
 8006884:	250a      	movs	r5, #10
 8006886:	e7d7      	b.n	8006838 <_puts_r+0x3c>
 8006888:	4622      	mov	r2, r4
 800688a:	4628      	mov	r0, r5
 800688c:	f000 f857 	bl	800693e <__swbuf_r>
 8006890:	3001      	adds	r0, #1
 8006892:	d1e7      	bne.n	8006864 <_puts_r+0x68>
 8006894:	e7ce      	b.n	8006834 <_puts_r+0x38>
 8006896:	3e01      	subs	r6, #1
 8006898:	e7e4      	b.n	8006864 <_puts_r+0x68>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	6022      	str	r2, [r4, #0]
 80068a0:	220a      	movs	r2, #10
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	e7ee      	b.n	8006884 <_puts_r+0x88>
	...

080068a8 <puts>:
 80068a8:	4b02      	ldr	r3, [pc, #8]	@ (80068b4 <puts+0xc>)
 80068aa:	4601      	mov	r1, r0
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	f7ff bfa5 	b.w	80067fc <_puts_r>
 80068b2:	bf00      	nop
 80068b4:	20000018 	.word	0x20000018

080068b8 <__sread>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	460c      	mov	r4, r1
 80068bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c0:	f000 f900 	bl	8006ac4 <_read_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	bfab      	itete	ge
 80068c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068ca:	89a3      	ldrhlt	r3, [r4, #12]
 80068cc:	181b      	addge	r3, r3, r0
 80068ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068d2:	bfac      	ite	ge
 80068d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068d6:	81a3      	strhlt	r3, [r4, #12]
 80068d8:	bd10      	pop	{r4, pc}

080068da <__swrite>:
 80068da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068de:	461f      	mov	r7, r3
 80068e0:	898b      	ldrh	r3, [r1, #12]
 80068e2:	05db      	lsls	r3, r3, #23
 80068e4:	4605      	mov	r5, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	4616      	mov	r6, r2
 80068ea:	d505      	bpl.n	80068f8 <__swrite+0x1e>
 80068ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f0:	2302      	movs	r3, #2
 80068f2:	2200      	movs	r2, #0
 80068f4:	f000 f8d4 	bl	8006aa0 <_lseek_r>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006902:	81a3      	strh	r3, [r4, #12]
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	4628      	mov	r0, r5
 800690a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	f000 b8eb 	b.w	8006ae8 <_write_r>

08006912 <__sseek>:
 8006912:	b510      	push	{r4, lr}
 8006914:	460c      	mov	r4, r1
 8006916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691a:	f000 f8c1 	bl	8006aa0 <_lseek_r>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	bf15      	itete	ne
 8006924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800692a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800692e:	81a3      	strheq	r3, [r4, #12]
 8006930:	bf18      	it	ne
 8006932:	81a3      	strhne	r3, [r4, #12]
 8006934:	bd10      	pop	{r4, pc}

08006936 <__sclose>:
 8006936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693a:	f000 b8a1 	b.w	8006a80 <_close_r>

0800693e <__swbuf_r>:
 800693e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006940:	460e      	mov	r6, r1
 8006942:	4614      	mov	r4, r2
 8006944:	4605      	mov	r5, r0
 8006946:	b118      	cbz	r0, 8006950 <__swbuf_r+0x12>
 8006948:	6a03      	ldr	r3, [r0, #32]
 800694a:	b90b      	cbnz	r3, 8006950 <__swbuf_r+0x12>
 800694c:	f7ff ff0e 	bl	800676c <__sinit>
 8006950:	69a3      	ldr	r3, [r4, #24]
 8006952:	60a3      	str	r3, [r4, #8]
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	071a      	lsls	r2, r3, #28
 8006958:	d501      	bpl.n	800695e <__swbuf_r+0x20>
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	b943      	cbnz	r3, 8006970 <__swbuf_r+0x32>
 800695e:	4621      	mov	r1, r4
 8006960:	4628      	mov	r0, r5
 8006962:	f000 f82b 	bl	80069bc <__swsetup_r>
 8006966:	b118      	cbz	r0, 8006970 <__swbuf_r+0x32>
 8006968:	f04f 37ff 	mov.w	r7, #4294967295
 800696c:	4638      	mov	r0, r7
 800696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	6922      	ldr	r2, [r4, #16]
 8006974:	1a98      	subs	r0, r3, r2
 8006976:	6963      	ldr	r3, [r4, #20]
 8006978:	b2f6      	uxtb	r6, r6
 800697a:	4283      	cmp	r3, r0
 800697c:	4637      	mov	r7, r6
 800697e:	dc05      	bgt.n	800698c <__swbuf_r+0x4e>
 8006980:	4621      	mov	r1, r4
 8006982:	4628      	mov	r0, r5
 8006984:	f001 fd88 	bl	8008498 <_fflush_r>
 8006988:	2800      	cmp	r0, #0
 800698a:	d1ed      	bne.n	8006968 <__swbuf_r+0x2a>
 800698c:	68a3      	ldr	r3, [r4, #8]
 800698e:	3b01      	subs	r3, #1
 8006990:	60a3      	str	r3, [r4, #8]
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	6022      	str	r2, [r4, #0]
 8006998:	701e      	strb	r6, [r3, #0]
 800699a:	6962      	ldr	r2, [r4, #20]
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	429a      	cmp	r2, r3
 80069a0:	d004      	beq.n	80069ac <__swbuf_r+0x6e>
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	07db      	lsls	r3, r3, #31
 80069a6:	d5e1      	bpl.n	800696c <__swbuf_r+0x2e>
 80069a8:	2e0a      	cmp	r6, #10
 80069aa:	d1df      	bne.n	800696c <__swbuf_r+0x2e>
 80069ac:	4621      	mov	r1, r4
 80069ae:	4628      	mov	r0, r5
 80069b0:	f001 fd72 	bl	8008498 <_fflush_r>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d0d9      	beq.n	800696c <__swbuf_r+0x2e>
 80069b8:	e7d6      	b.n	8006968 <__swbuf_r+0x2a>
	...

080069bc <__swsetup_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4b29      	ldr	r3, [pc, #164]	@ (8006a64 <__swsetup_r+0xa8>)
 80069c0:	4605      	mov	r5, r0
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	460c      	mov	r4, r1
 80069c6:	b118      	cbz	r0, 80069d0 <__swsetup_r+0x14>
 80069c8:	6a03      	ldr	r3, [r0, #32]
 80069ca:	b90b      	cbnz	r3, 80069d0 <__swsetup_r+0x14>
 80069cc:	f7ff fece 	bl	800676c <__sinit>
 80069d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069d4:	0719      	lsls	r1, r3, #28
 80069d6:	d422      	bmi.n	8006a1e <__swsetup_r+0x62>
 80069d8:	06da      	lsls	r2, r3, #27
 80069da:	d407      	bmi.n	80069ec <__swsetup_r+0x30>
 80069dc:	2209      	movs	r2, #9
 80069de:	602a      	str	r2, [r5, #0]
 80069e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069e4:	81a3      	strh	r3, [r4, #12]
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	e033      	b.n	8006a54 <__swsetup_r+0x98>
 80069ec:	0758      	lsls	r0, r3, #29
 80069ee:	d512      	bpl.n	8006a16 <__swsetup_r+0x5a>
 80069f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069f2:	b141      	cbz	r1, 8006a06 <__swsetup_r+0x4a>
 80069f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069f8:	4299      	cmp	r1, r3
 80069fa:	d002      	beq.n	8006a02 <__swsetup_r+0x46>
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 ff0b 	bl	8007818 <_free_r>
 8006a02:	2300      	movs	r3, #0
 8006a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	6923      	ldr	r3, [r4, #16]
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	f043 0308 	orr.w	r3, r3, #8
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	b94b      	cbnz	r3, 8006a36 <__swsetup_r+0x7a>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a2c:	d003      	beq.n	8006a36 <__swsetup_r+0x7a>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4628      	mov	r0, r5
 8006a32:	f001 fd7f 	bl	8008534 <__smakebuf_r>
 8006a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3a:	f013 0201 	ands.w	r2, r3, #1
 8006a3e:	d00a      	beq.n	8006a56 <__swsetup_r+0x9a>
 8006a40:	2200      	movs	r2, #0
 8006a42:	60a2      	str	r2, [r4, #8]
 8006a44:	6962      	ldr	r2, [r4, #20]
 8006a46:	4252      	negs	r2, r2
 8006a48:	61a2      	str	r2, [r4, #24]
 8006a4a:	6922      	ldr	r2, [r4, #16]
 8006a4c:	b942      	cbnz	r2, 8006a60 <__swsetup_r+0xa4>
 8006a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a52:	d1c5      	bne.n	80069e0 <__swsetup_r+0x24>
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	0799      	lsls	r1, r3, #30
 8006a58:	bf58      	it	pl
 8006a5a:	6962      	ldrpl	r2, [r4, #20]
 8006a5c:	60a2      	str	r2, [r4, #8]
 8006a5e:	e7f4      	b.n	8006a4a <__swsetup_r+0x8e>
 8006a60:	2000      	movs	r0, #0
 8006a62:	e7f7      	b.n	8006a54 <__swsetup_r+0x98>
 8006a64:	20000018 	.word	0x20000018

08006a68 <memset>:
 8006a68:	4402      	add	r2, r0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d100      	bne.n	8006a72 <memset+0xa>
 8006a70:	4770      	bx	lr
 8006a72:	f803 1b01 	strb.w	r1, [r3], #1
 8006a76:	e7f9      	b.n	8006a6c <memset+0x4>

08006a78 <_localeconv_r>:
 8006a78:	4800      	ldr	r0, [pc, #0]	@ (8006a7c <_localeconv_r+0x4>)
 8006a7a:	4770      	bx	lr
 8006a7c:	20000158 	.word	0x20000158

08006a80 <_close_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d06      	ldr	r5, [pc, #24]	@ (8006a9c <_close_r+0x1c>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	4604      	mov	r4, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	f7fa ffc0 	bl	8001a10 <_close>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_close_r+0x1a>
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_close_r+0x1a>
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	20000428 	.word	0x20000428

08006aa0 <_lseek_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4d07      	ldr	r5, [pc, #28]	@ (8006ac0 <_lseek_r+0x20>)
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	602a      	str	r2, [r5, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f7fa ffd5 	bl	8001a5e <_lseek>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_lseek_r+0x1e>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_lseek_r+0x1e>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20000428 	.word	0x20000428

08006ac4 <_read_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d07      	ldr	r5, [pc, #28]	@ (8006ae4 <_read_r+0x20>)
 8006ac8:	4604      	mov	r4, r0
 8006aca:	4608      	mov	r0, r1
 8006acc:	4611      	mov	r1, r2
 8006ace:	2200      	movs	r2, #0
 8006ad0:	602a      	str	r2, [r5, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f7fa ff63 	bl	800199e <_read>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d102      	bne.n	8006ae2 <_read_r+0x1e>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	b103      	cbz	r3, 8006ae2 <_read_r+0x1e>
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	20000428 	.word	0x20000428

08006ae8 <_write_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	4d07      	ldr	r5, [pc, #28]	@ (8006b08 <_write_r+0x20>)
 8006aec:	4604      	mov	r4, r0
 8006aee:	4608      	mov	r0, r1
 8006af0:	4611      	mov	r1, r2
 8006af2:	2200      	movs	r2, #0
 8006af4:	602a      	str	r2, [r5, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f7fa ff6e 	bl	80019d8 <_write>
 8006afc:	1c43      	adds	r3, r0, #1
 8006afe:	d102      	bne.n	8006b06 <_write_r+0x1e>
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	b103      	cbz	r3, 8006b06 <_write_r+0x1e>
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
 8006b08:	20000428 	.word	0x20000428

08006b0c <__errno>:
 8006b0c:	4b01      	ldr	r3, [pc, #4]	@ (8006b14 <__errno+0x8>)
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000018 	.word	0x20000018

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b50 <__libc_init_array+0x38>)
 8006b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b54 <__libc_init_array+0x3c>)
 8006b1e:	1b64      	subs	r4, r4, r5
 8006b20:	10a4      	asrs	r4, r4, #2
 8006b22:	2600      	movs	r6, #0
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	4d0b      	ldr	r5, [pc, #44]	@ (8006b58 <__libc_init_array+0x40>)
 8006b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b5c <__libc_init_array+0x44>)
 8006b2c:	f001 fe50 	bl	80087d0 <_init>
 8006b30:	1b64      	subs	r4, r4, r5
 8006b32:	10a4      	asrs	r4, r4, #2
 8006b34:	2600      	movs	r6, #0
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b40:	4798      	blx	r3
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4a:	4798      	blx	r3
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08008c54 	.word	0x08008c54
 8006b54:	08008c54 	.word	0x08008c54
 8006b58:	08008c54 	.word	0x08008c54
 8006b5c:	08008c58 	.word	0x08008c58

08006b60 <__retarget_lock_init_recursive>:
 8006b60:	4770      	bx	lr

08006b62 <__retarget_lock_acquire_recursive>:
 8006b62:	4770      	bx	lr

08006b64 <__retarget_lock_release_recursive>:
 8006b64:	4770      	bx	lr

08006b66 <quorem>:
 8006b66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	6903      	ldr	r3, [r0, #16]
 8006b6c:	690c      	ldr	r4, [r1, #16]
 8006b6e:	42a3      	cmp	r3, r4
 8006b70:	4607      	mov	r7, r0
 8006b72:	db7e      	blt.n	8006c72 <quorem+0x10c>
 8006b74:	3c01      	subs	r4, #1
 8006b76:	f101 0814 	add.w	r8, r1, #20
 8006b7a:	00a3      	lsls	r3, r4, #2
 8006b7c:	f100 0514 	add.w	r5, r0, #20
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b90:	3301      	adds	r3, #1
 8006b92:	429a      	cmp	r2, r3
 8006b94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b9c:	d32e      	bcc.n	8006bfc <quorem+0x96>
 8006b9e:	f04f 0a00 	mov.w	sl, #0
 8006ba2:	46c4      	mov	ip, r8
 8006ba4:	46ae      	mov	lr, r5
 8006ba6:	46d3      	mov	fp, sl
 8006ba8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bac:	b298      	uxth	r0, r3
 8006bae:	fb06 a000 	mla	r0, r6, r0, sl
 8006bb2:	0c02      	lsrs	r2, r0, #16
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	fb06 2303 	mla	r3, r6, r3, r2
 8006bba:	f8de 2000 	ldr.w	r2, [lr]
 8006bbe:	b280      	uxth	r0, r0
 8006bc0:	b292      	uxth	r2, r2
 8006bc2:	1a12      	subs	r2, r2, r0
 8006bc4:	445a      	add	r2, fp
 8006bc6:	f8de 0000 	ldr.w	r0, [lr]
 8006bca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006bd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006bd8:	b292      	uxth	r2, r2
 8006bda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bde:	45e1      	cmp	r9, ip
 8006be0:	f84e 2b04 	str.w	r2, [lr], #4
 8006be4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006be8:	d2de      	bcs.n	8006ba8 <quorem+0x42>
 8006bea:	9b00      	ldr	r3, [sp, #0]
 8006bec:	58eb      	ldr	r3, [r5, r3]
 8006bee:	b92b      	cbnz	r3, 8006bfc <quorem+0x96>
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	3b04      	subs	r3, #4
 8006bf4:	429d      	cmp	r5, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	d32f      	bcc.n	8006c5a <quorem+0xf4>
 8006bfa:	613c      	str	r4, [r7, #16]
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	f001 f97d 	bl	8007efc <__mcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	db25      	blt.n	8006c52 <quorem+0xec>
 8006c06:	4629      	mov	r1, r5
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c0e:	f8d1 c000 	ldr.w	ip, [r1]
 8006c12:	fa1f fe82 	uxth.w	lr, r2
 8006c16:	fa1f f38c 	uxth.w	r3, ip
 8006c1a:	eba3 030e 	sub.w	r3, r3, lr
 8006c1e:	4403      	add	r3, r0
 8006c20:	0c12      	lsrs	r2, r2, #16
 8006c22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c30:	45c1      	cmp	r9, r8
 8006c32:	f841 3b04 	str.w	r3, [r1], #4
 8006c36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c3a:	d2e6      	bcs.n	8006c0a <quorem+0xa4>
 8006c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c44:	b922      	cbnz	r2, 8006c50 <quorem+0xea>
 8006c46:	3b04      	subs	r3, #4
 8006c48:	429d      	cmp	r5, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	d30b      	bcc.n	8006c66 <quorem+0x100>
 8006c4e:	613c      	str	r4, [r7, #16]
 8006c50:	3601      	adds	r6, #1
 8006c52:	4630      	mov	r0, r6
 8006c54:	b003      	add	sp, #12
 8006c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5a:	6812      	ldr	r2, [r2, #0]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	2a00      	cmp	r2, #0
 8006c60:	d1cb      	bne.n	8006bfa <quorem+0x94>
 8006c62:	3c01      	subs	r4, #1
 8006c64:	e7c6      	b.n	8006bf4 <quorem+0x8e>
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	3b04      	subs	r3, #4
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d1ef      	bne.n	8006c4e <quorem+0xe8>
 8006c6e:	3c01      	subs	r4, #1
 8006c70:	e7ea      	b.n	8006c48 <quorem+0xe2>
 8006c72:	2000      	movs	r0, #0
 8006c74:	e7ee      	b.n	8006c54 <quorem+0xee>
	...

08006c78 <_dtoa_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	69c7      	ldr	r7, [r0, #28]
 8006c7e:	b097      	sub	sp, #92	@ 0x5c
 8006c80:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006c84:	ec55 4b10 	vmov	r4, r5, d0
 8006c88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006c90:	9311      	str	r3, [sp, #68]	@ 0x44
 8006c92:	b97f      	cbnz	r7, 8006cb4 <_dtoa_r+0x3c>
 8006c94:	2010      	movs	r0, #16
 8006c96:	f000 fe09 	bl	80078ac <malloc>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006ca0:	b920      	cbnz	r0, 8006cac <_dtoa_r+0x34>
 8006ca2:	4ba9      	ldr	r3, [pc, #676]	@ (8006f48 <_dtoa_r+0x2d0>)
 8006ca4:	21ef      	movs	r1, #239	@ 0xef
 8006ca6:	48a9      	ldr	r0, [pc, #676]	@ (8006f4c <_dtoa_r+0x2d4>)
 8006ca8:	f001 fcc0 	bl	800862c <__assert_func>
 8006cac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cb0:	6007      	str	r7, [r0, #0]
 8006cb2:	60c7      	str	r7, [r0, #12]
 8006cb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006cb8:	6819      	ldr	r1, [r3, #0]
 8006cba:	b159      	cbz	r1, 8006cd4 <_dtoa_r+0x5c>
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	604a      	str	r2, [r1, #4]
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	4093      	lsls	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
 8006cc6:	4648      	mov	r0, r9
 8006cc8:	f000 fee6 	bl	8007a98 <_Bfree>
 8006ccc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	1e2b      	subs	r3, r5, #0
 8006cd6:	bfb9      	ittee	lt
 8006cd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006cdc:	9305      	strlt	r3, [sp, #20]
 8006cde:	2300      	movge	r3, #0
 8006ce0:	6033      	strge	r3, [r6, #0]
 8006ce2:	9f05      	ldr	r7, [sp, #20]
 8006ce4:	4b9a      	ldr	r3, [pc, #616]	@ (8006f50 <_dtoa_r+0x2d8>)
 8006ce6:	bfbc      	itt	lt
 8006ce8:	2201      	movlt	r2, #1
 8006cea:	6032      	strlt	r2, [r6, #0]
 8006cec:	43bb      	bics	r3, r7
 8006cee:	d112      	bne.n	8006d16 <_dtoa_r+0x9e>
 8006cf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006cf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cfc:	4323      	orrs	r3, r4
 8006cfe:	f000 855a 	beq.w	80077b6 <_dtoa_r+0xb3e>
 8006d02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006f64 <_dtoa_r+0x2ec>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 855c 	beq.w	80077c6 <_dtoa_r+0xb4e>
 8006d0e:	f10a 0303 	add.w	r3, sl, #3
 8006d12:	f000 bd56 	b.w	80077c2 <_dtoa_r+0xb4a>
 8006d16:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	ec51 0b17 	vmov	r0, r1, d7
 8006d20:	2300      	movs	r3, #0
 8006d22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006d26:	f7f9 fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	b158      	cbz	r0, 8006d46 <_dtoa_r+0xce>
 8006d2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006d30:	2301      	movs	r3, #1
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d36:	b113      	cbz	r3, 8006d3e <_dtoa_r+0xc6>
 8006d38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006d3a:	4b86      	ldr	r3, [pc, #536]	@ (8006f54 <_dtoa_r+0x2dc>)
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006f68 <_dtoa_r+0x2f0>
 8006d42:	f000 bd40 	b.w	80077c6 <_dtoa_r+0xb4e>
 8006d46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006d4a:	aa14      	add	r2, sp, #80	@ 0x50
 8006d4c:	a915      	add	r1, sp, #84	@ 0x54
 8006d4e:	4648      	mov	r0, r9
 8006d50:	f001 f984 	bl	800805c <__d2b>
 8006d54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d58:	9002      	str	r0, [sp, #8]
 8006d5a:	2e00      	cmp	r6, #0
 8006d5c:	d078      	beq.n	8006e50 <_dtoa_r+0x1d8>
 8006d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d78:	4619      	mov	r1, r3
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4b76      	ldr	r3, [pc, #472]	@ (8006f58 <_dtoa_r+0x2e0>)
 8006d7e:	f7f9 fa8b 	bl	8000298 <__aeabi_dsub>
 8006d82:	a36b      	add	r3, pc, #428	@ (adr r3, 8006f30 <_dtoa_r+0x2b8>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f7f9 fc3e 	bl	8000608 <__aeabi_dmul>
 8006d8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8006f38 <_dtoa_r+0x2c0>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f7f9 fa83 	bl	800029c <__adddf3>
 8006d96:	4604      	mov	r4, r0
 8006d98:	4630      	mov	r0, r6
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	f7f9 fbca 	bl	8000534 <__aeabi_i2d>
 8006da0:	a367      	add	r3, pc, #412	@ (adr r3, 8006f40 <_dtoa_r+0x2c8>)
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	f7f9 fc2f 	bl	8000608 <__aeabi_dmul>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4620      	mov	r0, r4
 8006db0:	4629      	mov	r1, r5
 8006db2:	f7f9 fa73 	bl	800029c <__adddf3>
 8006db6:	4604      	mov	r4, r0
 8006db8:	460d      	mov	r5, r1
 8006dba:	f7f9 fed5 	bl	8000b68 <__aeabi_d2iz>
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7f9 fe90 	bl	8000aec <__aeabi_dcmplt>
 8006dcc:	b140      	cbz	r0, 8006de0 <_dtoa_r+0x168>
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f7f9 fbb0 	bl	8000534 <__aeabi_i2d>
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	462b      	mov	r3, r5
 8006dd8:	f7f9 fe7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ddc:	b900      	cbnz	r0, 8006de0 <_dtoa_r+0x168>
 8006dde:	3f01      	subs	r7, #1
 8006de0:	2f16      	cmp	r7, #22
 8006de2:	d852      	bhi.n	8006e8a <_dtoa_r+0x212>
 8006de4:	4b5d      	ldr	r3, [pc, #372]	@ (8006f5c <_dtoa_r+0x2e4>)
 8006de6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006df2:	f7f9 fe7b 	bl	8000aec <__aeabi_dcmplt>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d049      	beq.n	8006e8e <_dtoa_r+0x216>
 8006dfa:	3f01      	subs	r7, #1
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e02:	1b9b      	subs	r3, r3, r6
 8006e04:	1e5a      	subs	r2, r3, #1
 8006e06:	bf45      	ittet	mi
 8006e08:	f1c3 0301 	rsbmi	r3, r3, #1
 8006e0c:	9300      	strmi	r3, [sp, #0]
 8006e0e:	2300      	movpl	r3, #0
 8006e10:	2300      	movmi	r3, #0
 8006e12:	9206      	str	r2, [sp, #24]
 8006e14:	bf54      	ite	pl
 8006e16:	9300      	strpl	r3, [sp, #0]
 8006e18:	9306      	strmi	r3, [sp, #24]
 8006e1a:	2f00      	cmp	r7, #0
 8006e1c:	db39      	blt.n	8006e92 <_dtoa_r+0x21a>
 8006e1e:	9b06      	ldr	r3, [sp, #24]
 8006e20:	970d      	str	r7, [sp, #52]	@ 0x34
 8006e22:	443b      	add	r3, r7
 8006e24:	9306      	str	r3, [sp, #24]
 8006e26:	2300      	movs	r3, #0
 8006e28:	9308      	str	r3, [sp, #32]
 8006e2a:	9b07      	ldr	r3, [sp, #28]
 8006e2c:	2b09      	cmp	r3, #9
 8006e2e:	d863      	bhi.n	8006ef8 <_dtoa_r+0x280>
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	bfc4      	itt	gt
 8006e34:	3b04      	subgt	r3, #4
 8006e36:	9307      	strgt	r3, [sp, #28]
 8006e38:	9b07      	ldr	r3, [sp, #28]
 8006e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006e3e:	bfcc      	ite	gt
 8006e40:	2400      	movgt	r4, #0
 8006e42:	2401      	movle	r4, #1
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d863      	bhi.n	8006f10 <_dtoa_r+0x298>
 8006e48:	e8df f003 	tbb	[pc, r3]
 8006e4c:	2b375452 	.word	0x2b375452
 8006e50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006e54:	441e      	add	r6, r3
 8006e56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	bfc1      	itttt	gt
 8006e5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e62:	409f      	lslgt	r7, r3
 8006e64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e68:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e6c:	bfd6      	itet	le
 8006e6e:	f1c3 0320 	rsble	r3, r3, #32
 8006e72:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e76:	fa04 f003 	lslle.w	r0, r4, r3
 8006e7a:	f7f9 fb4b 	bl	8000514 <__aeabi_ui2d>
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e84:	3e01      	subs	r6, #1
 8006e86:	9212      	str	r2, [sp, #72]	@ 0x48
 8006e88:	e776      	b.n	8006d78 <_dtoa_r+0x100>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e7b7      	b.n	8006dfe <_dtoa_r+0x186>
 8006e8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006e90:	e7b6      	b.n	8006e00 <_dtoa_r+0x188>
 8006e92:	9b00      	ldr	r3, [sp, #0]
 8006e94:	1bdb      	subs	r3, r3, r7
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	427b      	negs	r3, r7
 8006e9a:	9308      	str	r3, [sp, #32]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006ea0:	e7c3      	b.n	8006e2a <_dtoa_r+0x1b2>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ea8:	eb07 0b03 	add.w	fp, r7, r3
 8006eac:	f10b 0301 	add.w	r3, fp, #1
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	bfb8      	it	lt
 8006eb6:	2301      	movlt	r3, #1
 8006eb8:	e006      	b.n	8006ec8 <_dtoa_r+0x250>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ebe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	dd28      	ble.n	8006f16 <_dtoa_r+0x29e>
 8006ec4:	469b      	mov	fp, r3
 8006ec6:	9303      	str	r3, [sp, #12]
 8006ec8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	2204      	movs	r2, #4
 8006ed0:	f102 0514 	add.w	r5, r2, #20
 8006ed4:	429d      	cmp	r5, r3
 8006ed6:	d926      	bls.n	8006f26 <_dtoa_r+0x2ae>
 8006ed8:	6041      	str	r1, [r0, #4]
 8006eda:	4648      	mov	r0, r9
 8006edc:	f000 fd9c 	bl	8007a18 <_Balloc>
 8006ee0:	4682      	mov	sl, r0
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d142      	bne.n	8006f6c <_dtoa_r+0x2f4>
 8006ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f60 <_dtoa_r+0x2e8>)
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f240 11af 	movw	r1, #431	@ 0x1af
 8006eee:	e6da      	b.n	8006ca6 <_dtoa_r+0x2e>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e7e3      	b.n	8006ebc <_dtoa_r+0x244>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e7d5      	b.n	8006ea4 <_dtoa_r+0x22c>
 8006ef8:	2401      	movs	r4, #1
 8006efa:	2300      	movs	r3, #0
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	9409      	str	r4, [sp, #36]	@ 0x24
 8006f00:	f04f 3bff 	mov.w	fp, #4294967295
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8cd b00c 	str.w	fp, [sp, #12]
 8006f0a:	2312      	movs	r3, #18
 8006f0c:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f0e:	e7db      	b.n	8006ec8 <_dtoa_r+0x250>
 8006f10:	2301      	movs	r3, #1
 8006f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f14:	e7f4      	b.n	8006f00 <_dtoa_r+0x288>
 8006f16:	f04f 0b01 	mov.w	fp, #1
 8006f1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006f1e:	465b      	mov	r3, fp
 8006f20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006f24:	e7d0      	b.n	8006ec8 <_dtoa_r+0x250>
 8006f26:	3101      	adds	r1, #1
 8006f28:	0052      	lsls	r2, r2, #1
 8006f2a:	e7d1      	b.n	8006ed0 <_dtoa_r+0x258>
 8006f2c:	f3af 8000 	nop.w
 8006f30:	636f4361 	.word	0x636f4361
 8006f34:	3fd287a7 	.word	0x3fd287a7
 8006f38:	8b60c8b3 	.word	0x8b60c8b3
 8006f3c:	3fc68a28 	.word	0x3fc68a28
 8006f40:	509f79fb 	.word	0x509f79fb
 8006f44:	3fd34413 	.word	0x3fd34413
 8006f48:	08008919 	.word	0x08008919
 8006f4c:	08008930 	.word	0x08008930
 8006f50:	7ff00000 	.word	0x7ff00000
 8006f54:	080088e9 	.word	0x080088e9
 8006f58:	3ff80000 	.word	0x3ff80000
 8006f5c:	08008a80 	.word	0x08008a80
 8006f60:	08008988 	.word	0x08008988
 8006f64:	08008915 	.word	0x08008915
 8006f68:	080088e8 	.word	0x080088e8
 8006f6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	2b0e      	cmp	r3, #14
 8006f76:	f200 80a1 	bhi.w	80070bc <_dtoa_r+0x444>
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	f000 809e 	beq.w	80070bc <_dtoa_r+0x444>
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	dd33      	ble.n	8006fec <_dtoa_r+0x374>
 8006f84:	4b9c      	ldr	r3, [pc, #624]	@ (80071f8 <_dtoa_r+0x580>)
 8006f86:	f007 020f 	and.w	r2, r7, #15
 8006f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f8e:	ed93 7b00 	vldr	d7, [r3]
 8006f92:	05f8      	lsls	r0, r7, #23
 8006f94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f9c:	d516      	bpl.n	8006fcc <_dtoa_r+0x354>
 8006f9e:	4b97      	ldr	r3, [pc, #604]	@ (80071fc <_dtoa_r+0x584>)
 8006fa0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fa8:	f7f9 fc58 	bl	800085c <__aeabi_ddiv>
 8006fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fb0:	f004 040f 	and.w	r4, r4, #15
 8006fb4:	2603      	movs	r6, #3
 8006fb6:	4d91      	ldr	r5, [pc, #580]	@ (80071fc <_dtoa_r+0x584>)
 8006fb8:	b954      	cbnz	r4, 8006fd0 <_dtoa_r+0x358>
 8006fba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fc2:	f7f9 fc4b 	bl	800085c <__aeabi_ddiv>
 8006fc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fca:	e028      	b.n	800701e <_dtoa_r+0x3a6>
 8006fcc:	2602      	movs	r6, #2
 8006fce:	e7f2      	b.n	8006fb6 <_dtoa_r+0x33e>
 8006fd0:	07e1      	lsls	r1, r4, #31
 8006fd2:	d508      	bpl.n	8006fe6 <_dtoa_r+0x36e>
 8006fd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fdc:	f7f9 fb14 	bl	8000608 <__aeabi_dmul>
 8006fe0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006fe4:	3601      	adds	r6, #1
 8006fe6:	1064      	asrs	r4, r4, #1
 8006fe8:	3508      	adds	r5, #8
 8006fea:	e7e5      	b.n	8006fb8 <_dtoa_r+0x340>
 8006fec:	f000 80af 	beq.w	800714e <_dtoa_r+0x4d6>
 8006ff0:	427c      	negs	r4, r7
 8006ff2:	4b81      	ldr	r3, [pc, #516]	@ (80071f8 <_dtoa_r+0x580>)
 8006ff4:	4d81      	ldr	r5, [pc, #516]	@ (80071fc <_dtoa_r+0x584>)
 8006ff6:	f004 020f 	and.w	r2, r4, #15
 8006ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007006:	f7f9 faff 	bl	8000608 <__aeabi_dmul>
 800700a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800700e:	1124      	asrs	r4, r4, #4
 8007010:	2300      	movs	r3, #0
 8007012:	2602      	movs	r6, #2
 8007014:	2c00      	cmp	r4, #0
 8007016:	f040 808f 	bne.w	8007138 <_dtoa_r+0x4c0>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1d3      	bne.n	8006fc6 <_dtoa_r+0x34e>
 800701e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007020:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8094 	beq.w	8007152 <_dtoa_r+0x4da>
 800702a:	4b75      	ldr	r3, [pc, #468]	@ (8007200 <_dtoa_r+0x588>)
 800702c:	2200      	movs	r2, #0
 800702e:	4620      	mov	r0, r4
 8007030:	4629      	mov	r1, r5
 8007032:	f7f9 fd5b 	bl	8000aec <__aeabi_dcmplt>
 8007036:	2800      	cmp	r0, #0
 8007038:	f000 808b 	beq.w	8007152 <_dtoa_r+0x4da>
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8087 	beq.w	8007152 <_dtoa_r+0x4da>
 8007044:	f1bb 0f00 	cmp.w	fp, #0
 8007048:	dd34      	ble.n	80070b4 <_dtoa_r+0x43c>
 800704a:	4620      	mov	r0, r4
 800704c:	4b6d      	ldr	r3, [pc, #436]	@ (8007204 <_dtoa_r+0x58c>)
 800704e:	2200      	movs	r2, #0
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fad9 	bl	8000608 <__aeabi_dmul>
 8007056:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800705a:	f107 38ff 	add.w	r8, r7, #4294967295
 800705e:	3601      	adds	r6, #1
 8007060:	465c      	mov	r4, fp
 8007062:	4630      	mov	r0, r6
 8007064:	f7f9 fa66 	bl	8000534 <__aeabi_i2d>
 8007068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800706c:	f7f9 facc 	bl	8000608 <__aeabi_dmul>
 8007070:	4b65      	ldr	r3, [pc, #404]	@ (8007208 <_dtoa_r+0x590>)
 8007072:	2200      	movs	r2, #0
 8007074:	f7f9 f912 	bl	800029c <__adddf3>
 8007078:	4605      	mov	r5, r0
 800707a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800707e:	2c00      	cmp	r4, #0
 8007080:	d16a      	bne.n	8007158 <_dtoa_r+0x4e0>
 8007082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007086:	4b61      	ldr	r3, [pc, #388]	@ (800720c <_dtoa_r+0x594>)
 8007088:	2200      	movs	r2, #0
 800708a:	f7f9 f905 	bl	8000298 <__aeabi_dsub>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007096:	462a      	mov	r2, r5
 8007098:	4633      	mov	r3, r6
 800709a:	f7f9 fd45 	bl	8000b28 <__aeabi_dcmpgt>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f040 8298 	bne.w	80075d4 <_dtoa_r+0x95c>
 80070a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070a8:	462a      	mov	r2, r5
 80070aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070ae:	f7f9 fd1d 	bl	8000aec <__aeabi_dcmplt>
 80070b2:	bb38      	cbnz	r0, 8007104 <_dtoa_r+0x48c>
 80070b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80070b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f2c0 8157 	blt.w	8007372 <_dtoa_r+0x6fa>
 80070c4:	2f0e      	cmp	r7, #14
 80070c6:	f300 8154 	bgt.w	8007372 <_dtoa_r+0x6fa>
 80070ca:	4b4b      	ldr	r3, [pc, #300]	@ (80071f8 <_dtoa_r+0x580>)
 80070cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070d0:	ed93 7b00 	vldr	d7, [r3]
 80070d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	ed8d 7b00 	vstr	d7, [sp]
 80070dc:	f280 80e5 	bge.w	80072aa <_dtoa_r+0x632>
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f300 80e1 	bgt.w	80072aa <_dtoa_r+0x632>
 80070e8:	d10c      	bne.n	8007104 <_dtoa_r+0x48c>
 80070ea:	4b48      	ldr	r3, [pc, #288]	@ (800720c <_dtoa_r+0x594>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	ec51 0b17 	vmov	r0, r1, d7
 80070f2:	f7f9 fa89 	bl	8000608 <__aeabi_dmul>
 80070f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070fa:	f7f9 fd0b 	bl	8000b14 <__aeabi_dcmpge>
 80070fe:	2800      	cmp	r0, #0
 8007100:	f000 8266 	beq.w	80075d0 <_dtoa_r+0x958>
 8007104:	2400      	movs	r4, #0
 8007106:	4625      	mov	r5, r4
 8007108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800710a:	4656      	mov	r6, sl
 800710c:	ea6f 0803 	mvn.w	r8, r3
 8007110:	2700      	movs	r7, #0
 8007112:	4621      	mov	r1, r4
 8007114:	4648      	mov	r0, r9
 8007116:	f000 fcbf 	bl	8007a98 <_Bfree>
 800711a:	2d00      	cmp	r5, #0
 800711c:	f000 80bd 	beq.w	800729a <_dtoa_r+0x622>
 8007120:	b12f      	cbz	r7, 800712e <_dtoa_r+0x4b6>
 8007122:	42af      	cmp	r7, r5
 8007124:	d003      	beq.n	800712e <_dtoa_r+0x4b6>
 8007126:	4639      	mov	r1, r7
 8007128:	4648      	mov	r0, r9
 800712a:	f000 fcb5 	bl	8007a98 <_Bfree>
 800712e:	4629      	mov	r1, r5
 8007130:	4648      	mov	r0, r9
 8007132:	f000 fcb1 	bl	8007a98 <_Bfree>
 8007136:	e0b0      	b.n	800729a <_dtoa_r+0x622>
 8007138:	07e2      	lsls	r2, r4, #31
 800713a:	d505      	bpl.n	8007148 <_dtoa_r+0x4d0>
 800713c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007140:	f7f9 fa62 	bl	8000608 <__aeabi_dmul>
 8007144:	3601      	adds	r6, #1
 8007146:	2301      	movs	r3, #1
 8007148:	1064      	asrs	r4, r4, #1
 800714a:	3508      	adds	r5, #8
 800714c:	e762      	b.n	8007014 <_dtoa_r+0x39c>
 800714e:	2602      	movs	r6, #2
 8007150:	e765      	b.n	800701e <_dtoa_r+0x3a6>
 8007152:	9c03      	ldr	r4, [sp, #12]
 8007154:	46b8      	mov	r8, r7
 8007156:	e784      	b.n	8007062 <_dtoa_r+0x3ea>
 8007158:	4b27      	ldr	r3, [pc, #156]	@ (80071f8 <_dtoa_r+0x580>)
 800715a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800715c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007160:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007164:	4454      	add	r4, sl
 8007166:	2900      	cmp	r1, #0
 8007168:	d054      	beq.n	8007214 <_dtoa_r+0x59c>
 800716a:	4929      	ldr	r1, [pc, #164]	@ (8007210 <_dtoa_r+0x598>)
 800716c:	2000      	movs	r0, #0
 800716e:	f7f9 fb75 	bl	800085c <__aeabi_ddiv>
 8007172:	4633      	mov	r3, r6
 8007174:	462a      	mov	r2, r5
 8007176:	f7f9 f88f 	bl	8000298 <__aeabi_dsub>
 800717a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800717e:	4656      	mov	r6, sl
 8007180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007184:	f7f9 fcf0 	bl	8000b68 <__aeabi_d2iz>
 8007188:	4605      	mov	r5, r0
 800718a:	f7f9 f9d3 	bl	8000534 <__aeabi_i2d>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007196:	f7f9 f87f 	bl	8000298 <__aeabi_dsub>
 800719a:	3530      	adds	r5, #48	@ 0x30
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071a4:	f806 5b01 	strb.w	r5, [r6], #1
 80071a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071ac:	f7f9 fc9e 	bl	8000aec <__aeabi_dcmplt>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d172      	bne.n	800729a <_dtoa_r+0x622>
 80071b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071b8:	4911      	ldr	r1, [pc, #68]	@ (8007200 <_dtoa_r+0x588>)
 80071ba:	2000      	movs	r0, #0
 80071bc:	f7f9 f86c 	bl	8000298 <__aeabi_dsub>
 80071c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071c4:	f7f9 fc92 	bl	8000aec <__aeabi_dcmplt>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	f040 80b4 	bne.w	8007336 <_dtoa_r+0x6be>
 80071ce:	42a6      	cmp	r6, r4
 80071d0:	f43f af70 	beq.w	80070b4 <_dtoa_r+0x43c>
 80071d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80071d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007204 <_dtoa_r+0x58c>)
 80071da:	2200      	movs	r2, #0
 80071dc:	f7f9 fa14 	bl	8000608 <__aeabi_dmul>
 80071e0:	4b08      	ldr	r3, [pc, #32]	@ (8007204 <_dtoa_r+0x58c>)
 80071e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80071e6:	2200      	movs	r2, #0
 80071e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ec:	f7f9 fa0c 	bl	8000608 <__aeabi_dmul>
 80071f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071f4:	e7c4      	b.n	8007180 <_dtoa_r+0x508>
 80071f6:	bf00      	nop
 80071f8:	08008a80 	.word	0x08008a80
 80071fc:	08008a58 	.word	0x08008a58
 8007200:	3ff00000 	.word	0x3ff00000
 8007204:	40240000 	.word	0x40240000
 8007208:	401c0000 	.word	0x401c0000
 800720c:	40140000 	.word	0x40140000
 8007210:	3fe00000 	.word	0x3fe00000
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	f7f9 f9f6 	bl	8000608 <__aeabi_dmul>
 800721c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007220:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007222:	4656      	mov	r6, sl
 8007224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007228:	f7f9 fc9e 	bl	8000b68 <__aeabi_d2iz>
 800722c:	4605      	mov	r5, r0
 800722e:	f7f9 f981 	bl	8000534 <__aeabi_i2d>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800723a:	f7f9 f82d 	bl	8000298 <__aeabi_dsub>
 800723e:	3530      	adds	r5, #48	@ 0x30
 8007240:	f806 5b01 	strb.w	r5, [r6], #1
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	42a6      	cmp	r6, r4
 800724a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	d124      	bne.n	800729e <_dtoa_r+0x626>
 8007254:	4baf      	ldr	r3, [pc, #700]	@ (8007514 <_dtoa_r+0x89c>)
 8007256:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800725a:	f7f9 f81f 	bl	800029c <__adddf3>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007266:	f7f9 fc5f 	bl	8000b28 <__aeabi_dcmpgt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d163      	bne.n	8007336 <_dtoa_r+0x6be>
 800726e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007272:	49a8      	ldr	r1, [pc, #672]	@ (8007514 <_dtoa_r+0x89c>)
 8007274:	2000      	movs	r0, #0
 8007276:	f7f9 f80f 	bl	8000298 <__aeabi_dsub>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007282:	f7f9 fc33 	bl	8000aec <__aeabi_dcmplt>
 8007286:	2800      	cmp	r0, #0
 8007288:	f43f af14 	beq.w	80070b4 <_dtoa_r+0x43c>
 800728c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800728e:	1e73      	subs	r3, r6, #1
 8007290:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007292:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007296:	2b30      	cmp	r3, #48	@ 0x30
 8007298:	d0f8      	beq.n	800728c <_dtoa_r+0x614>
 800729a:	4647      	mov	r7, r8
 800729c:	e03b      	b.n	8007316 <_dtoa_r+0x69e>
 800729e:	4b9e      	ldr	r3, [pc, #632]	@ (8007518 <_dtoa_r+0x8a0>)
 80072a0:	f7f9 f9b2 	bl	8000608 <__aeabi_dmul>
 80072a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072a8:	e7bc      	b.n	8007224 <_dtoa_r+0x5ac>
 80072aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80072ae:	4656      	mov	r6, sl
 80072b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072b4:	4620      	mov	r0, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	f7f9 fad0 	bl	800085c <__aeabi_ddiv>
 80072bc:	f7f9 fc54 	bl	8000b68 <__aeabi_d2iz>
 80072c0:	4680      	mov	r8, r0
 80072c2:	f7f9 f937 	bl	8000534 <__aeabi_i2d>
 80072c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ca:	f7f9 f99d 	bl	8000608 <__aeabi_dmul>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072da:	f7f8 ffdd 	bl	8000298 <__aeabi_dsub>
 80072de:	f806 4b01 	strb.w	r4, [r6], #1
 80072e2:	9d03      	ldr	r5, [sp, #12]
 80072e4:	eba6 040a 	sub.w	r4, r6, sl
 80072e8:	42a5      	cmp	r5, r4
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	d133      	bne.n	8007358 <_dtoa_r+0x6e0>
 80072f0:	f7f8 ffd4 	bl	800029c <__adddf3>
 80072f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072f8:	4604      	mov	r4, r0
 80072fa:	460d      	mov	r5, r1
 80072fc:	f7f9 fc14 	bl	8000b28 <__aeabi_dcmpgt>
 8007300:	b9c0      	cbnz	r0, 8007334 <_dtoa_r+0x6bc>
 8007302:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007306:	4620      	mov	r0, r4
 8007308:	4629      	mov	r1, r5
 800730a:	f7f9 fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 800730e:	b110      	cbz	r0, 8007316 <_dtoa_r+0x69e>
 8007310:	f018 0f01 	tst.w	r8, #1
 8007314:	d10e      	bne.n	8007334 <_dtoa_r+0x6bc>
 8007316:	9902      	ldr	r1, [sp, #8]
 8007318:	4648      	mov	r0, r9
 800731a:	f000 fbbd 	bl	8007a98 <_Bfree>
 800731e:	2300      	movs	r3, #0
 8007320:	7033      	strb	r3, [r6, #0]
 8007322:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007324:	3701      	adds	r7, #1
 8007326:	601f      	str	r7, [r3, #0]
 8007328:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 824b 	beq.w	80077c6 <_dtoa_r+0xb4e>
 8007330:	601e      	str	r6, [r3, #0]
 8007332:	e248      	b.n	80077c6 <_dtoa_r+0xb4e>
 8007334:	46b8      	mov	r8, r7
 8007336:	4633      	mov	r3, r6
 8007338:	461e      	mov	r6, r3
 800733a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800733e:	2a39      	cmp	r2, #57	@ 0x39
 8007340:	d106      	bne.n	8007350 <_dtoa_r+0x6d8>
 8007342:	459a      	cmp	sl, r3
 8007344:	d1f8      	bne.n	8007338 <_dtoa_r+0x6c0>
 8007346:	2230      	movs	r2, #48	@ 0x30
 8007348:	f108 0801 	add.w	r8, r8, #1
 800734c:	f88a 2000 	strb.w	r2, [sl]
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	3201      	adds	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e7a0      	b.n	800729a <_dtoa_r+0x622>
 8007358:	4b6f      	ldr	r3, [pc, #444]	@ (8007518 <_dtoa_r+0x8a0>)
 800735a:	2200      	movs	r2, #0
 800735c:	f7f9 f954 	bl	8000608 <__aeabi_dmul>
 8007360:	2200      	movs	r2, #0
 8007362:	2300      	movs	r3, #0
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	f7f9 fbb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800736c:	2800      	cmp	r0, #0
 800736e:	d09f      	beq.n	80072b0 <_dtoa_r+0x638>
 8007370:	e7d1      	b.n	8007316 <_dtoa_r+0x69e>
 8007372:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007374:	2a00      	cmp	r2, #0
 8007376:	f000 80ea 	beq.w	800754e <_dtoa_r+0x8d6>
 800737a:	9a07      	ldr	r2, [sp, #28]
 800737c:	2a01      	cmp	r2, #1
 800737e:	f300 80cd 	bgt.w	800751c <_dtoa_r+0x8a4>
 8007382:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007384:	2a00      	cmp	r2, #0
 8007386:	f000 80c1 	beq.w	800750c <_dtoa_r+0x894>
 800738a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800738e:	9c08      	ldr	r4, [sp, #32]
 8007390:	9e00      	ldr	r6, [sp, #0]
 8007392:	9a00      	ldr	r2, [sp, #0]
 8007394:	441a      	add	r2, r3
 8007396:	9200      	str	r2, [sp, #0]
 8007398:	9a06      	ldr	r2, [sp, #24]
 800739a:	2101      	movs	r1, #1
 800739c:	441a      	add	r2, r3
 800739e:	4648      	mov	r0, r9
 80073a0:	9206      	str	r2, [sp, #24]
 80073a2:	f000 fc2d 	bl	8007c00 <__i2b>
 80073a6:	4605      	mov	r5, r0
 80073a8:	b166      	cbz	r6, 80073c4 <_dtoa_r+0x74c>
 80073aa:	9b06      	ldr	r3, [sp, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd09      	ble.n	80073c4 <_dtoa_r+0x74c>
 80073b0:	42b3      	cmp	r3, r6
 80073b2:	9a00      	ldr	r2, [sp, #0]
 80073b4:	bfa8      	it	ge
 80073b6:	4633      	movge	r3, r6
 80073b8:	1ad2      	subs	r2, r2, r3
 80073ba:	9200      	str	r2, [sp, #0]
 80073bc:	9a06      	ldr	r2, [sp, #24]
 80073be:	1af6      	subs	r6, r6, r3
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	9306      	str	r3, [sp, #24]
 80073c4:	9b08      	ldr	r3, [sp, #32]
 80073c6:	b30b      	cbz	r3, 800740c <_dtoa_r+0x794>
 80073c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 80c6 	beq.w	800755c <_dtoa_r+0x8e4>
 80073d0:	2c00      	cmp	r4, #0
 80073d2:	f000 80c0 	beq.w	8007556 <_dtoa_r+0x8de>
 80073d6:	4629      	mov	r1, r5
 80073d8:	4622      	mov	r2, r4
 80073da:	4648      	mov	r0, r9
 80073dc:	f000 fcc8 	bl	8007d70 <__pow5mult>
 80073e0:	9a02      	ldr	r2, [sp, #8]
 80073e2:	4601      	mov	r1, r0
 80073e4:	4605      	mov	r5, r0
 80073e6:	4648      	mov	r0, r9
 80073e8:	f000 fc20 	bl	8007c2c <__multiply>
 80073ec:	9902      	ldr	r1, [sp, #8]
 80073ee:	4680      	mov	r8, r0
 80073f0:	4648      	mov	r0, r9
 80073f2:	f000 fb51 	bl	8007a98 <_Bfree>
 80073f6:	9b08      	ldr	r3, [sp, #32]
 80073f8:	1b1b      	subs	r3, r3, r4
 80073fa:	9308      	str	r3, [sp, #32]
 80073fc:	f000 80b1 	beq.w	8007562 <_dtoa_r+0x8ea>
 8007400:	9a08      	ldr	r2, [sp, #32]
 8007402:	4641      	mov	r1, r8
 8007404:	4648      	mov	r0, r9
 8007406:	f000 fcb3 	bl	8007d70 <__pow5mult>
 800740a:	9002      	str	r0, [sp, #8]
 800740c:	2101      	movs	r1, #1
 800740e:	4648      	mov	r0, r9
 8007410:	f000 fbf6 	bl	8007c00 <__i2b>
 8007414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007416:	4604      	mov	r4, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 81d8 	beq.w	80077ce <_dtoa_r+0xb56>
 800741e:	461a      	mov	r2, r3
 8007420:	4601      	mov	r1, r0
 8007422:	4648      	mov	r0, r9
 8007424:	f000 fca4 	bl	8007d70 <__pow5mult>
 8007428:	9b07      	ldr	r3, [sp, #28]
 800742a:	2b01      	cmp	r3, #1
 800742c:	4604      	mov	r4, r0
 800742e:	f300 809f 	bgt.w	8007570 <_dtoa_r+0x8f8>
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 8097 	bne.w	8007568 <_dtoa_r+0x8f0>
 800743a:	9b05      	ldr	r3, [sp, #20]
 800743c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007440:	2b00      	cmp	r3, #0
 8007442:	f040 8093 	bne.w	800756c <_dtoa_r+0x8f4>
 8007446:	9b05      	ldr	r3, [sp, #20]
 8007448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800744c:	0d1b      	lsrs	r3, r3, #20
 800744e:	051b      	lsls	r3, r3, #20
 8007450:	b133      	cbz	r3, 8007460 <_dtoa_r+0x7e8>
 8007452:	9b00      	ldr	r3, [sp, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	3301      	adds	r3, #1
 800745c:	9306      	str	r3, [sp, #24]
 800745e:	2301      	movs	r3, #1
 8007460:	9308      	str	r3, [sp, #32]
 8007462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 81b8 	beq.w	80077da <_dtoa_r+0xb62>
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007470:	6918      	ldr	r0, [r3, #16]
 8007472:	f000 fb79 	bl	8007b68 <__hi0bits>
 8007476:	f1c0 0020 	rsb	r0, r0, #32
 800747a:	9b06      	ldr	r3, [sp, #24]
 800747c:	4418      	add	r0, r3
 800747e:	f010 001f 	ands.w	r0, r0, #31
 8007482:	f000 8082 	beq.w	800758a <_dtoa_r+0x912>
 8007486:	f1c0 0320 	rsb	r3, r0, #32
 800748a:	2b04      	cmp	r3, #4
 800748c:	dd73      	ble.n	8007576 <_dtoa_r+0x8fe>
 800748e:	9b00      	ldr	r3, [sp, #0]
 8007490:	f1c0 001c 	rsb	r0, r0, #28
 8007494:	4403      	add	r3, r0
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	4403      	add	r3, r0
 800749c:	4406      	add	r6, r0
 800749e:	9306      	str	r3, [sp, #24]
 80074a0:	9b00      	ldr	r3, [sp, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	dd05      	ble.n	80074b2 <_dtoa_r+0x83a>
 80074a6:	9902      	ldr	r1, [sp, #8]
 80074a8:	461a      	mov	r2, r3
 80074aa:	4648      	mov	r0, r9
 80074ac:	f000 fcba 	bl	8007e24 <__lshift>
 80074b0:	9002      	str	r0, [sp, #8]
 80074b2:	9b06      	ldr	r3, [sp, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dd05      	ble.n	80074c4 <_dtoa_r+0x84c>
 80074b8:	4621      	mov	r1, r4
 80074ba:	461a      	mov	r2, r3
 80074bc:	4648      	mov	r0, r9
 80074be:	f000 fcb1 	bl	8007e24 <__lshift>
 80074c2:	4604      	mov	r4, r0
 80074c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d061      	beq.n	800758e <_dtoa_r+0x916>
 80074ca:	9802      	ldr	r0, [sp, #8]
 80074cc:	4621      	mov	r1, r4
 80074ce:	f000 fd15 	bl	8007efc <__mcmp>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	da5b      	bge.n	800758e <_dtoa_r+0x916>
 80074d6:	2300      	movs	r3, #0
 80074d8:	9902      	ldr	r1, [sp, #8]
 80074da:	220a      	movs	r2, #10
 80074dc:	4648      	mov	r0, r9
 80074de:	f000 fafd 	bl	8007adc <__multadd>
 80074e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e4:	9002      	str	r0, [sp, #8]
 80074e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 8177 	beq.w	80077de <_dtoa_r+0xb66>
 80074f0:	4629      	mov	r1, r5
 80074f2:	2300      	movs	r3, #0
 80074f4:	220a      	movs	r2, #10
 80074f6:	4648      	mov	r0, r9
 80074f8:	f000 faf0 	bl	8007adc <__multadd>
 80074fc:	f1bb 0f00 	cmp.w	fp, #0
 8007500:	4605      	mov	r5, r0
 8007502:	dc6f      	bgt.n	80075e4 <_dtoa_r+0x96c>
 8007504:	9b07      	ldr	r3, [sp, #28]
 8007506:	2b02      	cmp	r3, #2
 8007508:	dc49      	bgt.n	800759e <_dtoa_r+0x926>
 800750a:	e06b      	b.n	80075e4 <_dtoa_r+0x96c>
 800750c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800750e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007512:	e73c      	b.n	800738e <_dtoa_r+0x716>
 8007514:	3fe00000 	.word	0x3fe00000
 8007518:	40240000 	.word	0x40240000
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	1e5c      	subs	r4, r3, #1
 8007520:	9b08      	ldr	r3, [sp, #32]
 8007522:	42a3      	cmp	r3, r4
 8007524:	db09      	blt.n	800753a <_dtoa_r+0x8c2>
 8007526:	1b1c      	subs	r4, r3, r4
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	f6bf af30 	bge.w	8007390 <_dtoa_r+0x718>
 8007530:	9b00      	ldr	r3, [sp, #0]
 8007532:	9a03      	ldr	r2, [sp, #12]
 8007534:	1a9e      	subs	r6, r3, r2
 8007536:	2300      	movs	r3, #0
 8007538:	e72b      	b.n	8007392 <_dtoa_r+0x71a>
 800753a:	9b08      	ldr	r3, [sp, #32]
 800753c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800753e:	9408      	str	r4, [sp, #32]
 8007540:	1ae3      	subs	r3, r4, r3
 8007542:	441a      	add	r2, r3
 8007544:	9e00      	ldr	r6, [sp, #0]
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	920d      	str	r2, [sp, #52]	@ 0x34
 800754a:	2400      	movs	r4, #0
 800754c:	e721      	b.n	8007392 <_dtoa_r+0x71a>
 800754e:	9c08      	ldr	r4, [sp, #32]
 8007550:	9e00      	ldr	r6, [sp, #0]
 8007552:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007554:	e728      	b.n	80073a8 <_dtoa_r+0x730>
 8007556:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800755a:	e751      	b.n	8007400 <_dtoa_r+0x788>
 800755c:	9a08      	ldr	r2, [sp, #32]
 800755e:	9902      	ldr	r1, [sp, #8]
 8007560:	e750      	b.n	8007404 <_dtoa_r+0x78c>
 8007562:	f8cd 8008 	str.w	r8, [sp, #8]
 8007566:	e751      	b.n	800740c <_dtoa_r+0x794>
 8007568:	2300      	movs	r3, #0
 800756a:	e779      	b.n	8007460 <_dtoa_r+0x7e8>
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	e777      	b.n	8007460 <_dtoa_r+0x7e8>
 8007570:	2300      	movs	r3, #0
 8007572:	9308      	str	r3, [sp, #32]
 8007574:	e779      	b.n	800746a <_dtoa_r+0x7f2>
 8007576:	d093      	beq.n	80074a0 <_dtoa_r+0x828>
 8007578:	9a00      	ldr	r2, [sp, #0]
 800757a:	331c      	adds	r3, #28
 800757c:	441a      	add	r2, r3
 800757e:	9200      	str	r2, [sp, #0]
 8007580:	9a06      	ldr	r2, [sp, #24]
 8007582:	441a      	add	r2, r3
 8007584:	441e      	add	r6, r3
 8007586:	9206      	str	r2, [sp, #24]
 8007588:	e78a      	b.n	80074a0 <_dtoa_r+0x828>
 800758a:	4603      	mov	r3, r0
 800758c:	e7f4      	b.n	8007578 <_dtoa_r+0x900>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	46b8      	mov	r8, r7
 8007594:	dc20      	bgt.n	80075d8 <_dtoa_r+0x960>
 8007596:	469b      	mov	fp, r3
 8007598:	9b07      	ldr	r3, [sp, #28]
 800759a:	2b02      	cmp	r3, #2
 800759c:	dd1e      	ble.n	80075dc <_dtoa_r+0x964>
 800759e:	f1bb 0f00 	cmp.w	fp, #0
 80075a2:	f47f adb1 	bne.w	8007108 <_dtoa_r+0x490>
 80075a6:	4621      	mov	r1, r4
 80075a8:	465b      	mov	r3, fp
 80075aa:	2205      	movs	r2, #5
 80075ac:	4648      	mov	r0, r9
 80075ae:	f000 fa95 	bl	8007adc <__multadd>
 80075b2:	4601      	mov	r1, r0
 80075b4:	4604      	mov	r4, r0
 80075b6:	9802      	ldr	r0, [sp, #8]
 80075b8:	f000 fca0 	bl	8007efc <__mcmp>
 80075bc:	2800      	cmp	r0, #0
 80075be:	f77f ada3 	ble.w	8007108 <_dtoa_r+0x490>
 80075c2:	4656      	mov	r6, sl
 80075c4:	2331      	movs	r3, #49	@ 0x31
 80075c6:	f806 3b01 	strb.w	r3, [r6], #1
 80075ca:	f108 0801 	add.w	r8, r8, #1
 80075ce:	e59f      	b.n	8007110 <_dtoa_r+0x498>
 80075d0:	9c03      	ldr	r4, [sp, #12]
 80075d2:	46b8      	mov	r8, r7
 80075d4:	4625      	mov	r5, r4
 80075d6:	e7f4      	b.n	80075c2 <_dtoa_r+0x94a>
 80075d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80075dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 8101 	beq.w	80077e6 <_dtoa_r+0xb6e>
 80075e4:	2e00      	cmp	r6, #0
 80075e6:	dd05      	ble.n	80075f4 <_dtoa_r+0x97c>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4632      	mov	r2, r6
 80075ec:	4648      	mov	r0, r9
 80075ee:	f000 fc19 	bl	8007e24 <__lshift>
 80075f2:	4605      	mov	r5, r0
 80075f4:	9b08      	ldr	r3, [sp, #32]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d05c      	beq.n	80076b4 <_dtoa_r+0xa3c>
 80075fa:	6869      	ldr	r1, [r5, #4]
 80075fc:	4648      	mov	r0, r9
 80075fe:	f000 fa0b 	bl	8007a18 <_Balloc>
 8007602:	4606      	mov	r6, r0
 8007604:	b928      	cbnz	r0, 8007612 <_dtoa_r+0x99a>
 8007606:	4b82      	ldr	r3, [pc, #520]	@ (8007810 <_dtoa_r+0xb98>)
 8007608:	4602      	mov	r2, r0
 800760a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800760e:	f7ff bb4a 	b.w	8006ca6 <_dtoa_r+0x2e>
 8007612:	692a      	ldr	r2, [r5, #16]
 8007614:	3202      	adds	r2, #2
 8007616:	0092      	lsls	r2, r2, #2
 8007618:	f105 010c 	add.w	r1, r5, #12
 800761c:	300c      	adds	r0, #12
 800761e:	f000 fff7 	bl	8008610 <memcpy>
 8007622:	2201      	movs	r2, #1
 8007624:	4631      	mov	r1, r6
 8007626:	4648      	mov	r0, r9
 8007628:	f000 fbfc 	bl	8007e24 <__lshift>
 800762c:	f10a 0301 	add.w	r3, sl, #1
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	eb0a 030b 	add.w	r3, sl, fp
 8007636:	9308      	str	r3, [sp, #32]
 8007638:	9b04      	ldr	r3, [sp, #16]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	462f      	mov	r7, r5
 8007640:	9306      	str	r3, [sp, #24]
 8007642:	4605      	mov	r5, r0
 8007644:	9b00      	ldr	r3, [sp, #0]
 8007646:	9802      	ldr	r0, [sp, #8]
 8007648:	4621      	mov	r1, r4
 800764a:	f103 3bff 	add.w	fp, r3, #4294967295
 800764e:	f7ff fa8a 	bl	8006b66 <quorem>
 8007652:	4603      	mov	r3, r0
 8007654:	3330      	adds	r3, #48	@ 0x30
 8007656:	9003      	str	r0, [sp, #12]
 8007658:	4639      	mov	r1, r7
 800765a:	9802      	ldr	r0, [sp, #8]
 800765c:	9309      	str	r3, [sp, #36]	@ 0x24
 800765e:	f000 fc4d 	bl	8007efc <__mcmp>
 8007662:	462a      	mov	r2, r5
 8007664:	9004      	str	r0, [sp, #16]
 8007666:	4621      	mov	r1, r4
 8007668:	4648      	mov	r0, r9
 800766a:	f000 fc63 	bl	8007f34 <__mdiff>
 800766e:	68c2      	ldr	r2, [r0, #12]
 8007670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007672:	4606      	mov	r6, r0
 8007674:	bb02      	cbnz	r2, 80076b8 <_dtoa_r+0xa40>
 8007676:	4601      	mov	r1, r0
 8007678:	9802      	ldr	r0, [sp, #8]
 800767a:	f000 fc3f 	bl	8007efc <__mcmp>
 800767e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007680:	4602      	mov	r2, r0
 8007682:	4631      	mov	r1, r6
 8007684:	4648      	mov	r0, r9
 8007686:	920c      	str	r2, [sp, #48]	@ 0x30
 8007688:	9309      	str	r3, [sp, #36]	@ 0x24
 800768a:	f000 fa05 	bl	8007a98 <_Bfree>
 800768e:	9b07      	ldr	r3, [sp, #28]
 8007690:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007692:	9e00      	ldr	r6, [sp, #0]
 8007694:	ea42 0103 	orr.w	r1, r2, r3
 8007698:	9b06      	ldr	r3, [sp, #24]
 800769a:	4319      	orrs	r1, r3
 800769c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769e:	d10d      	bne.n	80076bc <_dtoa_r+0xa44>
 80076a0:	2b39      	cmp	r3, #57	@ 0x39
 80076a2:	d027      	beq.n	80076f4 <_dtoa_r+0xa7c>
 80076a4:	9a04      	ldr	r2, [sp, #16]
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	dd01      	ble.n	80076ae <_dtoa_r+0xa36>
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	3331      	adds	r3, #49	@ 0x31
 80076ae:	f88b 3000 	strb.w	r3, [fp]
 80076b2:	e52e      	b.n	8007112 <_dtoa_r+0x49a>
 80076b4:	4628      	mov	r0, r5
 80076b6:	e7b9      	b.n	800762c <_dtoa_r+0x9b4>
 80076b8:	2201      	movs	r2, #1
 80076ba:	e7e2      	b.n	8007682 <_dtoa_r+0xa0a>
 80076bc:	9904      	ldr	r1, [sp, #16]
 80076be:	2900      	cmp	r1, #0
 80076c0:	db04      	blt.n	80076cc <_dtoa_r+0xa54>
 80076c2:	9807      	ldr	r0, [sp, #28]
 80076c4:	4301      	orrs	r1, r0
 80076c6:	9806      	ldr	r0, [sp, #24]
 80076c8:	4301      	orrs	r1, r0
 80076ca:	d120      	bne.n	800770e <_dtoa_r+0xa96>
 80076cc:	2a00      	cmp	r2, #0
 80076ce:	ddee      	ble.n	80076ae <_dtoa_r+0xa36>
 80076d0:	9902      	ldr	r1, [sp, #8]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2201      	movs	r2, #1
 80076d6:	4648      	mov	r0, r9
 80076d8:	f000 fba4 	bl	8007e24 <__lshift>
 80076dc:	4621      	mov	r1, r4
 80076de:	9002      	str	r0, [sp, #8]
 80076e0:	f000 fc0c 	bl	8007efc <__mcmp>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	dc02      	bgt.n	80076f0 <_dtoa_r+0xa78>
 80076ea:	d1e0      	bne.n	80076ae <_dtoa_r+0xa36>
 80076ec:	07da      	lsls	r2, r3, #31
 80076ee:	d5de      	bpl.n	80076ae <_dtoa_r+0xa36>
 80076f0:	2b39      	cmp	r3, #57	@ 0x39
 80076f2:	d1da      	bne.n	80076aa <_dtoa_r+0xa32>
 80076f4:	2339      	movs	r3, #57	@ 0x39
 80076f6:	f88b 3000 	strb.w	r3, [fp]
 80076fa:	4633      	mov	r3, r6
 80076fc:	461e      	mov	r6, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007704:	2a39      	cmp	r2, #57	@ 0x39
 8007706:	d04e      	beq.n	80077a6 <_dtoa_r+0xb2e>
 8007708:	3201      	adds	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e501      	b.n	8007112 <_dtoa_r+0x49a>
 800770e:	2a00      	cmp	r2, #0
 8007710:	dd03      	ble.n	800771a <_dtoa_r+0xaa2>
 8007712:	2b39      	cmp	r3, #57	@ 0x39
 8007714:	d0ee      	beq.n	80076f4 <_dtoa_r+0xa7c>
 8007716:	3301      	adds	r3, #1
 8007718:	e7c9      	b.n	80076ae <_dtoa_r+0xa36>
 800771a:	9a00      	ldr	r2, [sp, #0]
 800771c:	9908      	ldr	r1, [sp, #32]
 800771e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007722:	428a      	cmp	r2, r1
 8007724:	d028      	beq.n	8007778 <_dtoa_r+0xb00>
 8007726:	9902      	ldr	r1, [sp, #8]
 8007728:	2300      	movs	r3, #0
 800772a:	220a      	movs	r2, #10
 800772c:	4648      	mov	r0, r9
 800772e:	f000 f9d5 	bl	8007adc <__multadd>
 8007732:	42af      	cmp	r7, r5
 8007734:	9002      	str	r0, [sp, #8]
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	f04f 020a 	mov.w	r2, #10
 800773e:	4639      	mov	r1, r7
 8007740:	4648      	mov	r0, r9
 8007742:	d107      	bne.n	8007754 <_dtoa_r+0xadc>
 8007744:	f000 f9ca 	bl	8007adc <__multadd>
 8007748:	4607      	mov	r7, r0
 800774a:	4605      	mov	r5, r0
 800774c:	9b00      	ldr	r3, [sp, #0]
 800774e:	3301      	adds	r3, #1
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	e777      	b.n	8007644 <_dtoa_r+0x9cc>
 8007754:	f000 f9c2 	bl	8007adc <__multadd>
 8007758:	4629      	mov	r1, r5
 800775a:	4607      	mov	r7, r0
 800775c:	2300      	movs	r3, #0
 800775e:	220a      	movs	r2, #10
 8007760:	4648      	mov	r0, r9
 8007762:	f000 f9bb 	bl	8007adc <__multadd>
 8007766:	4605      	mov	r5, r0
 8007768:	e7f0      	b.n	800774c <_dtoa_r+0xad4>
 800776a:	f1bb 0f00 	cmp.w	fp, #0
 800776e:	bfcc      	ite	gt
 8007770:	465e      	movgt	r6, fp
 8007772:	2601      	movle	r6, #1
 8007774:	4456      	add	r6, sl
 8007776:	2700      	movs	r7, #0
 8007778:	9902      	ldr	r1, [sp, #8]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	2201      	movs	r2, #1
 800777e:	4648      	mov	r0, r9
 8007780:	f000 fb50 	bl	8007e24 <__lshift>
 8007784:	4621      	mov	r1, r4
 8007786:	9002      	str	r0, [sp, #8]
 8007788:	f000 fbb8 	bl	8007efc <__mcmp>
 800778c:	2800      	cmp	r0, #0
 800778e:	dcb4      	bgt.n	80076fa <_dtoa_r+0xa82>
 8007790:	d102      	bne.n	8007798 <_dtoa_r+0xb20>
 8007792:	9b00      	ldr	r3, [sp, #0]
 8007794:	07db      	lsls	r3, r3, #31
 8007796:	d4b0      	bmi.n	80076fa <_dtoa_r+0xa82>
 8007798:	4633      	mov	r3, r6
 800779a:	461e      	mov	r6, r3
 800779c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077a0:	2a30      	cmp	r2, #48	@ 0x30
 80077a2:	d0fa      	beq.n	800779a <_dtoa_r+0xb22>
 80077a4:	e4b5      	b.n	8007112 <_dtoa_r+0x49a>
 80077a6:	459a      	cmp	sl, r3
 80077a8:	d1a8      	bne.n	80076fc <_dtoa_r+0xa84>
 80077aa:	2331      	movs	r3, #49	@ 0x31
 80077ac:	f108 0801 	add.w	r8, r8, #1
 80077b0:	f88a 3000 	strb.w	r3, [sl]
 80077b4:	e4ad      	b.n	8007112 <_dtoa_r+0x49a>
 80077b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007814 <_dtoa_r+0xb9c>
 80077bc:	b11b      	cbz	r3, 80077c6 <_dtoa_r+0xb4e>
 80077be:	f10a 0308 	add.w	r3, sl, #8
 80077c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	4650      	mov	r0, sl
 80077c8:	b017      	add	sp, #92	@ 0x5c
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	9b07      	ldr	r3, [sp, #28]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	f77f ae2e 	ble.w	8007432 <_dtoa_r+0x7ba>
 80077d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077d8:	9308      	str	r3, [sp, #32]
 80077da:	2001      	movs	r0, #1
 80077dc:	e64d      	b.n	800747a <_dtoa_r+0x802>
 80077de:	f1bb 0f00 	cmp.w	fp, #0
 80077e2:	f77f aed9 	ble.w	8007598 <_dtoa_r+0x920>
 80077e6:	4656      	mov	r6, sl
 80077e8:	9802      	ldr	r0, [sp, #8]
 80077ea:	4621      	mov	r1, r4
 80077ec:	f7ff f9bb 	bl	8006b66 <quorem>
 80077f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80077f4:	f806 3b01 	strb.w	r3, [r6], #1
 80077f8:	eba6 020a 	sub.w	r2, r6, sl
 80077fc:	4593      	cmp	fp, r2
 80077fe:	ddb4      	ble.n	800776a <_dtoa_r+0xaf2>
 8007800:	9902      	ldr	r1, [sp, #8]
 8007802:	2300      	movs	r3, #0
 8007804:	220a      	movs	r2, #10
 8007806:	4648      	mov	r0, r9
 8007808:	f000 f968 	bl	8007adc <__multadd>
 800780c:	9002      	str	r0, [sp, #8]
 800780e:	e7eb      	b.n	80077e8 <_dtoa_r+0xb70>
 8007810:	08008988 	.word	0x08008988
 8007814:	0800890c 	.word	0x0800890c

08007818 <_free_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4605      	mov	r5, r0
 800781c:	2900      	cmp	r1, #0
 800781e:	d041      	beq.n	80078a4 <_free_r+0x8c>
 8007820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007824:	1f0c      	subs	r4, r1, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	bfb8      	it	lt
 800782a:	18e4      	addlt	r4, r4, r3
 800782c:	f000 f8e8 	bl	8007a00 <__malloc_lock>
 8007830:	4a1d      	ldr	r2, [pc, #116]	@ (80078a8 <_free_r+0x90>)
 8007832:	6813      	ldr	r3, [r2, #0]
 8007834:	b933      	cbnz	r3, 8007844 <_free_r+0x2c>
 8007836:	6063      	str	r3, [r4, #4]
 8007838:	6014      	str	r4, [r2, #0]
 800783a:	4628      	mov	r0, r5
 800783c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007840:	f000 b8e4 	b.w	8007a0c <__malloc_unlock>
 8007844:	42a3      	cmp	r3, r4
 8007846:	d908      	bls.n	800785a <_free_r+0x42>
 8007848:	6820      	ldr	r0, [r4, #0]
 800784a:	1821      	adds	r1, r4, r0
 800784c:	428b      	cmp	r3, r1
 800784e:	bf01      	itttt	eq
 8007850:	6819      	ldreq	r1, [r3, #0]
 8007852:	685b      	ldreq	r3, [r3, #4]
 8007854:	1809      	addeq	r1, r1, r0
 8007856:	6021      	streq	r1, [r4, #0]
 8007858:	e7ed      	b.n	8007836 <_free_r+0x1e>
 800785a:	461a      	mov	r2, r3
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	b10b      	cbz	r3, 8007864 <_free_r+0x4c>
 8007860:	42a3      	cmp	r3, r4
 8007862:	d9fa      	bls.n	800785a <_free_r+0x42>
 8007864:	6811      	ldr	r1, [r2, #0]
 8007866:	1850      	adds	r0, r2, r1
 8007868:	42a0      	cmp	r0, r4
 800786a:	d10b      	bne.n	8007884 <_free_r+0x6c>
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	4401      	add	r1, r0
 8007870:	1850      	adds	r0, r2, r1
 8007872:	4283      	cmp	r3, r0
 8007874:	6011      	str	r1, [r2, #0]
 8007876:	d1e0      	bne.n	800783a <_free_r+0x22>
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	6053      	str	r3, [r2, #4]
 800787e:	4408      	add	r0, r1
 8007880:	6010      	str	r0, [r2, #0]
 8007882:	e7da      	b.n	800783a <_free_r+0x22>
 8007884:	d902      	bls.n	800788c <_free_r+0x74>
 8007886:	230c      	movs	r3, #12
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	e7d6      	b.n	800783a <_free_r+0x22>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	1821      	adds	r1, r4, r0
 8007890:	428b      	cmp	r3, r1
 8007892:	bf04      	itt	eq
 8007894:	6819      	ldreq	r1, [r3, #0]
 8007896:	685b      	ldreq	r3, [r3, #4]
 8007898:	6063      	str	r3, [r4, #4]
 800789a:	bf04      	itt	eq
 800789c:	1809      	addeq	r1, r1, r0
 800789e:	6021      	streq	r1, [r4, #0]
 80078a0:	6054      	str	r4, [r2, #4]
 80078a2:	e7ca      	b.n	800783a <_free_r+0x22>
 80078a4:	bd38      	pop	{r3, r4, r5, pc}
 80078a6:	bf00      	nop
 80078a8:	20000434 	.word	0x20000434

080078ac <malloc>:
 80078ac:	4b02      	ldr	r3, [pc, #8]	@ (80078b8 <malloc+0xc>)
 80078ae:	4601      	mov	r1, r0
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	f000 b825 	b.w	8007900 <_malloc_r>
 80078b6:	bf00      	nop
 80078b8:	20000018 	.word	0x20000018

080078bc <sbrk_aligned>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	4e0f      	ldr	r6, [pc, #60]	@ (80078fc <sbrk_aligned+0x40>)
 80078c0:	460c      	mov	r4, r1
 80078c2:	6831      	ldr	r1, [r6, #0]
 80078c4:	4605      	mov	r5, r0
 80078c6:	b911      	cbnz	r1, 80078ce <sbrk_aligned+0x12>
 80078c8:	f000 fe92 	bl	80085f0 <_sbrk_r>
 80078cc:	6030      	str	r0, [r6, #0]
 80078ce:	4621      	mov	r1, r4
 80078d0:	4628      	mov	r0, r5
 80078d2:	f000 fe8d 	bl	80085f0 <_sbrk_r>
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	d103      	bne.n	80078e2 <sbrk_aligned+0x26>
 80078da:	f04f 34ff 	mov.w	r4, #4294967295
 80078de:	4620      	mov	r0, r4
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	1cc4      	adds	r4, r0, #3
 80078e4:	f024 0403 	bic.w	r4, r4, #3
 80078e8:	42a0      	cmp	r0, r4
 80078ea:	d0f8      	beq.n	80078de <sbrk_aligned+0x22>
 80078ec:	1a21      	subs	r1, r4, r0
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 fe7e 	bl	80085f0 <_sbrk_r>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1f2      	bne.n	80078de <sbrk_aligned+0x22>
 80078f8:	e7ef      	b.n	80078da <sbrk_aligned+0x1e>
 80078fa:	bf00      	nop
 80078fc:	20000430 	.word	0x20000430

08007900 <_malloc_r>:
 8007900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007904:	1ccd      	adds	r5, r1, #3
 8007906:	f025 0503 	bic.w	r5, r5, #3
 800790a:	3508      	adds	r5, #8
 800790c:	2d0c      	cmp	r5, #12
 800790e:	bf38      	it	cc
 8007910:	250c      	movcc	r5, #12
 8007912:	2d00      	cmp	r5, #0
 8007914:	4606      	mov	r6, r0
 8007916:	db01      	blt.n	800791c <_malloc_r+0x1c>
 8007918:	42a9      	cmp	r1, r5
 800791a:	d904      	bls.n	8007926 <_malloc_r+0x26>
 800791c:	230c      	movs	r3, #12
 800791e:	6033      	str	r3, [r6, #0]
 8007920:	2000      	movs	r0, #0
 8007922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007926:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079fc <_malloc_r+0xfc>
 800792a:	f000 f869 	bl	8007a00 <__malloc_lock>
 800792e:	f8d8 3000 	ldr.w	r3, [r8]
 8007932:	461c      	mov	r4, r3
 8007934:	bb44      	cbnz	r4, 8007988 <_malloc_r+0x88>
 8007936:	4629      	mov	r1, r5
 8007938:	4630      	mov	r0, r6
 800793a:	f7ff ffbf 	bl	80078bc <sbrk_aligned>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	4604      	mov	r4, r0
 8007942:	d158      	bne.n	80079f6 <_malloc_r+0xf6>
 8007944:	f8d8 4000 	ldr.w	r4, [r8]
 8007948:	4627      	mov	r7, r4
 800794a:	2f00      	cmp	r7, #0
 800794c:	d143      	bne.n	80079d6 <_malloc_r+0xd6>
 800794e:	2c00      	cmp	r4, #0
 8007950:	d04b      	beq.n	80079ea <_malloc_r+0xea>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	4639      	mov	r1, r7
 8007956:	4630      	mov	r0, r6
 8007958:	eb04 0903 	add.w	r9, r4, r3
 800795c:	f000 fe48 	bl	80085f0 <_sbrk_r>
 8007960:	4581      	cmp	r9, r0
 8007962:	d142      	bne.n	80079ea <_malloc_r+0xea>
 8007964:	6821      	ldr	r1, [r4, #0]
 8007966:	1a6d      	subs	r5, r5, r1
 8007968:	4629      	mov	r1, r5
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ffa6 	bl	80078bc <sbrk_aligned>
 8007970:	3001      	adds	r0, #1
 8007972:	d03a      	beq.n	80079ea <_malloc_r+0xea>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	442b      	add	r3, r5
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	f8d8 3000 	ldr.w	r3, [r8]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	bb62      	cbnz	r2, 80079dc <_malloc_r+0xdc>
 8007982:	f8c8 7000 	str.w	r7, [r8]
 8007986:	e00f      	b.n	80079a8 <_malloc_r+0xa8>
 8007988:	6822      	ldr	r2, [r4, #0]
 800798a:	1b52      	subs	r2, r2, r5
 800798c:	d420      	bmi.n	80079d0 <_malloc_r+0xd0>
 800798e:	2a0b      	cmp	r2, #11
 8007990:	d917      	bls.n	80079c2 <_malloc_r+0xc2>
 8007992:	1961      	adds	r1, r4, r5
 8007994:	42a3      	cmp	r3, r4
 8007996:	6025      	str	r5, [r4, #0]
 8007998:	bf18      	it	ne
 800799a:	6059      	strne	r1, [r3, #4]
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	bf08      	it	eq
 80079a0:	f8c8 1000 	streq.w	r1, [r8]
 80079a4:	5162      	str	r2, [r4, r5]
 80079a6:	604b      	str	r3, [r1, #4]
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f82f 	bl	8007a0c <__malloc_unlock>
 80079ae:	f104 000b 	add.w	r0, r4, #11
 80079b2:	1d23      	adds	r3, r4, #4
 80079b4:	f020 0007 	bic.w	r0, r0, #7
 80079b8:	1ac2      	subs	r2, r0, r3
 80079ba:	bf1c      	itt	ne
 80079bc:	1a1b      	subne	r3, r3, r0
 80079be:	50a3      	strne	r3, [r4, r2]
 80079c0:	e7af      	b.n	8007922 <_malloc_r+0x22>
 80079c2:	6862      	ldr	r2, [r4, #4]
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	bf0c      	ite	eq
 80079c8:	f8c8 2000 	streq.w	r2, [r8]
 80079cc:	605a      	strne	r2, [r3, #4]
 80079ce:	e7eb      	b.n	80079a8 <_malloc_r+0xa8>
 80079d0:	4623      	mov	r3, r4
 80079d2:	6864      	ldr	r4, [r4, #4]
 80079d4:	e7ae      	b.n	8007934 <_malloc_r+0x34>
 80079d6:	463c      	mov	r4, r7
 80079d8:	687f      	ldr	r7, [r7, #4]
 80079da:	e7b6      	b.n	800794a <_malloc_r+0x4a>
 80079dc:	461a      	mov	r2, r3
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d1fb      	bne.n	80079dc <_malloc_r+0xdc>
 80079e4:	2300      	movs	r3, #0
 80079e6:	6053      	str	r3, [r2, #4]
 80079e8:	e7de      	b.n	80079a8 <_malloc_r+0xa8>
 80079ea:	230c      	movs	r3, #12
 80079ec:	6033      	str	r3, [r6, #0]
 80079ee:	4630      	mov	r0, r6
 80079f0:	f000 f80c 	bl	8007a0c <__malloc_unlock>
 80079f4:	e794      	b.n	8007920 <_malloc_r+0x20>
 80079f6:	6005      	str	r5, [r0, #0]
 80079f8:	e7d6      	b.n	80079a8 <_malloc_r+0xa8>
 80079fa:	bf00      	nop
 80079fc:	20000434 	.word	0x20000434

08007a00 <__malloc_lock>:
 8007a00:	4801      	ldr	r0, [pc, #4]	@ (8007a08 <__malloc_lock+0x8>)
 8007a02:	f7ff b8ae 	b.w	8006b62 <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	2000042c 	.word	0x2000042c

08007a0c <__malloc_unlock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	@ (8007a14 <__malloc_unlock+0x8>)
 8007a0e:	f7ff b8a9 	b.w	8006b64 <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	2000042c 	.word	0x2000042c

08007a18 <_Balloc>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	69c6      	ldr	r6, [r0, #28]
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	b976      	cbnz	r6, 8007a40 <_Balloc+0x28>
 8007a22:	2010      	movs	r0, #16
 8007a24:	f7ff ff42 	bl	80078ac <malloc>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	61e0      	str	r0, [r4, #28]
 8007a2c:	b920      	cbnz	r0, 8007a38 <_Balloc+0x20>
 8007a2e:	4b18      	ldr	r3, [pc, #96]	@ (8007a90 <_Balloc+0x78>)
 8007a30:	4818      	ldr	r0, [pc, #96]	@ (8007a94 <_Balloc+0x7c>)
 8007a32:	216b      	movs	r1, #107	@ 0x6b
 8007a34:	f000 fdfa 	bl	800862c <__assert_func>
 8007a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a3c:	6006      	str	r6, [r0, #0]
 8007a3e:	60c6      	str	r6, [r0, #12]
 8007a40:	69e6      	ldr	r6, [r4, #28]
 8007a42:	68f3      	ldr	r3, [r6, #12]
 8007a44:	b183      	cbz	r3, 8007a68 <_Balloc+0x50>
 8007a46:	69e3      	ldr	r3, [r4, #28]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a4e:	b9b8      	cbnz	r0, 8007a80 <_Balloc+0x68>
 8007a50:	2101      	movs	r1, #1
 8007a52:	fa01 f605 	lsl.w	r6, r1, r5
 8007a56:	1d72      	adds	r2, r6, #5
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fe04 	bl	8008668 <_calloc_r>
 8007a60:	b160      	cbz	r0, 8007a7c <_Balloc+0x64>
 8007a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a66:	e00e      	b.n	8007a86 <_Balloc+0x6e>
 8007a68:	2221      	movs	r2, #33	@ 0x21
 8007a6a:	2104      	movs	r1, #4
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 fdfb 	bl	8008668 <_calloc_r>
 8007a72:	69e3      	ldr	r3, [r4, #28]
 8007a74:	60f0      	str	r0, [r6, #12]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e4      	bne.n	8007a46 <_Balloc+0x2e>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	6802      	ldr	r2, [r0, #0]
 8007a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a86:	2300      	movs	r3, #0
 8007a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a8c:	e7f7      	b.n	8007a7e <_Balloc+0x66>
 8007a8e:	bf00      	nop
 8007a90:	08008919 	.word	0x08008919
 8007a94:	08008999 	.word	0x08008999

08007a98 <_Bfree>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	69c6      	ldr	r6, [r0, #28]
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	b976      	cbnz	r6, 8007ac0 <_Bfree+0x28>
 8007aa2:	2010      	movs	r0, #16
 8007aa4:	f7ff ff02 	bl	80078ac <malloc>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	61e8      	str	r0, [r5, #28]
 8007aac:	b920      	cbnz	r0, 8007ab8 <_Bfree+0x20>
 8007aae:	4b09      	ldr	r3, [pc, #36]	@ (8007ad4 <_Bfree+0x3c>)
 8007ab0:	4809      	ldr	r0, [pc, #36]	@ (8007ad8 <_Bfree+0x40>)
 8007ab2:	218f      	movs	r1, #143	@ 0x8f
 8007ab4:	f000 fdba 	bl	800862c <__assert_func>
 8007ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007abc:	6006      	str	r6, [r0, #0]
 8007abe:	60c6      	str	r6, [r0, #12]
 8007ac0:	b13c      	cbz	r4, 8007ad2 <_Bfree+0x3a>
 8007ac2:	69eb      	ldr	r3, [r5, #28]
 8007ac4:	6862      	ldr	r2, [r4, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007acc:	6021      	str	r1, [r4, #0]
 8007ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	08008919 	.word	0x08008919
 8007ad8:	08008999 	.word	0x08008999

08007adc <__multadd>:
 8007adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae0:	690d      	ldr	r5, [r1, #16]
 8007ae2:	4607      	mov	r7, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	461e      	mov	r6, r3
 8007ae8:	f101 0c14 	add.w	ip, r1, #20
 8007aec:	2000      	movs	r0, #0
 8007aee:	f8dc 3000 	ldr.w	r3, [ip]
 8007af2:	b299      	uxth	r1, r3
 8007af4:	fb02 6101 	mla	r1, r2, r1, r6
 8007af8:	0c1e      	lsrs	r6, r3, #16
 8007afa:	0c0b      	lsrs	r3, r1, #16
 8007afc:	fb02 3306 	mla	r3, r2, r6, r3
 8007b00:	b289      	uxth	r1, r1
 8007b02:	3001      	adds	r0, #1
 8007b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b08:	4285      	cmp	r5, r0
 8007b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b12:	dcec      	bgt.n	8007aee <__multadd+0x12>
 8007b14:	b30e      	cbz	r6, 8007b5a <__multadd+0x7e>
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dc19      	bgt.n	8007b50 <__multadd+0x74>
 8007b1c:	6861      	ldr	r1, [r4, #4]
 8007b1e:	4638      	mov	r0, r7
 8007b20:	3101      	adds	r1, #1
 8007b22:	f7ff ff79 	bl	8007a18 <_Balloc>
 8007b26:	4680      	mov	r8, r0
 8007b28:	b928      	cbnz	r0, 8007b36 <__multadd+0x5a>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b60 <__multadd+0x84>)
 8007b2e:	480d      	ldr	r0, [pc, #52]	@ (8007b64 <__multadd+0x88>)
 8007b30:	21ba      	movs	r1, #186	@ 0xba
 8007b32:	f000 fd7b 	bl	800862c <__assert_func>
 8007b36:	6922      	ldr	r2, [r4, #16]
 8007b38:	3202      	adds	r2, #2
 8007b3a:	f104 010c 	add.w	r1, r4, #12
 8007b3e:	0092      	lsls	r2, r2, #2
 8007b40:	300c      	adds	r0, #12
 8007b42:	f000 fd65 	bl	8008610 <memcpy>
 8007b46:	4621      	mov	r1, r4
 8007b48:	4638      	mov	r0, r7
 8007b4a:	f7ff ffa5 	bl	8007a98 <_Bfree>
 8007b4e:	4644      	mov	r4, r8
 8007b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b54:	3501      	adds	r5, #1
 8007b56:	615e      	str	r6, [r3, #20]
 8007b58:	6125      	str	r5, [r4, #16]
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b60:	08008988 	.word	0x08008988
 8007b64:	08008999 	.word	0x08008999

08007b68 <__hi0bits>:
 8007b68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	bf36      	itet	cc
 8007b70:	0403      	lslcc	r3, r0, #16
 8007b72:	2000      	movcs	r0, #0
 8007b74:	2010      	movcc	r0, #16
 8007b76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b7a:	bf3c      	itt	cc
 8007b7c:	021b      	lslcc	r3, r3, #8
 8007b7e:	3008      	addcc	r0, #8
 8007b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b84:	bf3c      	itt	cc
 8007b86:	011b      	lslcc	r3, r3, #4
 8007b88:	3004      	addcc	r0, #4
 8007b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8e:	bf3c      	itt	cc
 8007b90:	009b      	lslcc	r3, r3, #2
 8007b92:	3002      	addcc	r0, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	db05      	blt.n	8007ba4 <__hi0bits+0x3c>
 8007b98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b9c:	f100 0001 	add.w	r0, r0, #1
 8007ba0:	bf08      	it	eq
 8007ba2:	2020      	moveq	r0, #32
 8007ba4:	4770      	bx	lr

08007ba6 <__lo0bits>:
 8007ba6:	6803      	ldr	r3, [r0, #0]
 8007ba8:	4602      	mov	r2, r0
 8007baa:	f013 0007 	ands.w	r0, r3, #7
 8007bae:	d00b      	beq.n	8007bc8 <__lo0bits+0x22>
 8007bb0:	07d9      	lsls	r1, r3, #31
 8007bb2:	d421      	bmi.n	8007bf8 <__lo0bits+0x52>
 8007bb4:	0798      	lsls	r0, r3, #30
 8007bb6:	bf49      	itett	mi
 8007bb8:	085b      	lsrmi	r3, r3, #1
 8007bba:	089b      	lsrpl	r3, r3, #2
 8007bbc:	2001      	movmi	r0, #1
 8007bbe:	6013      	strmi	r3, [r2, #0]
 8007bc0:	bf5c      	itt	pl
 8007bc2:	6013      	strpl	r3, [r2, #0]
 8007bc4:	2002      	movpl	r0, #2
 8007bc6:	4770      	bx	lr
 8007bc8:	b299      	uxth	r1, r3
 8007bca:	b909      	cbnz	r1, 8007bd0 <__lo0bits+0x2a>
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	2010      	movs	r0, #16
 8007bd0:	b2d9      	uxtb	r1, r3
 8007bd2:	b909      	cbnz	r1, 8007bd8 <__lo0bits+0x32>
 8007bd4:	3008      	adds	r0, #8
 8007bd6:	0a1b      	lsrs	r3, r3, #8
 8007bd8:	0719      	lsls	r1, r3, #28
 8007bda:	bf04      	itt	eq
 8007bdc:	091b      	lsreq	r3, r3, #4
 8007bde:	3004      	addeq	r0, #4
 8007be0:	0799      	lsls	r1, r3, #30
 8007be2:	bf04      	itt	eq
 8007be4:	089b      	lsreq	r3, r3, #2
 8007be6:	3002      	addeq	r0, #2
 8007be8:	07d9      	lsls	r1, r3, #31
 8007bea:	d403      	bmi.n	8007bf4 <__lo0bits+0x4e>
 8007bec:	085b      	lsrs	r3, r3, #1
 8007bee:	f100 0001 	add.w	r0, r0, #1
 8007bf2:	d003      	beq.n	8007bfc <__lo0bits+0x56>
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	4770      	bx	lr
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	4770      	bx	lr
 8007bfc:	2020      	movs	r0, #32
 8007bfe:	4770      	bx	lr

08007c00 <__i2b>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	460c      	mov	r4, r1
 8007c04:	2101      	movs	r1, #1
 8007c06:	f7ff ff07 	bl	8007a18 <_Balloc>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	b928      	cbnz	r0, 8007c1a <__i2b+0x1a>
 8007c0e:	4b05      	ldr	r3, [pc, #20]	@ (8007c24 <__i2b+0x24>)
 8007c10:	4805      	ldr	r0, [pc, #20]	@ (8007c28 <__i2b+0x28>)
 8007c12:	f240 1145 	movw	r1, #325	@ 0x145
 8007c16:	f000 fd09 	bl	800862c <__assert_func>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	6144      	str	r4, [r0, #20]
 8007c1e:	6103      	str	r3, [r0, #16]
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	bf00      	nop
 8007c24:	08008988 	.word	0x08008988
 8007c28:	08008999 	.word	0x08008999

08007c2c <__multiply>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	4617      	mov	r7, r2
 8007c32:	690a      	ldr	r2, [r1, #16]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	bfa8      	it	ge
 8007c3a:	463b      	movge	r3, r7
 8007c3c:	4689      	mov	r9, r1
 8007c3e:	bfa4      	itt	ge
 8007c40:	460f      	movge	r7, r1
 8007c42:	4699      	movge	r9, r3
 8007c44:	693d      	ldr	r5, [r7, #16]
 8007c46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	eb05 060a 	add.w	r6, r5, sl
 8007c52:	42b3      	cmp	r3, r6
 8007c54:	b085      	sub	sp, #20
 8007c56:	bfb8      	it	lt
 8007c58:	3101      	addlt	r1, #1
 8007c5a:	f7ff fedd 	bl	8007a18 <_Balloc>
 8007c5e:	b930      	cbnz	r0, 8007c6e <__multiply+0x42>
 8007c60:	4602      	mov	r2, r0
 8007c62:	4b41      	ldr	r3, [pc, #260]	@ (8007d68 <__multiply+0x13c>)
 8007c64:	4841      	ldr	r0, [pc, #260]	@ (8007d6c <__multiply+0x140>)
 8007c66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c6a:	f000 fcdf 	bl	800862c <__assert_func>
 8007c6e:	f100 0414 	add.w	r4, r0, #20
 8007c72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007c76:	4623      	mov	r3, r4
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4573      	cmp	r3, lr
 8007c7c:	d320      	bcc.n	8007cc0 <__multiply+0x94>
 8007c7e:	f107 0814 	add.w	r8, r7, #20
 8007c82:	f109 0114 	add.w	r1, r9, #20
 8007c86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007c8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	1beb      	subs	r3, r5, r7
 8007c92:	3b15      	subs	r3, #21
 8007c94:	f023 0303 	bic.w	r3, r3, #3
 8007c98:	3304      	adds	r3, #4
 8007c9a:	3715      	adds	r7, #21
 8007c9c:	42bd      	cmp	r5, r7
 8007c9e:	bf38      	it	cc
 8007ca0:	2304      	movcc	r3, #4
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	9103      	str	r1, [sp, #12]
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	d80c      	bhi.n	8007cc6 <__multiply+0x9a>
 8007cac:	2e00      	cmp	r6, #0
 8007cae:	dd03      	ble.n	8007cb8 <__multiply+0x8c>
 8007cb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d055      	beq.n	8007d64 <__multiply+0x138>
 8007cb8:	6106      	str	r6, [r0, #16]
 8007cba:	b005      	add	sp, #20
 8007cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc0:	f843 2b04 	str.w	r2, [r3], #4
 8007cc4:	e7d9      	b.n	8007c7a <__multiply+0x4e>
 8007cc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cca:	f1ba 0f00 	cmp.w	sl, #0
 8007cce:	d01f      	beq.n	8007d10 <__multiply+0xe4>
 8007cd0:	46c4      	mov	ip, r8
 8007cd2:	46a1      	mov	r9, r4
 8007cd4:	2700      	movs	r7, #0
 8007cd6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007cda:	f8d9 3000 	ldr.w	r3, [r9]
 8007cde:	fa1f fb82 	uxth.w	fp, r2
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ce8:	443b      	add	r3, r7
 8007cea:	f8d9 7000 	ldr.w	r7, [r9]
 8007cee:	0c12      	lsrs	r2, r2, #16
 8007cf0:	0c3f      	lsrs	r7, r7, #16
 8007cf2:	fb0a 7202 	mla	r2, sl, r2, r7
 8007cf6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d00:	4565      	cmp	r5, ip
 8007d02:	f849 3b04 	str.w	r3, [r9], #4
 8007d06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007d0a:	d8e4      	bhi.n	8007cd6 <__multiply+0xaa>
 8007d0c:	9b01      	ldr	r3, [sp, #4]
 8007d0e:	50e7      	str	r7, [r4, r3]
 8007d10:	9b03      	ldr	r3, [sp, #12]
 8007d12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d16:	3104      	adds	r1, #4
 8007d18:	f1b9 0f00 	cmp.w	r9, #0
 8007d1c:	d020      	beq.n	8007d60 <__multiply+0x134>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	4647      	mov	r7, r8
 8007d22:	46a4      	mov	ip, r4
 8007d24:	f04f 0a00 	mov.w	sl, #0
 8007d28:	f8b7 b000 	ldrh.w	fp, [r7]
 8007d2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007d30:	fb09 220b 	mla	r2, r9, fp, r2
 8007d34:	4452      	add	r2, sl
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d3c:	f84c 3b04 	str.w	r3, [ip], #4
 8007d40:	f857 3b04 	ldr.w	r3, [r7], #4
 8007d44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d48:	f8bc 3000 	ldrh.w	r3, [ip]
 8007d4c:	fb09 330a 	mla	r3, r9, sl, r3
 8007d50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007d54:	42bd      	cmp	r5, r7
 8007d56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d5a:	d8e5      	bhi.n	8007d28 <__multiply+0xfc>
 8007d5c:	9a01      	ldr	r2, [sp, #4]
 8007d5e:	50a3      	str	r3, [r4, r2]
 8007d60:	3404      	adds	r4, #4
 8007d62:	e79f      	b.n	8007ca4 <__multiply+0x78>
 8007d64:	3e01      	subs	r6, #1
 8007d66:	e7a1      	b.n	8007cac <__multiply+0x80>
 8007d68:	08008988 	.word	0x08008988
 8007d6c:	08008999 	.word	0x08008999

08007d70 <__pow5mult>:
 8007d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d74:	4615      	mov	r5, r2
 8007d76:	f012 0203 	ands.w	r2, r2, #3
 8007d7a:	4607      	mov	r7, r0
 8007d7c:	460e      	mov	r6, r1
 8007d7e:	d007      	beq.n	8007d90 <__pow5mult+0x20>
 8007d80:	4c25      	ldr	r4, [pc, #148]	@ (8007e18 <__pow5mult+0xa8>)
 8007d82:	3a01      	subs	r2, #1
 8007d84:	2300      	movs	r3, #0
 8007d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d8a:	f7ff fea7 	bl	8007adc <__multadd>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	10ad      	asrs	r5, r5, #2
 8007d92:	d03d      	beq.n	8007e10 <__pow5mult+0xa0>
 8007d94:	69fc      	ldr	r4, [r7, #28]
 8007d96:	b97c      	cbnz	r4, 8007db8 <__pow5mult+0x48>
 8007d98:	2010      	movs	r0, #16
 8007d9a:	f7ff fd87 	bl	80078ac <malloc>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	61f8      	str	r0, [r7, #28]
 8007da2:	b928      	cbnz	r0, 8007db0 <__pow5mult+0x40>
 8007da4:	4b1d      	ldr	r3, [pc, #116]	@ (8007e1c <__pow5mult+0xac>)
 8007da6:	481e      	ldr	r0, [pc, #120]	@ (8007e20 <__pow5mult+0xb0>)
 8007da8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007dac:	f000 fc3e 	bl	800862c <__assert_func>
 8007db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007db4:	6004      	str	r4, [r0, #0]
 8007db6:	60c4      	str	r4, [r0, #12]
 8007db8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dc0:	b94c      	cbnz	r4, 8007dd6 <__pow5mult+0x66>
 8007dc2:	f240 2171 	movw	r1, #625	@ 0x271
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f7ff ff1a 	bl	8007c00 <__i2b>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	6003      	str	r3, [r0, #0]
 8007dd6:	f04f 0900 	mov.w	r9, #0
 8007dda:	07eb      	lsls	r3, r5, #31
 8007ddc:	d50a      	bpl.n	8007df4 <__pow5mult+0x84>
 8007dde:	4631      	mov	r1, r6
 8007de0:	4622      	mov	r2, r4
 8007de2:	4638      	mov	r0, r7
 8007de4:	f7ff ff22 	bl	8007c2c <__multiply>
 8007de8:	4631      	mov	r1, r6
 8007dea:	4680      	mov	r8, r0
 8007dec:	4638      	mov	r0, r7
 8007dee:	f7ff fe53 	bl	8007a98 <_Bfree>
 8007df2:	4646      	mov	r6, r8
 8007df4:	106d      	asrs	r5, r5, #1
 8007df6:	d00b      	beq.n	8007e10 <__pow5mult+0xa0>
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	b938      	cbnz	r0, 8007e0c <__pow5mult+0x9c>
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4638      	mov	r0, r7
 8007e02:	f7ff ff13 	bl	8007c2c <__multiply>
 8007e06:	6020      	str	r0, [r4, #0]
 8007e08:	f8c0 9000 	str.w	r9, [r0]
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	e7e4      	b.n	8007dda <__pow5mult+0x6a>
 8007e10:	4630      	mov	r0, r6
 8007e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e16:	bf00      	nop
 8007e18:	08008a4c 	.word	0x08008a4c
 8007e1c:	08008919 	.word	0x08008919
 8007e20:	08008999 	.word	0x08008999

08007e24 <__lshift>:
 8007e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e28:	460c      	mov	r4, r1
 8007e2a:	6849      	ldr	r1, [r1, #4]
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e32:	68a3      	ldr	r3, [r4, #8]
 8007e34:	4607      	mov	r7, r0
 8007e36:	4691      	mov	r9, r2
 8007e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e3c:	f108 0601 	add.w	r6, r8, #1
 8007e40:	42b3      	cmp	r3, r6
 8007e42:	db0b      	blt.n	8007e5c <__lshift+0x38>
 8007e44:	4638      	mov	r0, r7
 8007e46:	f7ff fde7 	bl	8007a18 <_Balloc>
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	b948      	cbnz	r0, 8007e62 <__lshift+0x3e>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	4b28      	ldr	r3, [pc, #160]	@ (8007ef4 <__lshift+0xd0>)
 8007e52:	4829      	ldr	r0, [pc, #164]	@ (8007ef8 <__lshift+0xd4>)
 8007e54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e58:	f000 fbe8 	bl	800862c <__assert_func>
 8007e5c:	3101      	adds	r1, #1
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	e7ee      	b.n	8007e40 <__lshift+0x1c>
 8007e62:	2300      	movs	r3, #0
 8007e64:	f100 0114 	add.w	r1, r0, #20
 8007e68:	f100 0210 	add.w	r2, r0, #16
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	4553      	cmp	r3, sl
 8007e70:	db33      	blt.n	8007eda <__lshift+0xb6>
 8007e72:	6920      	ldr	r0, [r4, #16]
 8007e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e78:	f104 0314 	add.w	r3, r4, #20
 8007e7c:	f019 091f 	ands.w	r9, r9, #31
 8007e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e88:	d02b      	beq.n	8007ee2 <__lshift+0xbe>
 8007e8a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e8e:	468a      	mov	sl, r1
 8007e90:	2200      	movs	r2, #0
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	fa00 f009 	lsl.w	r0, r0, r9
 8007e98:	4310      	orrs	r0, r2
 8007e9a:	f84a 0b04 	str.w	r0, [sl], #4
 8007e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea2:	459c      	cmp	ip, r3
 8007ea4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ea8:	d8f3      	bhi.n	8007e92 <__lshift+0x6e>
 8007eaa:	ebac 0304 	sub.w	r3, ip, r4
 8007eae:	3b15      	subs	r3, #21
 8007eb0:	f023 0303 	bic.w	r3, r3, #3
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	f104 0015 	add.w	r0, r4, #21
 8007eba:	4560      	cmp	r0, ip
 8007ebc:	bf88      	it	hi
 8007ebe:	2304      	movhi	r3, #4
 8007ec0:	50ca      	str	r2, [r1, r3]
 8007ec2:	b10a      	cbz	r2, 8007ec8 <__lshift+0xa4>
 8007ec4:	f108 0602 	add.w	r6, r8, #2
 8007ec8:	3e01      	subs	r6, #1
 8007eca:	4638      	mov	r0, r7
 8007ecc:	612e      	str	r6, [r5, #16]
 8007ece:	4621      	mov	r1, r4
 8007ed0:	f7ff fde2 	bl	8007a98 <_Bfree>
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eda:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ede:	3301      	adds	r3, #1
 8007ee0:	e7c5      	b.n	8007e6e <__lshift+0x4a>
 8007ee2:	3904      	subs	r1, #4
 8007ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ee8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eec:	459c      	cmp	ip, r3
 8007eee:	d8f9      	bhi.n	8007ee4 <__lshift+0xc0>
 8007ef0:	e7ea      	b.n	8007ec8 <__lshift+0xa4>
 8007ef2:	bf00      	nop
 8007ef4:	08008988 	.word	0x08008988
 8007ef8:	08008999 	.word	0x08008999

08007efc <__mcmp>:
 8007efc:	690a      	ldr	r2, [r1, #16]
 8007efe:	4603      	mov	r3, r0
 8007f00:	6900      	ldr	r0, [r0, #16]
 8007f02:	1a80      	subs	r0, r0, r2
 8007f04:	b530      	push	{r4, r5, lr}
 8007f06:	d10e      	bne.n	8007f26 <__mcmp+0x2a>
 8007f08:	3314      	adds	r3, #20
 8007f0a:	3114      	adds	r1, #20
 8007f0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f1c:	4295      	cmp	r5, r2
 8007f1e:	d003      	beq.n	8007f28 <__mcmp+0x2c>
 8007f20:	d205      	bcs.n	8007f2e <__mcmp+0x32>
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	bd30      	pop	{r4, r5, pc}
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	d3f3      	bcc.n	8007f14 <__mcmp+0x18>
 8007f2c:	e7fb      	b.n	8007f26 <__mcmp+0x2a>
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e7f9      	b.n	8007f26 <__mcmp+0x2a>
	...

08007f34 <__mdiff>:
 8007f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f38:	4689      	mov	r9, r1
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4648      	mov	r0, r9
 8007f40:	4614      	mov	r4, r2
 8007f42:	f7ff ffdb 	bl	8007efc <__mcmp>
 8007f46:	1e05      	subs	r5, r0, #0
 8007f48:	d112      	bne.n	8007f70 <__mdiff+0x3c>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7ff fd63 	bl	8007a18 <_Balloc>
 8007f52:	4602      	mov	r2, r0
 8007f54:	b928      	cbnz	r0, 8007f62 <__mdiff+0x2e>
 8007f56:	4b3f      	ldr	r3, [pc, #252]	@ (8008054 <__mdiff+0x120>)
 8007f58:	f240 2137 	movw	r1, #567	@ 0x237
 8007f5c:	483e      	ldr	r0, [pc, #248]	@ (8008058 <__mdiff+0x124>)
 8007f5e:	f000 fb65 	bl	800862c <__assert_func>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f68:	4610      	mov	r0, r2
 8007f6a:	b003      	add	sp, #12
 8007f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f70:	bfbc      	itt	lt
 8007f72:	464b      	movlt	r3, r9
 8007f74:	46a1      	movlt	r9, r4
 8007f76:	4630      	mov	r0, r6
 8007f78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f7c:	bfba      	itte	lt
 8007f7e:	461c      	movlt	r4, r3
 8007f80:	2501      	movlt	r5, #1
 8007f82:	2500      	movge	r5, #0
 8007f84:	f7ff fd48 	bl	8007a18 <_Balloc>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	b918      	cbnz	r0, 8007f94 <__mdiff+0x60>
 8007f8c:	4b31      	ldr	r3, [pc, #196]	@ (8008054 <__mdiff+0x120>)
 8007f8e:	f240 2145 	movw	r1, #581	@ 0x245
 8007f92:	e7e3      	b.n	8007f5c <__mdiff+0x28>
 8007f94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f98:	6926      	ldr	r6, [r4, #16]
 8007f9a:	60c5      	str	r5, [r0, #12]
 8007f9c:	f109 0310 	add.w	r3, r9, #16
 8007fa0:	f109 0514 	add.w	r5, r9, #20
 8007fa4:	f104 0e14 	add.w	lr, r4, #20
 8007fa8:	f100 0b14 	add.w	fp, r0, #20
 8007fac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	46d9      	mov	r9, fp
 8007fb8:	f04f 0c00 	mov.w	ip, #0
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007fc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	fa1f f38a 	uxth.w	r3, sl
 8007fcc:	4619      	mov	r1, r3
 8007fce:	b283      	uxth	r3, r0
 8007fd0:	1acb      	subs	r3, r1, r3
 8007fd2:	0c00      	lsrs	r0, r0, #16
 8007fd4:	4463      	add	r3, ip
 8007fd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007fda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fe4:	4576      	cmp	r6, lr
 8007fe6:	f849 3b04 	str.w	r3, [r9], #4
 8007fea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fee:	d8e5      	bhi.n	8007fbc <__mdiff+0x88>
 8007ff0:	1b33      	subs	r3, r6, r4
 8007ff2:	3b15      	subs	r3, #21
 8007ff4:	f023 0303 	bic.w	r3, r3, #3
 8007ff8:	3415      	adds	r4, #21
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	42a6      	cmp	r6, r4
 8007ffe:	bf38      	it	cc
 8008000:	2304      	movcc	r3, #4
 8008002:	441d      	add	r5, r3
 8008004:	445b      	add	r3, fp
 8008006:	461e      	mov	r6, r3
 8008008:	462c      	mov	r4, r5
 800800a:	4544      	cmp	r4, r8
 800800c:	d30e      	bcc.n	800802c <__mdiff+0xf8>
 800800e:	f108 0103 	add.w	r1, r8, #3
 8008012:	1b49      	subs	r1, r1, r5
 8008014:	f021 0103 	bic.w	r1, r1, #3
 8008018:	3d03      	subs	r5, #3
 800801a:	45a8      	cmp	r8, r5
 800801c:	bf38      	it	cc
 800801e:	2100      	movcc	r1, #0
 8008020:	440b      	add	r3, r1
 8008022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008026:	b191      	cbz	r1, 800804e <__mdiff+0x11a>
 8008028:	6117      	str	r7, [r2, #16]
 800802a:	e79d      	b.n	8007f68 <__mdiff+0x34>
 800802c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008030:	46e6      	mov	lr, ip
 8008032:	0c08      	lsrs	r0, r1, #16
 8008034:	fa1c fc81 	uxtah	ip, ip, r1
 8008038:	4471      	add	r1, lr
 800803a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800803e:	b289      	uxth	r1, r1
 8008040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008044:	f846 1b04 	str.w	r1, [r6], #4
 8008048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800804c:	e7dd      	b.n	800800a <__mdiff+0xd6>
 800804e:	3f01      	subs	r7, #1
 8008050:	e7e7      	b.n	8008022 <__mdiff+0xee>
 8008052:	bf00      	nop
 8008054:	08008988 	.word	0x08008988
 8008058:	08008999 	.word	0x08008999

0800805c <__d2b>:
 800805c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008060:	460f      	mov	r7, r1
 8008062:	2101      	movs	r1, #1
 8008064:	ec59 8b10 	vmov	r8, r9, d0
 8008068:	4616      	mov	r6, r2
 800806a:	f7ff fcd5 	bl	8007a18 <_Balloc>
 800806e:	4604      	mov	r4, r0
 8008070:	b930      	cbnz	r0, 8008080 <__d2b+0x24>
 8008072:	4602      	mov	r2, r0
 8008074:	4b23      	ldr	r3, [pc, #140]	@ (8008104 <__d2b+0xa8>)
 8008076:	4824      	ldr	r0, [pc, #144]	@ (8008108 <__d2b+0xac>)
 8008078:	f240 310f 	movw	r1, #783	@ 0x30f
 800807c:	f000 fad6 	bl	800862c <__assert_func>
 8008080:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008088:	b10d      	cbz	r5, 800808e <__d2b+0x32>
 800808a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	f1b8 0300 	subs.w	r3, r8, #0
 8008094:	d023      	beq.n	80080de <__d2b+0x82>
 8008096:	4668      	mov	r0, sp
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	f7ff fd84 	bl	8007ba6 <__lo0bits>
 800809e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080a2:	b1d0      	cbz	r0, 80080da <__d2b+0x7e>
 80080a4:	f1c0 0320 	rsb	r3, r0, #32
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	430b      	orrs	r3, r1
 80080ae:	40c2      	lsrs	r2, r0
 80080b0:	6163      	str	r3, [r4, #20]
 80080b2:	9201      	str	r2, [sp, #4]
 80080b4:	9b01      	ldr	r3, [sp, #4]
 80080b6:	61a3      	str	r3, [r4, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bf0c      	ite	eq
 80080bc:	2201      	moveq	r2, #1
 80080be:	2202      	movne	r2, #2
 80080c0:	6122      	str	r2, [r4, #16]
 80080c2:	b1a5      	cbz	r5, 80080ee <__d2b+0x92>
 80080c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80080c8:	4405      	add	r5, r0
 80080ca:	603d      	str	r5, [r7, #0]
 80080cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80080d0:	6030      	str	r0, [r6, #0]
 80080d2:	4620      	mov	r0, r4
 80080d4:	b003      	add	sp, #12
 80080d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080da:	6161      	str	r1, [r4, #20]
 80080dc:	e7ea      	b.n	80080b4 <__d2b+0x58>
 80080de:	a801      	add	r0, sp, #4
 80080e0:	f7ff fd61 	bl	8007ba6 <__lo0bits>
 80080e4:	9b01      	ldr	r3, [sp, #4]
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	3020      	adds	r0, #32
 80080ea:	2201      	movs	r2, #1
 80080ec:	e7e8      	b.n	80080c0 <__d2b+0x64>
 80080ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080f6:	6038      	str	r0, [r7, #0]
 80080f8:	6918      	ldr	r0, [r3, #16]
 80080fa:	f7ff fd35 	bl	8007b68 <__hi0bits>
 80080fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008102:	e7e5      	b.n	80080d0 <__d2b+0x74>
 8008104:	08008988 	.word	0x08008988
 8008108:	08008999 	.word	0x08008999

0800810c <__sfputc_r>:
 800810c:	6893      	ldr	r3, [r2, #8]
 800810e:	3b01      	subs	r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	b410      	push	{r4}
 8008114:	6093      	str	r3, [r2, #8]
 8008116:	da08      	bge.n	800812a <__sfputc_r+0x1e>
 8008118:	6994      	ldr	r4, [r2, #24]
 800811a:	42a3      	cmp	r3, r4
 800811c:	db01      	blt.n	8008122 <__sfputc_r+0x16>
 800811e:	290a      	cmp	r1, #10
 8008120:	d103      	bne.n	800812a <__sfputc_r+0x1e>
 8008122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008126:	f7fe bc0a 	b.w	800693e <__swbuf_r>
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	1c58      	adds	r0, r3, #1
 800812e:	6010      	str	r0, [r2, #0]
 8008130:	7019      	strb	r1, [r3, #0]
 8008132:	4608      	mov	r0, r1
 8008134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008138:	4770      	bx	lr

0800813a <__sfputs_r>:
 800813a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	4614      	mov	r4, r2
 8008142:	18d5      	adds	r5, r2, r3
 8008144:	42ac      	cmp	r4, r5
 8008146:	d101      	bne.n	800814c <__sfputs_r+0x12>
 8008148:	2000      	movs	r0, #0
 800814a:	e007      	b.n	800815c <__sfputs_r+0x22>
 800814c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008150:	463a      	mov	r2, r7
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ffda 	bl	800810c <__sfputc_r>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d1f3      	bne.n	8008144 <__sfputs_r+0xa>
 800815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008160 <_vfiprintf_r>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	460d      	mov	r5, r1
 8008166:	b09d      	sub	sp, #116	@ 0x74
 8008168:	4614      	mov	r4, r2
 800816a:	4698      	mov	r8, r3
 800816c:	4606      	mov	r6, r0
 800816e:	b118      	cbz	r0, 8008178 <_vfiprintf_r+0x18>
 8008170:	6a03      	ldr	r3, [r0, #32]
 8008172:	b90b      	cbnz	r3, 8008178 <_vfiprintf_r+0x18>
 8008174:	f7fe fafa 	bl	800676c <__sinit>
 8008178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800817a:	07d9      	lsls	r1, r3, #31
 800817c:	d405      	bmi.n	800818a <_vfiprintf_r+0x2a>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	059a      	lsls	r2, r3, #22
 8008182:	d402      	bmi.n	800818a <_vfiprintf_r+0x2a>
 8008184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008186:	f7fe fcec 	bl	8006b62 <__retarget_lock_acquire_recursive>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	071b      	lsls	r3, r3, #28
 800818e:	d501      	bpl.n	8008194 <_vfiprintf_r+0x34>
 8008190:	692b      	ldr	r3, [r5, #16]
 8008192:	b99b      	cbnz	r3, 80081bc <_vfiprintf_r+0x5c>
 8008194:	4629      	mov	r1, r5
 8008196:	4630      	mov	r0, r6
 8008198:	f7fe fc10 	bl	80069bc <__swsetup_r>
 800819c:	b170      	cbz	r0, 80081bc <_vfiprintf_r+0x5c>
 800819e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081a0:	07dc      	lsls	r4, r3, #31
 80081a2:	d504      	bpl.n	80081ae <_vfiprintf_r+0x4e>
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	b01d      	add	sp, #116	@ 0x74
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	0598      	lsls	r0, r3, #22
 80081b2:	d4f7      	bmi.n	80081a4 <_vfiprintf_r+0x44>
 80081b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081b6:	f7fe fcd5 	bl	8006b64 <__retarget_lock_release_recursive>
 80081ba:	e7f3      	b.n	80081a4 <_vfiprintf_r+0x44>
 80081bc:	2300      	movs	r3, #0
 80081be:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c0:	2320      	movs	r3, #32
 80081c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ca:	2330      	movs	r3, #48	@ 0x30
 80081cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800837c <_vfiprintf_r+0x21c>
 80081d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081d4:	f04f 0901 	mov.w	r9, #1
 80081d8:	4623      	mov	r3, r4
 80081da:	469a      	mov	sl, r3
 80081dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e0:	b10a      	cbz	r2, 80081e6 <_vfiprintf_r+0x86>
 80081e2:	2a25      	cmp	r2, #37	@ 0x25
 80081e4:	d1f9      	bne.n	80081da <_vfiprintf_r+0x7a>
 80081e6:	ebba 0b04 	subs.w	fp, sl, r4
 80081ea:	d00b      	beq.n	8008204 <_vfiprintf_r+0xa4>
 80081ec:	465b      	mov	r3, fp
 80081ee:	4622      	mov	r2, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ffa1 	bl	800813a <__sfputs_r>
 80081f8:	3001      	adds	r0, #1
 80081fa:	f000 80a7 	beq.w	800834c <_vfiprintf_r+0x1ec>
 80081fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008200:	445a      	add	r2, fp
 8008202:	9209      	str	r2, [sp, #36]	@ 0x24
 8008204:	f89a 3000 	ldrb.w	r3, [sl]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 809f 	beq.w	800834c <_vfiprintf_r+0x1ec>
 800820e:	2300      	movs	r3, #0
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008218:	f10a 0a01 	add.w	sl, sl, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008224:	931a      	str	r3, [sp, #104]	@ 0x68
 8008226:	4654      	mov	r4, sl
 8008228:	2205      	movs	r2, #5
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	4853      	ldr	r0, [pc, #332]	@ (800837c <_vfiprintf_r+0x21c>)
 8008230:	f7f7 ffd6 	bl	80001e0 <memchr>
 8008234:	9a04      	ldr	r2, [sp, #16]
 8008236:	b9d8      	cbnz	r0, 8008270 <_vfiprintf_r+0x110>
 8008238:	06d1      	lsls	r1, r2, #27
 800823a:	bf44      	itt	mi
 800823c:	2320      	movmi	r3, #32
 800823e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008242:	0713      	lsls	r3, r2, #28
 8008244:	bf44      	itt	mi
 8008246:	232b      	movmi	r3, #43	@ 0x2b
 8008248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800824c:	f89a 3000 	ldrb.w	r3, [sl]
 8008250:	2b2a      	cmp	r3, #42	@ 0x2a
 8008252:	d015      	beq.n	8008280 <_vfiprintf_r+0x120>
 8008254:	9a07      	ldr	r2, [sp, #28]
 8008256:	4654      	mov	r4, sl
 8008258:	2000      	movs	r0, #0
 800825a:	f04f 0c0a 	mov.w	ip, #10
 800825e:	4621      	mov	r1, r4
 8008260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008264:	3b30      	subs	r3, #48	@ 0x30
 8008266:	2b09      	cmp	r3, #9
 8008268:	d94b      	bls.n	8008302 <_vfiprintf_r+0x1a2>
 800826a:	b1b0      	cbz	r0, 800829a <_vfiprintf_r+0x13a>
 800826c:	9207      	str	r2, [sp, #28]
 800826e:	e014      	b.n	800829a <_vfiprintf_r+0x13a>
 8008270:	eba0 0308 	sub.w	r3, r0, r8
 8008274:	fa09 f303 	lsl.w	r3, r9, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	46a2      	mov	sl, r4
 800827e:	e7d2      	b.n	8008226 <_vfiprintf_r+0xc6>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	1d19      	adds	r1, r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	9103      	str	r1, [sp, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfbb      	ittet	lt
 800828c:	425b      	neglt	r3, r3
 800828e:	f042 0202 	orrlt.w	r2, r2, #2
 8008292:	9307      	strge	r3, [sp, #28]
 8008294:	9307      	strlt	r3, [sp, #28]
 8008296:	bfb8      	it	lt
 8008298:	9204      	strlt	r2, [sp, #16]
 800829a:	7823      	ldrb	r3, [r4, #0]
 800829c:	2b2e      	cmp	r3, #46	@ 0x2e
 800829e:	d10a      	bne.n	80082b6 <_vfiprintf_r+0x156>
 80082a0:	7863      	ldrb	r3, [r4, #1]
 80082a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a4:	d132      	bne.n	800830c <_vfiprintf_r+0x1ac>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	1d1a      	adds	r2, r3, #4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	9203      	str	r2, [sp, #12]
 80082ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082b2:	3402      	adds	r4, #2
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800838c <_vfiprintf_r+0x22c>
 80082ba:	7821      	ldrb	r1, [r4, #0]
 80082bc:	2203      	movs	r2, #3
 80082be:	4650      	mov	r0, sl
 80082c0:	f7f7 ff8e 	bl	80001e0 <memchr>
 80082c4:	b138      	cbz	r0, 80082d6 <_vfiprintf_r+0x176>
 80082c6:	9b04      	ldr	r3, [sp, #16]
 80082c8:	eba0 000a 	sub.w	r0, r0, sl
 80082cc:	2240      	movs	r2, #64	@ 0x40
 80082ce:	4082      	lsls	r2, r0
 80082d0:	4313      	orrs	r3, r2
 80082d2:	3401      	adds	r4, #1
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082da:	4829      	ldr	r0, [pc, #164]	@ (8008380 <_vfiprintf_r+0x220>)
 80082dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082e0:	2206      	movs	r2, #6
 80082e2:	f7f7 ff7d 	bl	80001e0 <memchr>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d03f      	beq.n	800836a <_vfiprintf_r+0x20a>
 80082ea:	4b26      	ldr	r3, [pc, #152]	@ (8008384 <_vfiprintf_r+0x224>)
 80082ec:	bb1b      	cbnz	r3, 8008336 <_vfiprintf_r+0x1d6>
 80082ee:	9b03      	ldr	r3, [sp, #12]
 80082f0:	3307      	adds	r3, #7
 80082f2:	f023 0307 	bic.w	r3, r3, #7
 80082f6:	3308      	adds	r3, #8
 80082f8:	9303      	str	r3, [sp, #12]
 80082fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082fc:	443b      	add	r3, r7
 80082fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008300:	e76a      	b.n	80081d8 <_vfiprintf_r+0x78>
 8008302:	fb0c 3202 	mla	r2, ip, r2, r3
 8008306:	460c      	mov	r4, r1
 8008308:	2001      	movs	r0, #1
 800830a:	e7a8      	b.n	800825e <_vfiprintf_r+0xfe>
 800830c:	2300      	movs	r3, #0
 800830e:	3401      	adds	r4, #1
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	4619      	mov	r1, r3
 8008314:	f04f 0c0a 	mov.w	ip, #10
 8008318:	4620      	mov	r0, r4
 800831a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800831e:	3a30      	subs	r2, #48	@ 0x30
 8008320:	2a09      	cmp	r2, #9
 8008322:	d903      	bls.n	800832c <_vfiprintf_r+0x1cc>
 8008324:	2b00      	cmp	r3, #0
 8008326:	d0c6      	beq.n	80082b6 <_vfiprintf_r+0x156>
 8008328:	9105      	str	r1, [sp, #20]
 800832a:	e7c4      	b.n	80082b6 <_vfiprintf_r+0x156>
 800832c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008330:	4604      	mov	r4, r0
 8008332:	2301      	movs	r3, #1
 8008334:	e7f0      	b.n	8008318 <_vfiprintf_r+0x1b8>
 8008336:	ab03      	add	r3, sp, #12
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	462a      	mov	r2, r5
 800833c:	4b12      	ldr	r3, [pc, #72]	@ (8008388 <_vfiprintf_r+0x228>)
 800833e:	a904      	add	r1, sp, #16
 8008340:	4630      	mov	r0, r6
 8008342:	f7fd fdd1 	bl	8005ee8 <_printf_float>
 8008346:	4607      	mov	r7, r0
 8008348:	1c78      	adds	r0, r7, #1
 800834a:	d1d6      	bne.n	80082fa <_vfiprintf_r+0x19a>
 800834c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800834e:	07d9      	lsls	r1, r3, #31
 8008350:	d405      	bmi.n	800835e <_vfiprintf_r+0x1fe>
 8008352:	89ab      	ldrh	r3, [r5, #12]
 8008354:	059a      	lsls	r2, r3, #22
 8008356:	d402      	bmi.n	800835e <_vfiprintf_r+0x1fe>
 8008358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800835a:	f7fe fc03 	bl	8006b64 <__retarget_lock_release_recursive>
 800835e:	89ab      	ldrh	r3, [r5, #12]
 8008360:	065b      	lsls	r3, r3, #25
 8008362:	f53f af1f 	bmi.w	80081a4 <_vfiprintf_r+0x44>
 8008366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008368:	e71e      	b.n	80081a8 <_vfiprintf_r+0x48>
 800836a:	ab03      	add	r3, sp, #12
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	462a      	mov	r2, r5
 8008370:	4b05      	ldr	r3, [pc, #20]	@ (8008388 <_vfiprintf_r+0x228>)
 8008372:	a904      	add	r1, sp, #16
 8008374:	4630      	mov	r0, r6
 8008376:	f7fe f84f 	bl	8006418 <_printf_i>
 800837a:	e7e4      	b.n	8008346 <_vfiprintf_r+0x1e6>
 800837c:	080089f2 	.word	0x080089f2
 8008380:	080089fc 	.word	0x080089fc
 8008384:	08005ee9 	.word	0x08005ee9
 8008388:	0800813b 	.word	0x0800813b
 800838c:	080089f8 	.word	0x080089f8

08008390 <__sflush_r>:
 8008390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008398:	0716      	lsls	r6, r2, #28
 800839a:	4605      	mov	r5, r0
 800839c:	460c      	mov	r4, r1
 800839e:	d454      	bmi.n	800844a <__sflush_r+0xba>
 80083a0:	684b      	ldr	r3, [r1, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dc02      	bgt.n	80083ac <__sflush_r+0x1c>
 80083a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dd48      	ble.n	800843e <__sflush_r+0xae>
 80083ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	d045      	beq.n	800843e <__sflush_r+0xae>
 80083b2:	2300      	movs	r3, #0
 80083b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083b8:	682f      	ldr	r7, [r5, #0]
 80083ba:	6a21      	ldr	r1, [r4, #32]
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	d030      	beq.n	8008422 <__sflush_r+0x92>
 80083c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	0759      	lsls	r1, r3, #29
 80083c6:	d505      	bpl.n	80083d4 <__sflush_r+0x44>
 80083c8:	6863      	ldr	r3, [r4, #4]
 80083ca:	1ad2      	subs	r2, r2, r3
 80083cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083ce:	b10b      	cbz	r3, 80083d4 <__sflush_r+0x44>
 80083d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083d2:	1ad2      	subs	r2, r2, r3
 80083d4:	2300      	movs	r3, #0
 80083d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083d8:	6a21      	ldr	r1, [r4, #32]
 80083da:	4628      	mov	r0, r5
 80083dc:	47b0      	blx	r6
 80083de:	1c43      	adds	r3, r0, #1
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	d106      	bne.n	80083f2 <__sflush_r+0x62>
 80083e4:	6829      	ldr	r1, [r5, #0]
 80083e6:	291d      	cmp	r1, #29
 80083e8:	d82b      	bhi.n	8008442 <__sflush_r+0xb2>
 80083ea:	4a2a      	ldr	r2, [pc, #168]	@ (8008494 <__sflush_r+0x104>)
 80083ec:	40ca      	lsrs	r2, r1
 80083ee:	07d6      	lsls	r6, r2, #31
 80083f0:	d527      	bpl.n	8008442 <__sflush_r+0xb2>
 80083f2:	2200      	movs	r2, #0
 80083f4:	6062      	str	r2, [r4, #4]
 80083f6:	04d9      	lsls	r1, r3, #19
 80083f8:	6922      	ldr	r2, [r4, #16]
 80083fa:	6022      	str	r2, [r4, #0]
 80083fc:	d504      	bpl.n	8008408 <__sflush_r+0x78>
 80083fe:	1c42      	adds	r2, r0, #1
 8008400:	d101      	bne.n	8008406 <__sflush_r+0x76>
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	b903      	cbnz	r3, 8008408 <__sflush_r+0x78>
 8008406:	6560      	str	r0, [r4, #84]	@ 0x54
 8008408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800840a:	602f      	str	r7, [r5, #0]
 800840c:	b1b9      	cbz	r1, 800843e <__sflush_r+0xae>
 800840e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008412:	4299      	cmp	r1, r3
 8008414:	d002      	beq.n	800841c <__sflush_r+0x8c>
 8008416:	4628      	mov	r0, r5
 8008418:	f7ff f9fe 	bl	8007818 <_free_r>
 800841c:	2300      	movs	r3, #0
 800841e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008420:	e00d      	b.n	800843e <__sflush_r+0xae>
 8008422:	2301      	movs	r3, #1
 8008424:	4628      	mov	r0, r5
 8008426:	47b0      	blx	r6
 8008428:	4602      	mov	r2, r0
 800842a:	1c50      	adds	r0, r2, #1
 800842c:	d1c9      	bne.n	80083c2 <__sflush_r+0x32>
 800842e:	682b      	ldr	r3, [r5, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0c6      	beq.n	80083c2 <__sflush_r+0x32>
 8008434:	2b1d      	cmp	r3, #29
 8008436:	d001      	beq.n	800843c <__sflush_r+0xac>
 8008438:	2b16      	cmp	r3, #22
 800843a:	d11e      	bne.n	800847a <__sflush_r+0xea>
 800843c:	602f      	str	r7, [r5, #0]
 800843e:	2000      	movs	r0, #0
 8008440:	e022      	b.n	8008488 <__sflush_r+0xf8>
 8008442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008446:	b21b      	sxth	r3, r3
 8008448:	e01b      	b.n	8008482 <__sflush_r+0xf2>
 800844a:	690f      	ldr	r7, [r1, #16]
 800844c:	2f00      	cmp	r7, #0
 800844e:	d0f6      	beq.n	800843e <__sflush_r+0xae>
 8008450:	0793      	lsls	r3, r2, #30
 8008452:	680e      	ldr	r6, [r1, #0]
 8008454:	bf08      	it	eq
 8008456:	694b      	ldreq	r3, [r1, #20]
 8008458:	600f      	str	r7, [r1, #0]
 800845a:	bf18      	it	ne
 800845c:	2300      	movne	r3, #0
 800845e:	eba6 0807 	sub.w	r8, r6, r7
 8008462:	608b      	str	r3, [r1, #8]
 8008464:	f1b8 0f00 	cmp.w	r8, #0
 8008468:	dde9      	ble.n	800843e <__sflush_r+0xae>
 800846a:	6a21      	ldr	r1, [r4, #32]
 800846c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800846e:	4643      	mov	r3, r8
 8008470:	463a      	mov	r2, r7
 8008472:	4628      	mov	r0, r5
 8008474:	47b0      	blx	r6
 8008476:	2800      	cmp	r0, #0
 8008478:	dc08      	bgt.n	800848c <__sflush_r+0xfc>
 800847a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800848c:	4407      	add	r7, r0
 800848e:	eba8 0800 	sub.w	r8, r8, r0
 8008492:	e7e7      	b.n	8008464 <__sflush_r+0xd4>
 8008494:	20400001 	.word	0x20400001

08008498 <_fflush_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	690b      	ldr	r3, [r1, #16]
 800849c:	4605      	mov	r5, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	b913      	cbnz	r3, 80084a8 <_fflush_r+0x10>
 80084a2:	2500      	movs	r5, #0
 80084a4:	4628      	mov	r0, r5
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	b118      	cbz	r0, 80084b2 <_fflush_r+0x1a>
 80084aa:	6a03      	ldr	r3, [r0, #32]
 80084ac:	b90b      	cbnz	r3, 80084b2 <_fflush_r+0x1a>
 80084ae:	f7fe f95d 	bl	800676c <__sinit>
 80084b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0f3      	beq.n	80084a2 <_fflush_r+0xa>
 80084ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084bc:	07d0      	lsls	r0, r2, #31
 80084be:	d404      	bmi.n	80084ca <_fflush_r+0x32>
 80084c0:	0599      	lsls	r1, r3, #22
 80084c2:	d402      	bmi.n	80084ca <_fflush_r+0x32>
 80084c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084c6:	f7fe fb4c 	bl	8006b62 <__retarget_lock_acquire_recursive>
 80084ca:	4628      	mov	r0, r5
 80084cc:	4621      	mov	r1, r4
 80084ce:	f7ff ff5f 	bl	8008390 <__sflush_r>
 80084d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084d4:	07da      	lsls	r2, r3, #31
 80084d6:	4605      	mov	r5, r0
 80084d8:	d4e4      	bmi.n	80084a4 <_fflush_r+0xc>
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	059b      	lsls	r3, r3, #22
 80084de:	d4e1      	bmi.n	80084a4 <_fflush_r+0xc>
 80084e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084e2:	f7fe fb3f 	bl	8006b64 <__retarget_lock_release_recursive>
 80084e6:	e7dd      	b.n	80084a4 <_fflush_r+0xc>

080084e8 <__swhatbuf_r>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	460c      	mov	r4, r1
 80084ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084f0:	2900      	cmp	r1, #0
 80084f2:	b096      	sub	sp, #88	@ 0x58
 80084f4:	4615      	mov	r5, r2
 80084f6:	461e      	mov	r6, r3
 80084f8:	da0d      	bge.n	8008516 <__swhatbuf_r+0x2e>
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008500:	f04f 0100 	mov.w	r1, #0
 8008504:	bf14      	ite	ne
 8008506:	2340      	movne	r3, #64	@ 0x40
 8008508:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800850c:	2000      	movs	r0, #0
 800850e:	6031      	str	r1, [r6, #0]
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	b016      	add	sp, #88	@ 0x58
 8008514:	bd70      	pop	{r4, r5, r6, pc}
 8008516:	466a      	mov	r2, sp
 8008518:	f000 f848 	bl	80085ac <_fstat_r>
 800851c:	2800      	cmp	r0, #0
 800851e:	dbec      	blt.n	80084fa <__swhatbuf_r+0x12>
 8008520:	9901      	ldr	r1, [sp, #4]
 8008522:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008526:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800852a:	4259      	negs	r1, r3
 800852c:	4159      	adcs	r1, r3
 800852e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008532:	e7eb      	b.n	800850c <__swhatbuf_r+0x24>

08008534 <__smakebuf_r>:
 8008534:	898b      	ldrh	r3, [r1, #12]
 8008536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008538:	079d      	lsls	r5, r3, #30
 800853a:	4606      	mov	r6, r0
 800853c:	460c      	mov	r4, r1
 800853e:	d507      	bpl.n	8008550 <__smakebuf_r+0x1c>
 8008540:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	6123      	str	r3, [r4, #16]
 8008548:	2301      	movs	r3, #1
 800854a:	6163      	str	r3, [r4, #20]
 800854c:	b003      	add	sp, #12
 800854e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008550:	ab01      	add	r3, sp, #4
 8008552:	466a      	mov	r2, sp
 8008554:	f7ff ffc8 	bl	80084e8 <__swhatbuf_r>
 8008558:	9f00      	ldr	r7, [sp, #0]
 800855a:	4605      	mov	r5, r0
 800855c:	4639      	mov	r1, r7
 800855e:	4630      	mov	r0, r6
 8008560:	f7ff f9ce 	bl	8007900 <_malloc_r>
 8008564:	b948      	cbnz	r0, 800857a <__smakebuf_r+0x46>
 8008566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800856a:	059a      	lsls	r2, r3, #22
 800856c:	d4ee      	bmi.n	800854c <__smakebuf_r+0x18>
 800856e:	f023 0303 	bic.w	r3, r3, #3
 8008572:	f043 0302 	orr.w	r3, r3, #2
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	e7e2      	b.n	8008540 <__smakebuf_r+0xc>
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	6020      	str	r0, [r4, #0]
 800857e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	9b01      	ldr	r3, [sp, #4]
 8008586:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800858a:	b15b      	cbz	r3, 80085a4 <__smakebuf_r+0x70>
 800858c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008590:	4630      	mov	r0, r6
 8008592:	f000 f81d 	bl	80085d0 <_isatty_r>
 8008596:	b128      	cbz	r0, 80085a4 <__smakebuf_r+0x70>
 8008598:	89a3      	ldrh	r3, [r4, #12]
 800859a:	f023 0303 	bic.w	r3, r3, #3
 800859e:	f043 0301 	orr.w	r3, r3, #1
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	431d      	orrs	r5, r3
 80085a8:	81a5      	strh	r5, [r4, #12]
 80085aa:	e7cf      	b.n	800854c <__smakebuf_r+0x18>

080085ac <_fstat_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d07      	ldr	r5, [pc, #28]	@ (80085cc <_fstat_r+0x20>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	f7f9 fa35 	bl	8001a28 <_fstat>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d102      	bne.n	80085c8 <_fstat_r+0x1c>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b103      	cbz	r3, 80085c8 <_fstat_r+0x1c>
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	20000428 	.word	0x20000428

080085d0 <_isatty_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d06      	ldr	r5, [pc, #24]	@ (80085ec <_isatty_r+0x1c>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	602b      	str	r3, [r5, #0]
 80085dc:	f7f9 fa34 	bl	8001a48 <_isatty>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_isatty_r+0x1a>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_isatty_r+0x1a>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20000428 	.word	0x20000428

080085f0 <_sbrk_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d06      	ldr	r5, [pc, #24]	@ (800860c <_sbrk_r+0x1c>)
 80085f4:	2300      	movs	r3, #0
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	f7f9 fa3c 	bl	8001a78 <_sbrk>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d102      	bne.n	800860a <_sbrk_r+0x1a>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	b103      	cbz	r3, 800860a <_sbrk_r+0x1a>
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	bd38      	pop	{r3, r4, r5, pc}
 800860c:	20000428 	.word	0x20000428

08008610 <memcpy>:
 8008610:	440a      	add	r2, r1
 8008612:	4291      	cmp	r1, r2
 8008614:	f100 33ff 	add.w	r3, r0, #4294967295
 8008618:	d100      	bne.n	800861c <memcpy+0xc>
 800861a:	4770      	bx	lr
 800861c:	b510      	push	{r4, lr}
 800861e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008622:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008626:	4291      	cmp	r1, r2
 8008628:	d1f9      	bne.n	800861e <memcpy+0xe>
 800862a:	bd10      	pop	{r4, pc}

0800862c <__assert_func>:
 800862c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800862e:	4614      	mov	r4, r2
 8008630:	461a      	mov	r2, r3
 8008632:	4b09      	ldr	r3, [pc, #36]	@ (8008658 <__assert_func+0x2c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4605      	mov	r5, r0
 8008638:	68d8      	ldr	r0, [r3, #12]
 800863a:	b14c      	cbz	r4, 8008650 <__assert_func+0x24>
 800863c:	4b07      	ldr	r3, [pc, #28]	@ (800865c <__assert_func+0x30>)
 800863e:	9100      	str	r1, [sp, #0]
 8008640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008644:	4906      	ldr	r1, [pc, #24]	@ (8008660 <__assert_func+0x34>)
 8008646:	462b      	mov	r3, r5
 8008648:	f000 f842 	bl	80086d0 <fiprintf>
 800864c:	f000 f852 	bl	80086f4 <abort>
 8008650:	4b04      	ldr	r3, [pc, #16]	@ (8008664 <__assert_func+0x38>)
 8008652:	461c      	mov	r4, r3
 8008654:	e7f3      	b.n	800863e <__assert_func+0x12>
 8008656:	bf00      	nop
 8008658:	20000018 	.word	0x20000018
 800865c:	08008a0d 	.word	0x08008a0d
 8008660:	08008a1a 	.word	0x08008a1a
 8008664:	08008a48 	.word	0x08008a48

08008668 <_calloc_r>:
 8008668:	b570      	push	{r4, r5, r6, lr}
 800866a:	fba1 5402 	umull	r5, r4, r1, r2
 800866e:	b934      	cbnz	r4, 800867e <_calloc_r+0x16>
 8008670:	4629      	mov	r1, r5
 8008672:	f7ff f945 	bl	8007900 <_malloc_r>
 8008676:	4606      	mov	r6, r0
 8008678:	b928      	cbnz	r0, 8008686 <_calloc_r+0x1e>
 800867a:	4630      	mov	r0, r6
 800867c:	bd70      	pop	{r4, r5, r6, pc}
 800867e:	220c      	movs	r2, #12
 8008680:	6002      	str	r2, [r0, #0]
 8008682:	2600      	movs	r6, #0
 8008684:	e7f9      	b.n	800867a <_calloc_r+0x12>
 8008686:	462a      	mov	r2, r5
 8008688:	4621      	mov	r1, r4
 800868a:	f7fe f9ed 	bl	8006a68 <memset>
 800868e:	e7f4      	b.n	800867a <_calloc_r+0x12>

08008690 <__ascii_mbtowc>:
 8008690:	b082      	sub	sp, #8
 8008692:	b901      	cbnz	r1, 8008696 <__ascii_mbtowc+0x6>
 8008694:	a901      	add	r1, sp, #4
 8008696:	b142      	cbz	r2, 80086aa <__ascii_mbtowc+0x1a>
 8008698:	b14b      	cbz	r3, 80086ae <__ascii_mbtowc+0x1e>
 800869a:	7813      	ldrb	r3, [r2, #0]
 800869c:	600b      	str	r3, [r1, #0]
 800869e:	7812      	ldrb	r2, [r2, #0]
 80086a0:	1e10      	subs	r0, r2, #0
 80086a2:	bf18      	it	ne
 80086a4:	2001      	movne	r0, #1
 80086a6:	b002      	add	sp, #8
 80086a8:	4770      	bx	lr
 80086aa:	4610      	mov	r0, r2
 80086ac:	e7fb      	b.n	80086a6 <__ascii_mbtowc+0x16>
 80086ae:	f06f 0001 	mvn.w	r0, #1
 80086b2:	e7f8      	b.n	80086a6 <__ascii_mbtowc+0x16>

080086b4 <__ascii_wctomb>:
 80086b4:	4603      	mov	r3, r0
 80086b6:	4608      	mov	r0, r1
 80086b8:	b141      	cbz	r1, 80086cc <__ascii_wctomb+0x18>
 80086ba:	2aff      	cmp	r2, #255	@ 0xff
 80086bc:	d904      	bls.n	80086c8 <__ascii_wctomb+0x14>
 80086be:	228a      	movs	r2, #138	@ 0x8a
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	f04f 30ff 	mov.w	r0, #4294967295
 80086c6:	4770      	bx	lr
 80086c8:	700a      	strb	r2, [r1, #0]
 80086ca:	2001      	movs	r0, #1
 80086cc:	4770      	bx	lr
	...

080086d0 <fiprintf>:
 80086d0:	b40e      	push	{r1, r2, r3}
 80086d2:	b503      	push	{r0, r1, lr}
 80086d4:	4601      	mov	r1, r0
 80086d6:	ab03      	add	r3, sp, #12
 80086d8:	4805      	ldr	r0, [pc, #20]	@ (80086f0 <fiprintf+0x20>)
 80086da:	f853 2b04 	ldr.w	r2, [r3], #4
 80086de:	6800      	ldr	r0, [r0, #0]
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	f7ff fd3d 	bl	8008160 <_vfiprintf_r>
 80086e6:	b002      	add	sp, #8
 80086e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086ec:	b003      	add	sp, #12
 80086ee:	4770      	bx	lr
 80086f0:	20000018 	.word	0x20000018

080086f4 <abort>:
 80086f4:	b508      	push	{r3, lr}
 80086f6:	2006      	movs	r0, #6
 80086f8:	f000 f82c 	bl	8008754 <raise>
 80086fc:	2001      	movs	r0, #1
 80086fe:	f7f9 f943 	bl	8001988 <_exit>

08008702 <_raise_r>:
 8008702:	291f      	cmp	r1, #31
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4605      	mov	r5, r0
 8008708:	460c      	mov	r4, r1
 800870a:	d904      	bls.n	8008716 <_raise_r+0x14>
 800870c:	2316      	movs	r3, #22
 800870e:	6003      	str	r3, [r0, #0]
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	bd38      	pop	{r3, r4, r5, pc}
 8008716:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008718:	b112      	cbz	r2, 8008720 <_raise_r+0x1e>
 800871a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800871e:	b94b      	cbnz	r3, 8008734 <_raise_r+0x32>
 8008720:	4628      	mov	r0, r5
 8008722:	f000 f831 	bl	8008788 <_getpid_r>
 8008726:	4622      	mov	r2, r4
 8008728:	4601      	mov	r1, r0
 800872a:	4628      	mov	r0, r5
 800872c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008730:	f000 b818 	b.w	8008764 <_kill_r>
 8008734:	2b01      	cmp	r3, #1
 8008736:	d00a      	beq.n	800874e <_raise_r+0x4c>
 8008738:	1c59      	adds	r1, r3, #1
 800873a:	d103      	bne.n	8008744 <_raise_r+0x42>
 800873c:	2316      	movs	r3, #22
 800873e:	6003      	str	r3, [r0, #0]
 8008740:	2001      	movs	r0, #1
 8008742:	e7e7      	b.n	8008714 <_raise_r+0x12>
 8008744:	2100      	movs	r1, #0
 8008746:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800874a:	4620      	mov	r0, r4
 800874c:	4798      	blx	r3
 800874e:	2000      	movs	r0, #0
 8008750:	e7e0      	b.n	8008714 <_raise_r+0x12>
	...

08008754 <raise>:
 8008754:	4b02      	ldr	r3, [pc, #8]	@ (8008760 <raise+0xc>)
 8008756:	4601      	mov	r1, r0
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	f7ff bfd2 	b.w	8008702 <_raise_r>
 800875e:	bf00      	nop
 8008760:	20000018 	.word	0x20000018

08008764 <_kill_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d07      	ldr	r5, [pc, #28]	@ (8008784 <_kill_r+0x20>)
 8008768:	2300      	movs	r3, #0
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	4611      	mov	r1, r2
 8008770:	602b      	str	r3, [r5, #0]
 8008772:	f7f9 f8f9 	bl	8001968 <_kill>
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	d102      	bne.n	8008780 <_kill_r+0x1c>
 800877a:	682b      	ldr	r3, [r5, #0]
 800877c:	b103      	cbz	r3, 8008780 <_kill_r+0x1c>
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	bd38      	pop	{r3, r4, r5, pc}
 8008782:	bf00      	nop
 8008784:	20000428 	.word	0x20000428

08008788 <_getpid_r>:
 8008788:	f7f9 b8e6 	b.w	8001958 <_getpid>

0800878c <sqrtf>:
 800878c:	b508      	push	{r3, lr}
 800878e:	ed2d 8b02 	vpush	{d8}
 8008792:	eeb0 8a40 	vmov.f32	s16, s0
 8008796:	f000 f817 	bl	80087c8 <__ieee754_sqrtf>
 800879a:	eeb4 8a48 	vcmp.f32	s16, s16
 800879e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a2:	d60c      	bvs.n	80087be <sqrtf+0x32>
 80087a4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80087c4 <sqrtf+0x38>
 80087a8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80087ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b0:	d505      	bpl.n	80087be <sqrtf+0x32>
 80087b2:	f7fe f9ab 	bl	8006b0c <__errno>
 80087b6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80087ba:	2321      	movs	r3, #33	@ 0x21
 80087bc:	6003      	str	r3, [r0, #0]
 80087be:	ecbd 8b02 	vpop	{d8}
 80087c2:	bd08      	pop	{r3, pc}
 80087c4:	00000000 	.word	0x00000000

080087c8 <__ieee754_sqrtf>:
 80087c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80087cc:	4770      	bx	lr
	...

080087d0 <_init>:
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d2:	bf00      	nop
 80087d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d6:	bc08      	pop	{r3}
 80087d8:	469e      	mov	lr, r3
 80087da:	4770      	bx	lr

080087dc <_fini>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	bf00      	nop
 80087e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e2:	bc08      	pop	{r3}
 80087e4:	469e      	mov	lr, r3
 80087e6:	4770      	bx	lr
